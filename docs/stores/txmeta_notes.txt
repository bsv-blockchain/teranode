   Get(ctx context.Context, hash *chainhash.Hash) (*Data, error)
   GetMeta(ctx context.Context, hash *chainhash.Hash) (*Data, error)
   Create(ctx context.Context, tx *bt.Tx) (*Data, error)
   Delete(ctx context.Context, hash *chainhash.Hash) error
   SetMined(ctx context.Context, hash *chainhash.Hash, blockHash *chainhash.Hash) error
   SetMinedMulti(ctx context.Context, hashes []*chainhash.Hash, blockHash *chainhash.Hash) error

=========


   Used by:
   - Asset Service (gets)
   - Block Assembly Service - get, creates, mined
   - Block Validation Service - creates, gets
   - TX Validator   - creates, deletes


=========


? Who creates

    TX Validator --> Validate() --> TxMetaStore.Create(ctx, tx)
    BlockValidation -->
        --> BlockValidation.go --> storeCoinbaseTx()

    BlockAssembly --> submitMiningSolution --> ba.txMetaStore.Create(ctx, tx) --> Coinbase???

? Who reads (GET)


    DashBoard --> AssetService --> http_impl -->
                    --> GetTransactionMeta.go
                        --> h.repository.TxMetaStore.Get(context, hash)
                    --> GetTransaction.go
                        --> h.repository.GetTransaction(ctx, hash) -- repository below, asset service!
                     --> GetTransactions.go
                        --> h.repository.GetTransaction(ctx, hash) -- repository below, asset service!
                     --> GetUTXOsByTXID.go
                        --> h.repository.GetTransaction(ctx, hash) -- repository below, asset service!

    AssetService --> repository.go--> getTransaction() and getTransactionMeta()     - last one is not used - do not document

    BlockAssembly --> Server.go --> getTxMeta() --> h.repository.TxMetaStore.Get(context, hash)

    BlockValidation --> txmetacache.go --> THIS IS A WRAPPER CACHE,
                                        --> Get() --> return t.txMetaStore.Get(ctx, hash)
                                        --> setMinedInCache()
                                                ---> t.txMEtaStore.Get(ctx, hash)


                    (setting for the above)
                        	// create a caching tx meta store
	if gocore.Config().GetBool("blockvalidation_txMetaCacheEnabled", true) {
		logger.Infof("Using cached version of tx meta store")
		bVal.txMetaStore = newTxMetaCache(txMetaStore)
	} else {
		bVal.txMetaStore = txMetaStore
	}

      The txMetaCache has a TTL 		cacheTTL:    1 * time.Minute,




? Who reads (GETMETA)
   blockValidation --> blessMissingTransaction --> u.txMetaStore.getMeta()
   blockValidation --> validateSubtree         --> u.txMetaStore.getMeta()


? Who deletes

Block Validation --> txmetacache.go --> t.txMetaStore.Delete(ctx, hash)  -- not used?

TX Validator --> Validate() --> v.txMetaStore.Delete()


? Who sets as mined

Block Validation --> txmetacache.go --> SetMined() --> t.txMetaStore.SetMined(ctx, hash, blockHash) -- IGNORE


? Who sets as mined multi

BlockValidation --> txmetacache.go --> SetMinedMulti() --> t.txMetaStore.SetMinedMulti(ctx, hashes, blockHash) - IGNORE not used?


BlockAssembly --> Server.go --> submitMiningSolution -->
        model/update-tx-mined.go --> UpdateTxMinedStatus --> txMetaStore.setMinedMulti(ctx, hashes, blockHash)

Block Validation --> BlockValidation.go --> finalizeBlockValidation -->
model/update-tx-mined.go --> UpdateTxMinedStatus --> txMetaStore.setMinedMulti(ctx, hashes, blockHash)
