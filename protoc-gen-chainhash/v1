package main

import (
	"bytes"
	"fmt"
	"io"
	"os"
	"strings"

	"google.golang.org/protobuf/compiler/protogen"
	"google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/types/pluginpb"
)

func main() {
	input, _ := io.ReadAll(os.Stdin)

	var req pluginpb.CodeGeneratorRequest
	if err := proto.Unmarshal(input, &req); err != nil {
		panic(err)
	}

	// Initialise our plugin with default options
	opts := protogen.Options{}
	plugin, err := opts.New(&req)
	if err != nil {
		panic(err)
	}

	// Protoc passes a slice of File structs for us to process
	for _, file := range plugin.Files {

		// Time to generate code...!

		// 1. Initialise a buffer to hold the generated code
		var buf bytes.Buffer

		// 2. Write the package name
		pkg := fmt.Sprintf("package %s", file.GoPackageName)
		buf.Write([]byte(pkg))

		// 3. For each message add our Foo() method
		for _, msg := range file.Proto.MessageType {
			buf.Write([]byte(fmt.Sprintf(`
				func (x %s) Foo() string {
					 return "bar"
				}`, *msg.Name)))
		}

		// 4. Specify the output filename, in this case test.foo.go
		filename := file.GeneratedFilenamePrefix + ".foo.go"
		f := plugin.NewGeneratedFile(filename, ".")

		// 5. Pass the data from our buffer to the plugin file struct
		if _, err := f.Write(buf.Bytes()); err != nil {
			panic(err)
		}
	}

	// Generate a response from our plugin and marshall as protobuf
	stdout := plugin.Response()
	out, err := proto.Marshal(stdout)
	if err != nil {
		panic(err)
	}

	// Write the response to stdout, to be picked up by protoc
	fmt.Fprint(os.Stdout, string(out))
}

// 	protogen.Options{}.Run(func(plugin *protogen.Plugin) error {
// 		for _, file := range plugin.Files {
// 			if !file.Generate {
// 				continue
// 			}

// 			if err := generateFile(plugin, file); err != nil {
// 				return err
// 			}

// 		}
// 		return nil
// 	})
// }

func generateFile(plugin *protogen.Plugin, file *protogen.File) error {
	if len(file.Messages) == 0 {
		return nil
	}

	genFile := plugin.NewGeneratedFile(file.GeneratedFilenamePrefix+".pb.go", file.GoImportPath)
	genFile.P("package ", file.GoPackageName)
	genFile.P()
	genFile.P("import ", `"github.com/btcsuite/btcd/chaincfg/chainhash"`)
	genFile.P()

	for _, message := range file.Messages {
		genFile.P("type ", message.GoIdent.GoName, " struct {")

		for _, field := range message.Fields {
			fieldType := string(field.Desc.Kind().String())
			if strings.Contains(string(field.Desc.Name()), "hash") && fieldType == "BytesKind" {
				fieldType = "*chainhash.Hash"
			} else {
				fieldType = field.GoIdent.GoName
			}
			genFile.P(field.GoName, " ", fieldType)
		}

		genFile.P("}")

		genFile.P()
	}

	return nil
}
