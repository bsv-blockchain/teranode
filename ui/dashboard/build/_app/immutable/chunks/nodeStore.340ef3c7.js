import{w as c}from"./index.75a27731.js";const l=c([]),m=c([]),i=c("");function u(e){return new Promise((s,t)=>setTimeout(()=>t(new Error("Promise timed out")),e))}async function h(){try{const e=await b();await Promise.all(e.map(async r=>{if(r.blobServerHTTPAddress)try{const a=await Promise.race([f(r.blobServerHTTPAddress),u(1e3)]);r.header=a}catch(a){console.error(`Error fetching header for node ${r.id}:`,a.message),r.header={error:"timeout"}}else r.header={}}));const s={};e.forEach(r=>{r.header&&r.header.hash&&r.blobServerHTTPAddress&&(s[r.header.hash]=r.blobServerHTTPAddress)});const o=(await Promise.all(Object.entries(s).map(async([r,a])=>{try{const n=await Promise.race([w(r,a),u(1e3)]);return{hash:r,blocks:n}}catch(n){return console.error(`Error fetching blocks for hash ${r}:`,n.message),{hash:r,blocks:{error:"timeout"}}}}))).reduce((r,{hash:a,blocks:n})=>(r[a]=n,r),{});l.set(e),m.set(o),i.set(""),setTimeout(h,1e3)}catch(e){console.error(e),i.set(e.message)}}async function b(){const e=await fetch("https://bootstrap.ubsv.dev:8099/nodes");if(!e.ok)throw new Error(`HTTP error! Status: ${e.status}`);return(await e.json()).sort((t,o)=>t.name<o.name?-1:t.name>o.name?1:0)}async function f(e){const s=`${e}/bestblockheader/json`,t=await fetch(s);if(!t.ok)throw new Error(`HTTP error! Status: ${t.status}`);return await t.json()}async function w(e,s){const t=`${s}/headers/${e}/json?n=10`,o=await fetch(t);if(!o.ok)throw new Error(`HTTP error! Status: ${o.status}`);return await o.json()}h();export{m as b,i as e,l as n};
