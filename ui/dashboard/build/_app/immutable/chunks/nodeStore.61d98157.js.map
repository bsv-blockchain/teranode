{"version":3,"file":"nodeStore.61d98157.js","sources":["../../../../../../src/stores/nodeStore.js"],"sourcesContent":["import { writable } from 'svelte/store';\n\n// Create a writable store\nexport const nodes = writable([]);\nexport const blocks = writable([]);\nexport const error = writable(\"\");\nexport const loading = writable(false);\n\nfunction timeout(ms) {\n  return new Promise((_, reject) => setTimeout(() => reject(new Error('Promise timed out')), ms));\n}\n\nasync function fetchData() {\n  try {\n    loading.set(true);\n\n    const n = await getNodes();\n\n    await Promise.all(\n      n.map(async (node) => {\n        if (node.blobServerHTTPAddress) {\n          try {\n            const header = await Promise.race([\n              getBestBlockHeader(node.blobServerHTTPAddress),\n              timeout(1000)\n            ]);\n            node.header = header; // Add the header directly to the node\n          } catch (error) {\n            console.error(`Error fetching header for node ${node.id}:`, error.message);\n            node.header = { error: \"timeout\" }; // Add the error directly to the node\n          }\n        } else {\n          node.header = {}; // Add an empty header object if no blobServerHTTPAddress\n        }\n      })\n    );\n\n    // Go through all the nodes and get a unique list of hashes. Store these in a map\n    // along with the address of the server that has the hash.\n    const hs = {};\n\n    n.forEach((node) => { // Use forEach instead of map\n      if (node.header && node.header.hash && node.blobServerHTTPAddress) {\n        hs[node.header.hash] = node.blobServerHTTPAddress;\n      }\n    });\n\n    const b = await Promise.all(\n      Object.entries(hs).map(async ([hash, addr]) => {\n        try {\n          const blocks = await Promise.race([\n            getLast10Blocks(hash, addr),\n            timeout(1000)\n          ]);\n\n          return {\n            hash,\n            blocks\n          }\n        } catch (error) {\n          console.error(`Error fetching blocks for hash ${hash}:`, error.message); // Corrected the error message\n          return {\n            hash,\n            blocks: { error: \"timeout\" }\n          }\n        }\n      })\n    );\n\n    // Convert the array to an object with hash as the key and blocks as the value\n    const blockObject = b.reduce((acc, { hash, blocks }) => {\n      acc[hash] = blocks;\n      return acc;\n    }, {});\n\n    // if (Object.entries(blockObject).length > 1) {\n    //   console.log(JSON.stringify(blockObject, null, 2))\n    // }\n\n    // Update the stores\n    nodes.set(n);\n    blocks.set(blockObject);\n    error.set(\"\");\n\n    // Call fetchData() again in 1s\n    setTimeout(fetchData, 10000);\n  } catch (err) {\n    console.error(err)\n    error.set(err.message);\n  } finally {\n    loading.set(false);\n  }\n}\n\nasync function getNodes() {\n  const response = await fetch('https://bootstrap.ubsv.dev:8099/nodes');\n\n  if (!response.ok) {\n    throw new Error(`HTTP error! Status: ${response.status}`);\n  }\n\n  const n = await response.json();\n\n  return n.sort((a, b) => {\n    if (a.name < b.name) return -1;\n    if (a.name > b.name) return 1;\n    return 0;\n  });\n}\n\nasync function getBestBlockHeader(address) {\n  const url = `${address}/bestblockheader/json`\n  // console.log(\"Fetching\", url)\n  const response = await fetch(url);\n\n  if (!response.ok) {\n    throw new Error(`HTTP error! Status: ${response.status}`);\n  }\n\n  return await response.json();\n}\n\nasync function getLast10Blocks(hash, address) {\n  const url = `${address}/headers/${hash}/json?n=10`\n  // console.log(\"Fetching\", url)\n  const response = await fetch(url);\n\n  if (!response.ok) {\n    throw new Error(`HTTP error! Status: ${response.status}`);\n  }\n\n  return await response.json();\n}\n\n// Call fetchData() once on load\nfetchData();\n"],"names":["error","blocks"],"mappings":"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"}
