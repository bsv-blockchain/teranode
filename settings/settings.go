package settings

import (
	"runtime"
	"time"

	"github.com/bitcoin-sv/teranode/chaincfg"
)

func NewSettings(alternativeContext ...string) *Settings {
	params, err := chaincfg.GetChainParams(getString("network", "mainnet", alternativeContext...))
	if err != nil {
		panic(err)
	}

	blockMaxSize, err := ParseMemoryUnit(getString("blockmaxsize", "0", alternativeContext...)) // default to 0 - unlimited
	if err != nil {
		panic(err)
	}

	blockAssemblySubtreeTTLMinutes := getInt("blockassembly_subtreeTTL", 120, alternativeContext...)
	blockAssemblySubtreeTTL := time.Duration(blockAssemblySubtreeTTLMinutes) * time.Minute

	doubleSpendWindowMillis := getInt("double_spend_window_millis", 0, alternativeContext...)
	doubleSpendWindow := time.Duration(doubleSpendWindowMillis) * time.Millisecond

	blockValidationSubtreeTTLMinutes := getInt("blockvalidation_subtreeTTL", 120, alternativeContext...)
	blockValidationSubtreeTTL := time.Duration(blockValidationSubtreeTTLMinutes) * time.Minute

	return &Settings{
		ServiceName:              getString("SERVICE_NAME", "teranode"),
		ClientName:               getString("clientName", "defaultClientName", alternativeContext...),
		DataFolder:               getString("dataFolder", "data", alternativeContext...),
		SecurityLevelHTTP:        getInt("securityLevelHTTP", 0, alternativeContext...),
		ServerCertFile:           getString("server_certFile", "", alternativeContext...),
		ServerKeyFile:            getString("server_keyFile", "", alternativeContext...),
		Logger:                   getString("logger", "", alternativeContext...),
		LogLevel:                 getString("logLevel", "INFO", alternativeContext...),
		PrettyLogs:               getBool("prettyLogs", true, alternativeContext...),
		ProfilerAddr:             getString("profilerAddr", "", alternativeContext...),
		StatsPrefix:              getString("stats_prefix", "gocore", alternativeContext...),
		PrometheusEndpoint:       getString("prometheusEndpoint", "", alternativeContext...),
		HealthCheckPort:          getInt("health_check_port", 8000),
		UseDatadogProfiler:       getBool("use_datadog_profiler", false),
		UseOpenTracing:           getBool("use_open_tracing", true),
		TracingSampleRate:        getString("tracing_SampleRate", "0.01"),
		LocalTestStartFromState:  getString("local_test_start_from_state", ""),
		PostgresCheckAddress:     getString("postgres_check_address", "localhost:5432"),
		UseCgoVerifier:           getBool("use_cgo_verifier", true),
		UseOtelTracing:           getBool("use_otel_tracing", false, alternativeContext...),
		GRPCResolver:             getString("grpc_resolver", "", alternativeContext...),
		SecurityLevelGRPC:        getInt("security_level_grpc", 0, alternativeContext...),
		UsePrometheusGRPCMetrics: getBool("use_prometheus_grpc_metrics", true, alternativeContext...),
		TracingCollectorURL:      getURL("tracing_collector_url", "", alternativeContext...),

		ChainCfgParams: params,
		Policy: &PolicySettings{
			ExcessiveBlockSize: getInt("excessiveblocksize", 4294967296, alternativeContext...), // 4GB
			// TODO: change BlockMaxSize to uint64
			//nolint:gosec // G115: integer overflow conversion uint64 -> int (gosec)
			BlockMaxSize:    int(blockMaxSize),
			MaxTxSizePolicy: getInt("maxtxsizepolicy", 10485760, alternativeContext...), // 10MB
			MinMiningTxFee:  getFloat64("minminingtxfee", 0.00000500, alternativeContext...),
			// MaxOrphanTxSize:                 getInt("maxorphantxsize", 1000000),
			// DataCarrierSize:                 int64(getInt("datacarriersize", 1000000)),
			MaxScriptSizePolicy: getInt("maxscriptsizepolicy", 500000, alternativeContext...), // 500KB
			// TODO: what should this be?
			// MaxOpsPerScriptPolicy:           int64(getInt("maxopsperscriptpolicy", 1000000)),
			MaxScriptNumLengthPolicy:     getInt("maxscriptnumlengthpolicy", 10000, alternativeContext...),       // 10K
			MaxPubKeysPerMultisigPolicy:  int64(getInt("maxpubkeyspermultisigpolicy", 0, alternativeContext...)), // 0 is unlimited
			MaxTxSigopsCountsPolicy:      int64(getInt("maxtxsigopscountspolicy", 0, alternativeContext...)),     // 0 is unlimited
			MaxStackMemoryUsagePolicy:    getInt("maxstackmemoryusagepolicy", 104857600, alternativeContext...),  // 100MB
			MaxStackMemoryUsageConsensus: getInt("maxstackmemoryusageconsensus", 0, alternativeContext...),       // 0 is unlimited
			// LimitAncestorCount:              getInt("limitancestorcount", 1000000),
			// LimitCPFPGroupMembersCount:      getInt("limitcpfpgroupmemberscount", 1000000),
			AcceptNonStdOutputs: getBool("acceptnonstdoutputs", true, alternativeContext...),
			// DataCarrier:                     getBool("datacarrier", false),
			// MaxStdTxValidationDuration:    getInt("maxstdtxvalidationduration", 3),       // 3ms
			// MaxNonStdTxValidationDuration: getInt("maxnonstdtxvalidationduration", 1000), // 1000ms
			// MaxTxChainValidationBudget:    getInt("maxtxchainvalidationbudget", 50),      // 50ms
			// ValidationClockCPU:              getBool("validationclockcpu", false),
			// MinConsolidationFactor:          getInt("minconsolidationfactor", 20),
			// MaxConsolidationInputScriptSize: getInt("maxconsolidationinputscriptsize", 1000000),
			// MinConfConsolidationInput:       getInt("minconfconsolidationinput", 1000000),
			// MinConsolidationInputMaturity:   getInt("minconsolidationinputmaturity", 1000000),
			// AcceptNonStdConsolidationInput:  getBool("acceptnonstdconsolidationinput", false),
		},
		Kafka: KafkaSettings{
			Blocks:            getString("KAFKA_BLOCKS", "blocks", alternativeContext...),
			BlocksFinal:       getString("KAFKA_BLOCKS_FINAL", "blocks-final", alternativeContext...),
			Hosts:             getString("KAFKA_HOSTS", "localhost:9092", alternativeContext...),
			LegacyInv:         getString("KAFKA_LEGACY_INV", "legacy-inv", alternativeContext...),
			Partitions:        getInt("KAFKA_PARTITIONS", 1, alternativeContext...),
			Port:              getInt("KAFKA_PORT", 9092, alternativeContext...),
			RejectedTx:        getString("KAFKA_REJECTEDTX", "rejectedtx", alternativeContext...),
			ReplicationFactor: getInt("KAFKA_REPLICATION_FACTOR", 1, alternativeContext...),
			Subtrees:          getString("KAFKA_SUBTREES", "subtrees", alternativeContext...),
			TxMeta:            getString("KAFKA_TXMETA", "txmeta", alternativeContext...),
			UnitTest:          getString("KAFKA_UNITTEST", "unittest", alternativeContext...),
			ValidatorTxs:      getString("KAFKA_VALIDATORTXS", "validatortxs", alternativeContext...),
			TxMetaConfig:      getURL("kafka_txmetaConfig", "", alternativeContext...),
			LegacyInvConfig:   getURL("kafka_legacyInvConfig", "", alternativeContext...),
			BlocksFinalConfig: getURL("kafka_blocksFinalConfig", "", alternativeContext...),
			RejectedTxConfig:  getURL("kafka_rejectedTxConfig", "", alternativeContext...),
			SubtreesConfig:    getURL("kafka_subtreesConfig", "", alternativeContext...),
			BlocksConfig:      getURL("kafka_blocksConfig", "", alternativeContext...),
		},
		Aerospike: AerospikeSettings{
			Debug:                  getBool("aerospike_debug", false, alternativeContext...),
			Host:                   getString("aerospike_host", "localhost", alternativeContext...),
			BatchPolicyURL:         getURL("aerospike_batchPolicy", "defaultBatchPolicy", alternativeContext...),
			ReadPolicyURL:          getURL("aerospike_readPolicy", "defaultReadPolicy", alternativeContext...),
			WritePolicyURL:         getURL("aerospike_writePolicy", "defaultWritePolicy", alternativeContext...),
			Port:                   getInt("aerospike_port", 3000, alternativeContext...),
			UseDefaultBasePolicies: getBool("aerospike_useDefaultBasePolicies", false, alternativeContext...),
			UseDefaultPolicies:     getBool("aerospike_useDefaultPolicies", false, alternativeContext...),
			WarmUp:                 getBool("aerospike_warmUp", true, alternativeContext...),
			StoreBatcherDuration:   getDuration("aerospike_storeBatcherDuration", 10*time.Millisecond),
			StatsRefreshDuration:   getDuration("aerospike_statsRefresh", 5*time.Second),
		},
		Alert: AlertSettings{
			GenesisKeys:   getMultiString("alert_genesis_keys", "|", []string{}, alternativeContext...),
			P2PPrivateKey: getString("alert_p2p_private_key", "", alternativeContext...),
			ProtocolID:    getString("alert_protocol_id", "/bitcoin/alert-system/1.0.0", alternativeContext...),
			Store:         getString("alert_store", "sqlite:///alert", alternativeContext...),
			StoreURL:      getURL("alert_store", "sqlite:///alert", alternativeContext...),
			TopicName:     getString("alert_topic_name", "bitcoin_alert_system", alternativeContext...),
			P2PPort:       getInt("ALERT_P2P_PORT", 9908, alternativeContext...),
		},
		Asset: AssetSettings{
			APIPrefix:               getString("asset_apiPrefix", "/api/v1", alternativeContext...),
			CentrifugeListenAddress: getString("asset_centrifugeListenAddress", ":8892", alternativeContext...),
			CentrifugeDisable:       getBool("asset_centrifuge_disable", false, alternativeContext...),
			HTTPAddress:             getString("asset_httpAddress", "http://localhost:8090/api/v1", alternativeContext...),
			HTTPPublicAddress:       getString("asset_httpPublicAddress", "http://localhost:8090/api/v1", alternativeContext...),
			HTTPListenAddress:       getString("asset_httpListenAddress", ":8090", alternativeContext...),
			HTTPPort:                getInt("ASSET_HTTP_PORT", 8090, alternativeContext...),
			HTTPSPort:               getInt("asset_https_port", 443, alternativeContext...),
			SignHTTPResponses:       getBool("asset_sign_http_responses", false, alternativeContext...),
			EchoDebug:               getBool("ECHO_DEBUG", false, alternativeContext...),
		},
		Block: BlockSettings{
			MinedCacheMaxMB:                       getInt("blockMinedCacheMaxMB", 256),
			PersisterStore:                        getString("blockPersister_blocksFile", "./data/blocks.txte"),
			StateFile:                             getString("blockPersister_stateFile", "file://./data/blockpersister_state.txt"),
			PersisterHTTPListenAddress:            getString("blockPersister_httpListenAddress", ":8083"),
			CheckDuplicateTransactionsConcurrency: getInt("block_checkDuplicateTransactionsConcurrency", -1),
			GetAndValidateSubtreesConcurrency:     getInt("block_getAndValidateSubtreesConcurrency", -1),
			KafkaWorkers:                          getInt("block_kafkaWorkers", 0),
			ValidOrderAndBlessedConcurrency:       getInt("block_validOrderAndBlessedConcurrency", -1),
			StoreCacheEnabled:                     getBool("blockchain_store_cache_enabled", true),
			StoreCacheSize:                        getInt("blockchain_store_cache_size", 200),
			MaxSize:                               getInt("blockmaxsize", 4294967296),
			BlockStore:                            getURL("blockstore", "file://./data/blockstore"),
			FailFastValidation:                    getBool("blockvalidation_fail_fast_validation", true),
			FinalizeBlockValidationConcurrency:    getInt("blockvalidation_finalizeBlockValidationConcurrency", 8),
			GetMissingTransactions:                getInt("blockvalidation_getMissingTransactions", 32),
			QuorumTimeout:                         getDuration("block_quorum_timeout", 10*time.Second),
			BlockPersisterConcurrency:             getInt("blockpersister_concurrency", 8, alternativeContext...),
			BatchMissingTransactions:              getBool("blockpersister_batchMissingTransactions", true, alternativeContext...),
			ProcessTxMetaUsingStoreBatchSize:      getInt("blockvalidation_processTxMetaUsingStore_BatchSize", 1024, alternativeContext...),
			SkipUTXODelete:                        getBool("blockpersister_skipUTXODelete", false, alternativeContext...),
			UTXOPersisterBufferSize:               getString("utxoPersister_buffer_size", "4KB", alternativeContext...),
			UTXOPersisterDirect:                   getBool("direct", true, alternativeContext...),
			TxStore:                               getURL("txstore", "", alternativeContext...),
			BlockPersisterPersistAge:              uint32(getInt("blockpersister_persistAge", 100)), //nolint:gosec // G115: integer overflow conversion int -> uint32 (gosec)
			BlockPersisterPersistSleep:            getDuration("blockPersister_persistSleep", time.Minute),
			TxMetaStore:                           getURL("txmeta_store", ""),
		},
		BlockAssembly: BlockAssemblySettings{
			Disabled:                            getBool("blockassembly_disabled", false, alternativeContext...),
			GRPCAddress:                         getString("blockassembly_grpcAddress", "localhost:8085", alternativeContext...),
			GRPCListenAddress:                   getString("blockassembly_grpcListenAddress", ":8085", alternativeContext...),
			GRPCMaxRetries:                      getInt("blockassembly_grpcMaxRetries", 3, alternativeContext...),
			GRPCRetryBackoff:                    getDuration("blockassembly_grpcRetryBackoff", 2*time.Second),
			LocalTTLCache:                       getString("blockassembly_localTTLCache", "", alternativeContext...),
			MaxBlockReorgCatchup:                getInt("blockassembly_maxBlockReorgCatchup", 100, alternativeContext...),
			MaxBlockReorgRollback:               getInt("blockassembly_maxBlockReorgRollback", 100, alternativeContext...),
			MoveBackBlockConcurrency:            getInt("blockassembly_moveBackBlockConcurrency", 375, alternativeContext...),
			ProcessRemainderTxHashesConcurrency: getInt("blockassembly_processRemainderTxHashesConcurrency", 375, alternativeContext...),
			SendBatchSize:                       getInt("blockassembly_sendBatchSize", 100, alternativeContext...),
			SendBatchTimeout:                    getInt("blockassembly_sendBatchTimeout", 2, alternativeContext...),
			SubtreeProcessorBatcherSize:         getInt("blockassembly_subtreeProcessorBatcherSize", 1000, alternativeContext...),
			SubtreeProcessorConcurrentReads:     getInt("blockassembly_subtreeProcessorConcurrentReads", 375, alternativeContext...),
			SubtreeTTL:                          blockAssemblySubtreeTTL,
			NewSubtreeChanBuffer:                getInt("blockassembly_newSubtreeChanBuffer", 1_000, alternativeContext...),
			SubtreeRetryChanBuffer:              getInt("blockassembly_subtreeRetryChanBuffer", 1_000, alternativeContext...),
			SubmitMiningSolutionWaitForResponse: getBool("blockassembly_SubmitMiningSolution_waitForResponse", true, alternativeContext...),
			InitialMerkleItemsPerSubtree:        getInt("initial_merkle_items_per_subtree", 1_048_576, alternativeContext...),
			DoubleSpendWindow:                   doubleSpendWindow,
			MaxGetReorgHashes:                   getInt("blockassembly_maxGetReorgHashes", 10_000, alternativeContext...),
			MinerWalletPrivateKeys:              getMultiString("miner_wallet_private_keys", "|", []string{}, alternativeContext...),
			DifficultyCache:                     getBool("blockassembly_difficultyCache", true, alternativeContext...),
			UseDynamicSubtreeSize:               getBool("blockassembly_useDynamicSubtreeSize", false, alternativeContext...),
			ResetWaitCount:                      getInt32("blockassembly_resetWaitCount", 3, alternativeContext...),
			ResetWaitDuration:                   getDuration("blockassembly_resetWaitDuration", 20*time.Minute),
		},
		BlockChain: BlockChainSettings{
			GRPCAddress:           getString("blockchain_grpcAddress", "localhost:8087", alternativeContext...),
			GRPCListenAddress:     getString("blockchain_grpcListenAddress", ":8087", alternativeContext...),
			HTTPListenAddress:     getString("blockchain_httpListenAddress", ":8082", alternativeContext...),
			MaxRetries:            getInt("blockchain_maxRetries", 3, alternativeContext...),
			RetrySleep:            getInt("blockchain_retrySleep", 1000, alternativeContext...),
			StoreURL:              getURL("blockchain_store", "sqlite:///blockchain", alternativeContext...),
			FSMStateRestore:       getBool("fsm_state_restore", false, alternativeContext...),
			FSMStateChangeDelay:   getDuration("fsm_state_change_delay", 0),
			StoreDBTimeoutMillis:  getInt("blockchain_store_dbTimeoutMillis", 5000, alternativeContext...),
			InitializeNodeInState: getString("blockchain_initializeNodeInState", "", alternativeContext...),
		},
		BlockValidation: BlockValidationSettings{
			MaxRetries:                 getInt("blockV	alidationMaxRetries", 3, alternativeContext...),
			RetrySleep:                 getDuration("blockValidationRetrySleep", 1*time.Second),
			GRPCAddress:                getString("blockvalidation_grpcAddress", "localhost:8088", alternativeContext...),
			GRPCListenAddress:          getString("blockvalidation_grpcListenAddress", ":8088", alternativeContext...),
			KafkaWorkers:               getInt("blockvalidation_kafkaWorkers", 0, alternativeContext...),
			LocalSetTxMinedConcurrency: getInt("blockvalidation_localSetTxMinedConcurrency", 8, alternativeContext...),
			//nolint:gosec
			MaxPreviousBlockHeadersToCheck:            uint64(getInt("blockvalidation_maxPreviousBlockHeadersToCheck", 100, alternativeContext...)),
			MissingTransactionsBatchSize:              getInt("blockvalidation_missingTransactionsBatchSize", 5000, alternativeContext...),
			ProcessTxMetaUsingCacheBatchSize:          getInt("blockvalidation_processTxMetaUsingCache_BatchSize", 1024, alternativeContext...),
			ProcessTxMetaUsingCacheConcurrency:        getInt("blockvalidation_processTxMetaUsingCache_Concurrency", 32, alternativeContext...),
			ProcessTxMetaUsingCacheMissingTxThreshold: getInt("blockvalidation_processTxMetaUsingCache_MissingTxThreshold", 1, alternativeContext...),
			ProcessTxMetaUsingStoreBatchSize:          getInt("blockvalidation_processTxMetaUsingStore_BatchSize", max(4, runtime.NumCPU()/2), alternativeContext...),
			ProcessTxMetaUsingStoreConcurrency:        getInt("blockvalidation_processTxMetaUsingStore_Concurrency", 32, alternativeContext...),
			ProcessTxMetaUsingStoreMissingTxThreshold: getInt("blockvalidation_processTxMetaUsingStore_MissingTxThreshold", 1, alternativeContext...),
			SkipCheckParentMined:                      getBool("blockvalidation_skipCheckParentMined", false, alternativeContext...),
			SubtreeFoundChConcurrency:                 getInt("blockvalidation_subtreeFoundChConcurrency", 1, alternativeContext...),
			SubtreeTTL:                                blockValidationSubtreeTTL,
			SubtreeTTLConcurrency:                     getInt("blockvalidation_subtreeTTLConcurrency", 32, alternativeContext...),
			SubtreeValidationAbandonThreshold:         getInt("blockvalidation_subtree_validation_abandon_threshold", 1, alternativeContext...),
			ValidateBlockSubtreesConcurrency:          getInt("blockvalidation_validateBlockSubtreesConcurrency", max(4, runtime.NumCPU()/2), alternativeContext...),
			ValidationMaxRetries:                      getInt("blockvalidation_validation_max_retries", 3, alternativeContext...),
			ValidationRetrySleep:                      getDuration("blockvalidation_validation_retry_sleep", 5*time.Second),
			OptimisticMining:                          getBool("blockvalidation_optimistic_mining", true, alternativeContext...),
			IsParentMinedRetryMaxRetry:                getInt("blockvalidation_isParentMined_retry_max_retry", 20, alternativeContext...),
			IsParentMinedRetryBackoffMultiplier:       getInt("blockvalidation_isParentMined_retry_backoff_multiplier", 30, alternativeContext...),
			SubtreeGroupConcurrency:                   getInt("blockvalidation_subtreeGroupConcurrency", 1, alternativeContext...),
			BlockFoundChBufferSize:                    getInt("blockvalidation_blockFoundCh_buffer_size", 1000, alternativeContext...),
			CatchupChBufferSize:                       getInt("blockvalidation_catchupCh_buffer_size", 10, alternativeContext...),
			UseCatchupWhenBehind:                      getBool("blockvalidation_useCatchupWhenBehind", false, alternativeContext...),
			CatchupConcurrency:                        getInt("blockvalidation_catchupConcurrency", max(4, runtime.NumCPU()/2), alternativeContext...),
			ValidationWarmupCount:                     getInt("blockvalidation_validation_warmup_count", 128, alternativeContext...),
			BatchMissingTransactions:                  getBool("blockvalidation_batch_missing_transactions", false, alternativeContext...),
		},
		Validator: ValidatorSettings{
			GRPCAddress:               getString("validator_grpcAddress", "localhost:8081", alternativeContext...),
			GRPCListenAddress:         getString("validator_grpcListenAddress", ":8081", alternativeContext...),
			KafkaWorkers:              getInt("validator_kafkaWorkers", 0, alternativeContext...),
			SendBatchSize:             getInt("validator_sendBatchSize", 100, alternativeContext...),
			SendBatchTimeout:          getInt("validator_sendBatchTimeout", 2, alternativeContext...),
			SendBatchWorkers:          getInt("validator_sendBatchWorkers", 10, alternativeContext...),
			BlockValidationDelay:      getInt("validator_blockvalidation_delay", 0, alternativeContext...),
			BlockValidationMaxRetries: getInt("validator_blockvalidation_maxRetries", 5, alternativeContext...),
			BlockValidationRetrySleep: getString("validator_blockvalidation_retrySleep", "2s", alternativeContext...),
			VerboseDebug:              getBool("validator_verbose_debug", false, alternativeContext...),
			HTTPListenAddress:         getString("validator_httpListenAddress", "", alternativeContext...),
			HTTPAddress:               getURL("validator_httpAddress", "", alternativeContext...),
			HTTPRateLimit:             getInt("validator_httpRateLimit", 1024, alternativeContext...),
			KafkaMaxMessageBytes:      getInt("validator_kafka_maxMessageBytes", 1024*1024, alternativeContext...), // Default 1MB
			UseLocalValidator:         getBool("useLocalValidator", false, alternativeContext...),
		},
		Region: RegionSettings{
			Name: getString("regionName", "defaultRegionName", alternativeContext...),
		},
		Advertising: AdvertisingSettings{
			Interval: getString("advertisingInterval", "10s", alternativeContext...),
			URL:      getString("advertisingURL", "defaultAdvertisingURL", alternativeContext...),
		},
		UtxoStore: UtxoStoreSettings{
			UtxoStore:                        getURL("utxostore", "", alternativeContext...),
			OutpointBatcherSize:              getInt("utxostore_outpointBatcherSize", 100, alternativeContext...),
			OutpointBatcherDurationMillis:    getInt("utxostore_outpointBatcherDurationMillis", 10, alternativeContext...),
			SpendBatcherConcurrency:          getInt("utxostore_spendBatcherConcurrency", 32, alternativeContext...),
			SpendBatcherDurationMillis:       getInt("utxostore_spendBatcherDurationMillis", 100, alternativeContext...),
			SpendBatcherSize:                 getInt("utxostore_spendBatcherSize", 100, alternativeContext...),
			StoreBatcherConcurrency:          getInt("utxostore_storeBatcherConcurrency", 32, alternativeContext...),
			StoreBatcherDurationMillis:       getInt("utxostore_storeBatcherDurationMillis", 100, alternativeContext...),
			StoreBatcherSize:                 getInt("utxostore_storeBatcherSize", 100, alternativeContext...),
			UtxoBatchSize:                    getInt("utxostore_utxoBatchSize", 128, alternativeContext...),
			IncrementBatcherSize:             getInt("utxostore_incrementBatcherSize", 256, alternativeContext...),
			IncrementBatcherDurationMillis:   getInt("utxostore_incrementBatcherDurationMillis", 10, alternativeContext...),
			SetTTLBatcherSize:                getInt("utxostore_setTTLBatcherSize", 256, alternativeContext...),
			SetTTLBatcherDurationMillis:      getInt("utxostore_setTTLBatcherDurationMillis", 10, alternativeContext...),
			UnspendableBatcherSize:           getInt("utxostore_unspendableBatcherSize", 256, alternativeContext...),
			UnspendableBatcherDurationMillis: getInt("utxostore_unspendableBatcherDurationMillis", 10, alternativeContext...),
			GetBatcherSize:                   getInt("utxostore_getBatcherSize", 1, alternativeContext...),
			GetBatcherDurationMillis:         getInt("utxostore_getBatcherDurationMillis", 10, alternativeContext...),
			DBTimeout:                        getDuration("utxostore_dbTimeoutDuration", 5*time.Second),
			UseExternalTxCache:               getBool("utxostore_useExternalTxCache", true, alternativeContext...),
			ExternalizeAllTransactions:       getBool("utxostore_externalizeAllTransactions", false),
			PostgresMaxIdleConns:             getInt("utxostore_utxo_postgresMaxIdleConns", 10, alternativeContext...),
			PostgresMaxOpenConns:             getInt("utxostore_utxo_postgresMaxOpenConns", 80, alternativeContext...),
			VerboseDebug:                     getBool("utxostore_verbose_debug", false, alternativeContext...),
			UpdateTxMinedStatus:              getBool("utxostore_updateTxMinedStatus", true, alternativeContext...),
			MaxMinedRoutines:                 getInt("utxostore_maxMinedRoutines", 128, alternativeContext...),
			MaxMinedBatchSize:                getInt("utxostore_maxMinedBatchSize", 1024, alternativeContext...),
		},
		P2P: P2PSettings{
			BestBlockTopic:     getString("p2p_bestblock_topic", "", alternativeContext...),
			BlockTopic:         getString("p2p_block_topic", "", alternativeContext...),
			BootstrapAddresses: getMultiString("p2p_bootstrapAddresses", "|", []string{}, alternativeContext...),
			GRPCAddress:        getString("p2p_grpcAddress", "", alternativeContext...),
			GRPCListenAddress:  getString("p2p_grpcListenAddress", ":9906", alternativeContext...),
			HTTPAddress:        getString("p2p_httpAddress", "localhost:9906", alternativeContext...),
			HTTPListenAddress:  getString("p2p_httpListenAddress", "", alternativeContext...),
			ListenAddresses:    getMultiString("p2p_listen_addresses", "|", []string{}, alternativeContext...),
			AdvertiseAddresses: getMultiString("p2p_advertise_addresses", "|", []string{}, alternativeContext...),
			MiningOnTopic:      getString("p2p_mining_on_topic", "", alternativeContext...),
			PeerID:             getString("p2p_peer_id", "", alternativeContext...),
			Port:               getInt("p2p_port", 9906, alternativeContext...),
			PrivateKey:         getString("p2p_private_key", "", alternativeContext...),
			RejectedTxTopic:    getString("p2p_rejected_tx_topic", "", alternativeContext...),
			SharedKey:          getString("p2p_shared_key", "", alternativeContext...),
			StaticPeers:        getMultiString("p2p_static_peers", "|", []string{}, alternativeContext...),
			SubtreeTopic:       getString("p2p_subtree_topic", "", alternativeContext...),
			DHTProtocolID:      getString("p2p_dht_protocol_id", "", alternativeContext...),
			DHTUsePrivate:      getBool("p2p_dht_use_private", false, alternativeContext...),
			OptimiseRetries:    getBool("p2p_optimise_retries", false, alternativeContext...),
		},
		Coinbase: CoinbaseSettings{
			DB:                          getString("coinbaseDB", "", alternativeContext...),
			UserPwd:                     getString("coinbaseDBUserPwd", "", alternativeContext...),
			ArbitraryText:               getString("coinbase_arbitrary_text", "", alternativeContext...),
			GRPCAddress:                 getString("coinbase_grpcAddress", "", alternativeContext...),
			GRPCListenAddress:           getString("coinbase_grpcListenAddress", "", alternativeContext...),
			NotificationThreshold:       getInt("coinbase_notification_threshold", 0, alternativeContext...),
			P2PPeerID:                   getString("coinbase_p2p_peer_id", "", alternativeContext...),
			P2PPrivateKey:               getString("coinbase_p2p_private_key", "", alternativeContext...),
			P2PStaticPeers:              getMultiString("coinbase_p2p_static_peers", "|", []string{}, alternativeContext...),
			ShouldWait:                  getBool("coinbase_should_wait", false, alternativeContext...),
			Store:                       getURL("coinbase_store", "", alternativeContext...),
			StoreDBTimeoutMillis:        getInt("coinbase_store_dbTimeoutMillis", 0, alternativeContext...),
			WaitForPeers:                getBool("coinbase_wait_for_peers", false, alternativeContext...),
			WalletPrivateKey:            getString("coinbase_wallet_private_key", "", alternativeContext...),
			DistributorBackoffDuration:  getDuration("distributor_backoff_duration", 1*time.Second),
			DistributorMaxRetries:       getInt("distributor_max_retries", 3, alternativeContext...),
			DistributorFailureTolerance: getInt("distributor_failure_tolerance", 0, alternativeContext...),
			DistributerWaitTime:         getInt("distributer_wait_time", 0, alternativeContext...),
			DistributorTimeout:          getDuration("distributor_timeout", 30*time.Second),
			PeerStatusTimeout:           getDuration("peerStatus_timeout", 30*time.Second),
			SlackChannel:                getString("slack_channel", "", alternativeContext...),
			SlackToken:                  getString("slack_token", "", alternativeContext...),
			TestMode:                    getBool("coinbase_test_mode", false, alternativeContext...),
			P2PPort:                     getInt("p2p_port_coinbase", 9906, alternativeContext...),
		},
		SubtreeValidation: SubtreeValidationSettings{
			QuorumAbsoluteTimeout:                     getDuration("subtree_quorum_absolute_timeout", 30*time.Second),
			QuorumPath:                                getString("subtree_quorum_path", "", alternativeContext...),
			SubtreeStore:                              getURL("subtreestore", "", alternativeContext...),
			FailFastValidation:                        getBool("subtreevalidation_failfast_validation", true, alternativeContext...),
			GetMissingTransactions:                    getInt("subtreevalidation_getMissingTransactions", max(4, runtime.NumCPU()/2), alternativeContext...),
			GRPCAddress:                               getString("subtreevalidation_grpcAddress", "localhost:8089", alternativeContext...),
			GRPCListenAddress:                         getString("subtreevalidation_grpcListenAddress", ":8089", alternativeContext...),
			ProcessTxMetaUsingCacheBatchSize:          getInt("subtreevalidation_processTxMetaUsingCache_BatchSize", 1024, alternativeContext...),
			ProcessTxMetaUsingCacheConcurrency:        getInt("subtreevalidation_processTxMetaUsingCache_Concurrency", 32, alternativeContext...),
			ProcessTxMetaUsingCacheMissingTxThreshold: getInt("subtreevalidation_processTxMetaUsingCache_MissingTxThreshold", 1, alternativeContext...),
			ProcessTxMetaUsingStoreBatchSize:          getInt("subtreevalidation_processTxMetaUsingStore_BatchSize", 1024, alternativeContext...),
			ProcessTxMetaUsingStoreConcurrency:        getInt("subtreevalidation_processTxMetaUsingStore_Concurrency", 32, alternativeContext...),
			ProcessTxMetaUsingStoreMissingTxThreshold: getInt("subtreevalidation_processTxMetaUsingStore_MissingTxThreshold", 1, alternativeContext...),
			SubtreeFoundChConcurrency:                 getInt("subtreevalidation_subtreeFoundChConcurrency", 1, alternativeContext...),
			SubtreeTTL:                                getDuration("subtreevalidation_subtreeTTLDuration", 120*time.Minute),
			SubtreeTTLConcurrency:                     getInt("subtreevalidation_subtreeTTLConcurrency", 8, alternativeContext...),
			SubtreeValidationTimeout:                  getInt("subtreevalidation_subtreeValidationTimeout", 1000, alternativeContext...),
			SubtreeValidationAbandonThreshold:         getInt("subtreevalidation_subtree_validation_abandon_threshold", 1, alternativeContext...),
			TxMetaCacheEnabled:                        getBool("subtreevalidation_txMetaCacheEnabled", true, alternativeContext...),
			TxMetaCacheMaxMB:                          getInt("txMetaCacheMaxMB", 256, alternativeContext...),
			ValidationMaxRetries:                      getInt("subtreevalidation_validation_max_retries", 30, alternativeContext...),
			ValidationRetrySleep:                      getString("subtreevalidation_validation_retry_sleep", "5s", alternativeContext...),
			TxChanBufferSize:                          getInt("subtreevalidation_txChanBufferSize", 0, alternativeContext...),
			BatchMissingTransactions:                  getBool("subtreevalidation_batch_missing_transactions", true, alternativeContext...),
			SpendBatcherSize:                          getInt("subtreevalidation_spendBatcherSize", 1024, alternativeContext...),
			MissingTransactionsBatchSize:              getInt("subtreevalidation_missingTransactionsBatchSize", 100_000, alternativeContext...),
		},
		Legacy: LegacySettings{
			ListenAddresses:                  getMultiString("legacy_listen_addresses", "|", []string{}, alternativeContext...),
			ConnectPeers:                     getMultiString("legacy_connect_peers", "|", []string{}, alternativeContext...),
			OrphanEvictionDuration:           getDuration("legacy_orphanEvictionDuration", 10*time.Minute),
			StoreBatcherSize:                 getInt("legacy_storeBatcherSize", 1024, alternativeContext...),
			StoreBatcherConcurrency:          getInt("legacy_storeBatcherConcurrency", 32, alternativeContext...),
			SpendBatcherSize:                 getInt("legacy_spendBatcherSize", 1024, alternativeContext...),
			SpendBatcherConcurrency:          getInt("legacy_spendBatcherConcurrency", 32, alternativeContext...),
			OutpointBatcherSize:              getInt("legacy_outpointBatcherSize", 1024, alternativeContext...),
			OutpointBatcherConcurrency:       getInt("legacy_outpointBatcherConcurrency", 32, alternativeContext...),
			PrintInvMessages:                 getBool("legacy_printInvMessages", false, alternativeContext...),
			GRPCAddress:                      getString("legacy_grpcAddress", "", alternativeContext...),
			AllowBlockPriority:               getBool("legacy_allowBlockPriority", false, alternativeContext...),
			WriteMsgBlocksToDisk:             getBool("legacy_writeMsgBlocksToDisk", false, alternativeContext...),
			LimitedBlockValidation:           getBool("legacy_limitedBlockValidation", false, alternativeContext...),
			GRPCListenAddress:                getString("legacy_grpcListenAddress", "", alternativeContext...),
			SavePeers:                        getBool("legacy_savePeers", false, alternativeContext...), // by default we do not save the peers
			AllowSyncCandidateFromLocalPeers: getBool("legacy_allowSyncCandidateFromLocalPeers", false, alternativeContext...),
		},
		Propagation: PropagationSettings{
			IPv6Addresses:        getString("ipv6_addresses", "", alternativeContext...),
			IPv6Interface:        getString("ipv6_interface", "", alternativeContext...),
			GRPCMaxConnectionAge: getDuration("propagation_grpcMaxConnectionAge", 90*time.Second),
			HTTPListenAddress:    getString("propagation_httpListenAddress", "", alternativeContext...),
			HTTPAddresses:        getMultiString("propagation_httpAddresses", "|", []string{}, alternativeContext...),
			HTTPRateLimit:        getInt("propagation_httpRateLimit", 1024, alternativeContext...),
			SendBatchSize:        getInt("propagation_sendBatchSize", 100, alternativeContext...),
			SendBatchTimeout:     getInt("propagation_sendBatchTimeout", 5, alternativeContext...),
			GRPCAddresses:        getMultiString("propagation_grpcAddresses", "|", []string{}, alternativeContext...),
			GRPCListenAddress:    getString("propagation_grpcListenAddress", ""),
		},
		RPC: RPCSettings{
			RPCUser:        getString("rpc_user", "", alternativeContext...),
			RPCPass:        getString("rpc_pass", "", alternativeContext...),
			RPCLimitUser:   getString("rpc_limit_user", "", alternativeContext...),
			RPCLimitPass:   getString("rpc_limit_pass", "", alternativeContext...),
			RPCMaxClients:  getInt("rpc_max_clients", 1, alternativeContext...),
			RPCQuirks:      getBool("rpc_quirks", true, alternativeContext...),
			RPCListenerURL: getURL("rpc_listener_url", "", alternativeContext...),
		},
		Faucet: FaucetSettings{
			HTTPListenAddress: getString("faucet_httpListenAddress", "", alternativeContext...),
		},
		Dashboard: DashboardSettings{
			Enabled: getBool("dashboard_enabled", false, alternativeContext...),
		},
	}
}

func max(a, b int) int {
	if a > b {
		return a
	}

	return b
}
