package settings

import (
	"runtime"
	"time"

	"github.com/bitcoin-sv/ubsv/chaincfg"
	"github.com/bitcoin-sv/ubsv/util"
)

func NewSettings() *Settings {
	params, err := chaincfg.GetChainParams(getString("network", "mainnet"))
	if err != nil {
		panic(err)
	}

	blockMaxSize, err := util.ParseMemoryUnit(getString("blockmaxsize", "0")) // default to 0 - unlimited
	if err != nil {
		panic(err)
	}

	blockaAssemblySubtreeTTLMinutes := getInt("blockassembly_subtreeTTL", 120)
	blockAssemblySubtreeTTL := time.Duration(blockaAssemblySubtreeTTLMinutes) * time.Minute

	doubleSpendWindowMillis := getInt("double_spend_window_millis", 0)
	doubleSpendWindow := time.Duration(doubleSpendWindowMillis) * time.Millisecond

	blockValidationSubtreeTTLMinutes := getInt("blockvalidation_subtreeTTL", 120)
	blockValidationSubtreeTTL := time.Duration(blockValidationSubtreeTTLMinutes) * time.Minute

	return &Settings{
		ClientName:        getString("clientName", "defaultClientName"),
		DataFolder:        getString("dataFolder", "data"),
		SecurityLevelHTTP: getInt("securityLevelHTTP", 0),
		ServerCertFile:    getString("server_certFile", ""),
		ServerKeyFile:     getString("server_keyFile", ""),
		LogLevel:          getString("logLevel", "INFO"),
		ProfilerAddr:      getString("profilerAddr", ""),
		StatsPrefix:       getString("stats_prefix", "gocore"),
		ChainCfgParams:    params,
		Policy: &PolicySettings{
			ExcessiveBlockSize: getInt("excessiveblocksize", 4294967296), // 4GB
			// TODO: change BlockMaxSize to uint64
			//nolint:gosec // G115: integer overflow conversion uint64 -> int (gosec)
			BlockMaxSize:    int(blockMaxSize),
			MaxTxSizePolicy: getInt("maxtxsizepolicy", 10485760), // 10MB
			MinMiningTxFee:  getFloat64("minminingtxfee", 0.00000500),
			// MaxOrphanTxSize:                 getInt("maxorphantxsize", 1000000),
			// DataCarrierSize:                 int64(getInt("datacarriersize", 1000000)),
			MaxScriptSizePolicy: getInt("maxscriptsizepolicy", 500000), // 500KB
			// TODO: what should this be?
			//MaxOpsPerScriptPolicy:           int64(getInt("maxopsperscriptpolicy", 1000000)),
			MaxScriptNumLengthPolicy:     getInt("maxscriptnumlengthpolicy", 10000),       // 10K
			MaxPubKeysPerMultisigPolicy:  int64(getInt("maxpubkeyspermultisigpolicy", 0)), // 0 is unlimited
			MaxTxSigopsCountsPolicy:      int64(getInt("maxtxsigopscountspolicy", 0)),     // 0 is unlimited
			MaxStackMemoryUsagePolicy:    getInt("maxstackmemoryusagepolicy", 104857600),  // 100MB
			MaxStackMemoryUsageConsensus: getInt("maxstackmemoryusageconsensus", 0),       // 0 is unlimited
			// LimitAncestorCount:              getInt("limitancestorcount", 1000000),
			// LimitCPFPGroupMembersCount:      getInt("limitcpfpgroupmemberscount", 1000000),
			AcceptNonStdOutputs: getBool("acceptnonstdoutputs", true),
			// DataCarrier:                     getBool("datacarrier", false),
			// MaxStdTxValidationDuration:    getInt("maxstdtxvalidationduration", 3),       // 3ms
			// MaxNonStdTxValidationDuration: getInt("maxnonstdtxvalidationduration", 1000), // 1000ms
			// MaxTxChainValidationBudget:    getInt("maxtxchainvalidationbudget", 50),      // 50ms
			// ValidationClockCPU:              getBool("validationclockcpu", false),
			// MinConsolidationFactor:          getInt("minconsolidationfactor", 20),
			// MaxConsolidationInputScriptSize: getInt("maxconsolidationinputscriptsize", 1000000),
			// MinConfConsolidationInput:       getInt("minconfconsolidationinput", 1000000),
			// MinConsolidationInputMaturity:   getInt("minconsolidationinputmaturity", 1000000),
			// AcceptNonStdConsolidationInput:  getBool("acceptnonstdconsolidationinput", false),
		},
		Kafka: KafkaSettings{
			Blocks:            getString("KAFKA_BLOCKS", "blocks"),
			BlocksFinal:       getString("KAFKA_BLOCKS_FINAL", "blocks-final"),
			Hosts:             getString("KAFKA_HOSTS", "localhost:9092"),
			LegacyInv:         getString("KAFKA_LEGACY_INV", "legacy-inv"),
			Partitions:        getInt("KAFKA_PARTITIONS", 1),
			Port:              getInt("KAFKA_PORT", 9092),
			RejectedTx:        getString("KAFKA_REJECTEDTX", "rejectedtx"),
			ReplicationFactor: getInt("KAFKA_REPLICATION_FACTOR", 1),
			Subtrees:          getString("KAFKA_SUBTREES", "subtrees"),
			TxMeta:            getString("KAFKA_TXMETA", "txmeta"),
			UnitTest:          getString("KAFKA_UNITTEST", "unittest"),
			ValidatorTxs:      getString("KAFKA_VALIDATORTXS", "validatortxs"),
			TxMetaConfig:      getURL("kafka_txmetaConfig", ""),
			LegacyInvConfig:   getURL("kafka_legacyInvConfig", ""),
			BlocksFinalConfig: getURL("kafka_blocksFinalConfig", ""),
		},
		Aerospike: AerospikeSettings{
			Debug:                  getBool("aerospike_debug", false),
			Host:                   getString("aerospike_host", "localhost"),
			BatchPolicy:            getString("aerospike_batchPolicy", "defaultBatchPolicy"),
			ReadPolicy:             getString("aerospike_readPolicy", "defaultReadPolicy"),
			WritePolicy:            getString("aerospike_writePolicy", "defaultWritePolicy"),
			Port:                   getInt("aerospike_port", 3000),
			UseDefaultBasePolicies: getBool("aerospike_useDefaultBasePolicies", false),
			UseDefaultPolicies:     getBool("aerospike_useDefaultPolicies", false),
			WarmUp:                 getBool("aerospike_warmUp", true),
			StoreBatcherDuration:   getDuration("aerospike_storeBatcherDuration", 10*time.Millisecond),
		},
		Alert: AlertSettings{
			GenesisKeys:   getMultiString("alert_genesis_keys", "|", []string{}),
			P2PPrivateKey: getString("alert_p2p_private_key", ""),
			ProtocolID:    getString("alert_protocol_id", "/bitcoin/alert-system/1.0.0"),
			Store:         getString("alert_store", "sqlite:///alert"),
			StoreURL:      getURL("alert_store", "sqlite:///alert"),
			TopicName:     getString("alert_topic_name", "bitcoin_alert_system"),
			P2PPort:       getInt("ALERT_P2P_PORT", 9908),
		},
		Asset: AssetSettings{
			APIPrefix:               getString("asset_apiPrefix", "/api/v1"),
			CentrifugeListenAddress: getString("asset_centrifugeListenAddress", ":8892"),
			CentrifugeDisable:       getBool("asset_centrifuge_disable", false),
			HTTPAddress:             getString("asset_httpAddress", "http://localhost:8090/api/v1"),
			HTTPListenAddress:       getString("asset_httpListenAddress", ":8090"),
			HTTPPort:                getInt("ASSET_HTTP_PORT", 8090),
			HTTPSPort:               getInt("asset_https_port", 443),
			SignHTTPResponses:       getBool("asset_sign_http_responses", false),
			EchoDebug:               getBool("ECHO_DEBUG", false),
		},
		Block: BlockSettings{
			MinedCacheMaxMB:                       getInt("blockMinedCacheMaxMB", 256),
			PersisterStore:                        getString("blockPersister_blocksFile", "./data/blocks.txte"),
			StateFile:                             getString("blockPersister_stateFile", "file://./data/blockpersister_state.txt"),
			PersisterHTTPListenAddress:            getString("blockPersister_httpListenAddress", ":8083"),
			CheckDuplicateTransactionsConcurrency: getInt("block_checkDuplicateTransactionsConcurrency", 32),
			GetAndValidateSubtreesConcurrency:     getInt("block_getAndValidateSubtreesConcurrency", 32),
			KafkaWorkers:                          getInt("block_kafkaWorkers", 0),
			ValidOrderAndBlessedConcurrency:       getInt("block_validOrderAndBlessedConcurrency", 32),
			StoreCacheEnabled:                     getBool("blockchain_store_cache_enabled", true),
			MaxSize:                               getInt("blockmaxsize", 4294967296),
			BlockStore:                            getURL("blockstore", "file://./data/blockstore"),
			FailFastValidation:                    getBool("blockvalidation_fail_fast_validation", true),
			FinalizeBlockValidationConcurrency:    getInt("blockvalidation_finalizeBlockValidationConcurrency", 8),
			GetMissingTransactions:                getInt("blockvalidation_getMissingTransactions", 32),
			QuorumTimeout:                         getDuration("block_quorum_timeout", 10*time.Second),
			BlockPersisterConcurrency:             getInt("blockpersister_concurrency", 8),
			BatchMissingTransactions:              getBool("blockpersister_batchMissingTransactions", true),
			ProcessTxMetaUsingStoreBatchSize:      getInt("blockvalidation_processTxMetaUsingStore_BatchSize", 1024),
			SkipUTXODelete:                        getBool("blockpersister_skipUTXODelete", false),
			UTXOPersisterBufferSize:               getString("utxoPersister_buffer_size", "4KB"),
			UTXOPersisterDirect:                   getBool("direct", true),
			TxStore:                               getURL("txstore", ""),
			BlockPersisterPersistAge:              uint32(getInt("blockpersister_persistAge", 100)), //nolint:gosec // G115: integer overflow conversion int -> uint32 (gosec)
			BlockPersisterPersistSleep:            getDuration("blockPersister_persistSleep", time.Minute),
		},
		BlockAssembly: BlockAssemblySettings{
			Disabled:                            getBool("blockassembly_disabled", false),
			GRPCAddress:                         getString("blockassembly_grpcAddress", "localhost:8085"),
			GRPCListenAddress:                   getString("blockassembly_grpcListenAddress", ":8085"),
			GRPCMaxRetries:                      getInt("blockassembly_grpcMaxRetries", 3),
			GRPCRetryBackoff:                    getDuration("blockassembly_grpcRetryBackoff", 2*time.Second),
			LocalTTLCache:                       getString("blockassembly_localTTLCache", ""),
			MaxBlockReorgCatchup:                getInt("blockassembly_maxBlockReorgCatchup", 100),
			MaxBlockReorgRollback:               getInt("blockassembly_maxBlockReorgRollback", 100),
			MoveDownBlockConcurrency:            getInt("blockassembly_moveDownBlockConcurrency", 375),
			ProcessRemainderTxHashesConcurrency: getInt("blockassembly_processRemainderTxHashesConcurrency", 375),
			SendBatchSize:                       getInt("blockassembly_sendBatchSize", 100),
			SendBatchTimeout:                    getInt("blockassembly_sendBatchTimeout", 2),
			SubtreeProcessorBatcherSize:         getInt("blockassembly_subtreeProcessorBatcherSize", 1000),
			SubtreeProcessorConcurrentReads:     getInt("blockassembly_subtreeProcessorConcurrentReads", 375),
			SubtreeTTL:                          blockAssemblySubtreeTTL,
			NewSubtreeChanBuffer:                getInt("blockassembly_newSubtreeChanBuffer", 1_000),
			SubtreeRetryChanBuffer:              getInt("blockassembly_subtreeRetryChanBuffer", 1_000),
			SubmitMiningSolutionWaitForResponse: getBool("blockassembly_SubmitMiningSolution_waitForResponse", true),
			InitialMerkleItemsPerSubtree:        getInt("initial_merkle_items_per_subtree", 1_048_576),
			DoubleSpendWindow:                   doubleSpendWindow,
			MaxGetReorgHashes:                   getInt("blockassembly_maxGetReorgHashes", 10_000),
			MinerWalletPrivateKeys:              getMultiString("miner_wallet_private_keys", "|", []string{}),
		},
		BlockChain: BlockChainSettings{
			GRPCAddress:          getString("blockchain_grpcAddress", "localhost:8087"),
			GRPCListenAddress:    getString("blockchain_grpcListenAddress", ":8087"),
			HTTPListenAddress:    getString("blockchain_httpListenAddress", ":8082"),
			MaxRetries:           getInt("blockchain_maxRetries", 3),
			RetrySleep:           getInt("blockchain_retrySleep", 1000),
			StoreURL:             getURL("blockchain_store", "sqlite:///blockchain"),
			FSMStateRestore:      getBool("fsm_state_restore", false),
			StoreDBTimeoutMillis: getInt("blockchain_store_dbTimeoutMillis", 5000),
		},
		BlockValidation: BlockValidationSettings{
			MaxRetries:                 getInt("blockValidationMaxRetries", 3),
			RetrySleep:                 getDuration("blockValidationRetrySleep", 1*time.Second),
			GRPCAddress:                getString("blockvalidation_grpcAddress", "localhost:8088"),
			GRPCListenAddress:          getString("blockvalidation_grpcListenAddress", ":8088"),
			HTTPAddress:                getString("blockvalidation_httpAddress", "http://localhost:8188"),
			HTTPListenAddress:          getString("blockvalidation_httpListenAddress", ":8188"),
			KafkaWorkers:               getInt("blockvalidation_kafkaWorkers", 0),
			LocalSetTxMinedConcurrency: getInt("blockvalidation_localSetTxMinedConcurrency", 8),
			//nolint:gosec
			MaxPreviousBlockHeadersToCheck: uint64(getInt("blockvalidation_maxPreviousBlockHeadersToCheck", 100)),

			MissingTransactionsBatchSize:              getInt("blockvalidation_missingTransactionsBatchSize", 5000),
			ProcessTxMetaUsingCacheBatchSize:          getInt("blockvalidation_processTxMetaUsingCache_BatchSize", 1024),
			ProcessTxMetaUsingCacheConcurrency:        getInt("blockvalidation_processTxMetaUsingCache_Concurrency", 32),
			ProcessTxMetaUsingCacheMissingTxThreshold: getInt("blockvalidation_processTxMetaUsingCache_MissingTxThreshold", 1),
			ProcessTxMetaUsingStoreBatchSize:          getInt("blockvalidation_processTxMetaUsingStore_BatchSize", util.Max(4, runtime.NumCPU()/2)),
			ProcessTxMetaUsingStoreConcurrency:        getInt("blockvalidation_processTxMetaUsingStore_Concurrency", 32),
			ProcessTxMetaUsingStoreMissingTxThreshold: getInt("blockvalidation_processTxMetaUsingStore_MissingTxThreshold", 1),
			SkipCheckParentMined:                      getBool("blockvalidation_skipCheckParentMined", false),
			SubtreeFoundChConcurrency:                 getInt("blockvalidation_subtreeFoundChConcurrency", 1),
			SubtreeTTL:                                blockValidationSubtreeTTL,
			SubtreeTTLConcurrency:                     getInt("blockvalidation_subtreeTTLConcurrency", 32),
			SubtreeValidationAbandonThreshold:         getInt("blockvalidation_subtree_validation_abandon_threshold", 1),
			ValidateBlockSubtreesConcurrency:          getInt("blockvalidation_validateBlockSubtreesConcurrency", util.Max(4, runtime.NumCPU()/2)),
			ValidationMaxRetries:                      getInt("blockvalidation_validation_max_retries", 3),
			ValidationRetrySleep:                      getDuration("blockvalidation_validation_retry_sleep", 5*time.Second),
			OptimisticMining:                          getBool("blockvalidation_optimistic_mining", true),
			IsParentMinedRetryMaxRetry:                getInt("blockvalidation_isParentMined_retry_max_retry", 20),
			IsParentMinedRetryBackoffMultiplier:       getInt("blockvalidation_isParentMined_retry_backoff_multiplier", 30),
			SubtreeGroupConcurrency:                   getInt("blockvalidation_subtreeGroupConcurrency", 1),
			BlockFoundChBufferSize:                    getInt("blockvalidation_blockFoundCh_buffer_size", 1000),
			CatchupChBufferSize:                       getInt("blockvalidation_catchupCh_buffer_size", 10),
			UseCatchupWhenBehind:                      getBool("blockvalidation_useCatchupWhenBehind", false),
			CatchupConcurrency:                        getInt("blockvalidation_catchupConcurrency", util.Max(4, runtime.NumCPU()/2)),
			ValidationWarmupCount:                     getInt("blockvalidation_validation_warmup_count", 128),
			BatchMissingTransactions:                  getBool("blockvalidation_batch_missing_transactions", false),
		},
		Validator: ValidatorSettings{
			GRPCAddress:               getString("validator_grpcAddress", "localhost:8081"),
			GRPCListenAddress:         getString("validator_grpcListenAddress", ":8081"),
			KafkaWorkers:              getInt("validator_kafkaWorkers", 0),
			ScriptVerificationLibrary: getString("validator_scriptVerificationLibrary", "libscript.so"),
			SendBatchSize:             getInt("validator_sendBatchSize", 100),
			SendBatchTimeout:          getInt("validator_sendBatchTimeout", 2),
			SendBatchWorkers:          getInt("validator_sendBatchWorkers", 10),
			BlockValidationDelay:      getInt("validator_blockvalidation_delay", 0),
			BlockValidationMaxRetries: getInt("validator_blockvalidation_maxRetries", 5),
			BlockValidationRetrySleep: getString("validator_blockvalidation_retrySleep", "2s"),
			VerboseDebug:              getBool("validator_verbose_debug", false),
		},
		Redis: RedisSettings{
			Hosts: getString("REDIS_HOSTS", "localhost:6379"),
			Port:  getInt("REDIS_PORT", 6379),
		},
		Region: RegionSettings{
			Name: getString("regionName", "defaultRegionName"),
		},
		Advertising: AdvertisingSettings{
			Interval: getString("advertisingInterval", "10s"),
			URL:      getString("advertisingURL", "defaultAdvertisingURL"),
		},
		UtxoStore: UtxoStoreSettings{
			UtxoStore:                  getURL("utxostore", ""),
			OutpointBatcherSize:        getInt("utxostore_outpointBatcherSize", 100),
			SpendBatcherConcurrency:    getInt("utxostore_spendBatcherConcurrency", 32),
			SpendBatcherDurationMillis: getInt("utxostore_spendBatcherDurationMillis", 100),
			SpendBatcherSize:           getInt("utxostore_spendBatcherSize", 100),
			StoreBatcherConcurrency:    getInt("utxostore_storeBatcherConcurrency", 32),
			StoreBatcherDurationMillis: getInt("utxostore_storeBatcherDurationMillis", 100),
			StoreBatcherSize:           getInt("utxostore_storeBatcherSize", 100),
			UtxoBatchSize:              getInt("utxostore_utxoBatchSize", 0),
			GetBatcherSize:             getInt("utxostore_getBatcherSize", 1),
			DBTimeout:                  getDuration("utxostore_dbTimeoutDuration", 5*time.Second),
			UseExternalTxCache:         getBool("utxostore_useExternalTxCache", true),
			ExternalizeAllTransactions: getBool("utxostore_externalizeAllTransactions", false),
		},
		P2P: P2PSettings{
			BestBlockTopic:     getString("p2p_bestblock_topic", ""),
			BlockTopic:         getString("p2p_block_topic", ""),
			BootstrapAddresses: getMultiString("p2p_bootstrapAddresses", "|", []string{}),
			GRPCAddress:        getString("p2p_grpcAddress", ""),
			// GRPCListenAddress:  getString("p2p_grpcListenAddress", ":9906"),
			HTTPAddress:       getString("p2p_httpAddress", "localhost:9906"),
			HTTPListenAddress: getString("p2p_httpListenAddress", ""),
			IP:                getString("p2p_ip", ""),
			MiningOnTopic:     getString("p2p_mining_on_topic", ""),
			PeerID:            getString("p2p_peer_id", ""),
			Port:              getInt("p2p_port", 9906),
			PortCoinbase:      getInt("p2p_portCoinbase", 9906),
			PrivateKey:        getString("p2p_private_key", ""),
			RejectedTxTopic:   getString("p2p_rejected_tx_topic", ""),
			SharedKey:         getString("p2p_shared_key", ""),
			StaticPeers:       getMultiString("p2p_static_peers", "|", []string{}),
			SubtreeTopic:      getString("p2p_subtree_topic", ""),
			TopicPrefix:       getString("p2p_topic_prefix", ""),
			DHTProtocolID:     getString("p2p_dht_protocol_id", ""),
			DHTUsePrivate:     getBool("p2p_dht_use_private", false),
			OptimiseRetries:   getBool("p2p_optimise_retries", false),
		},
		Coinbase: CoinbaseSettings{
			DB:                          getString("coinbaseDB", ""),
			UserPwd:                     getString("coinbaseDBUserPwd", ""),
			ArbitraryText:               getString("coinbase_arbitrary_text", ""),
			GRPCAddress:                 getString("coinbase_grpcAddress", ""),
			GRPCListenAddress:           getString("coinbase_grpcListenAddress", ""),
			NotificationThreshold:       getInt("coinbase_notification_threshold", 0),
			P2PPeerID:                   getString("coinbase_p2p_peer_id", ""),
			P2PPrivateKey:               getString("coinbase_p2p_private_key", ""),
			P2PStaticPeers:              getMultiString("coinbase_p2p_static_peers", "|", []string{}),
			ShouldWait:                  getBool("coinbase_should_wait", false),
			Store:                       getURL("coinbase_store", ""),
			StoreDBTimeoutMillis:        getInt("coinbase_store_dbTimeoutMillis", 0),
			WaitForPeers:                getBool("coinbase_wait_for_peers", false),
			WalletPrivateKey:            getString("coinbase_wallet_private_key", ""),
			DistributorBackoffDuration:  getDuration("distributor_backoff_duration", 1*time.Second),
			DistributorMaxRetries:       getInt("distributor_max_retries", 3),
			DistributorFailureTolerance: getInt("distributor_failure_tolerance", 0),
			PeerStatusTimeout:           getDuration("peerStatus_timeout", 30*time.Second),
			SlackChannel:                getString("slack_channel", ""),
			SlackToken:                  getString("slack_token", ""),
		},
		SubtreeValidation: SubtreeValidationSettings{
			QuorumAbsoluteTimeout:                     getDuration("subtree_quorum_absolute_timeout", 30*time.Second),
			QuorumPath:                                getString("subtree_quorum_path", ""),
			SubtreeStore:                              getURL("subtreestore", ""),
			FailFastValidation:                        getBool("subtreevalidation_failfast_validation", true),
			GetMissingTransactions:                    getInt("subtreevalidation_getMissingTransactions", util.Max(4, runtime.NumCPU()/2)),
			GRPCAddress:                               getString("subtreevalidation_grpcAddress", "localhost:8089"),
			GRPCListenAddress:                         getString("subtreevalidation_grpcListenAddress", ":8089"),
			ProcessTxMetaUsingCacheBatchSize:          getInt("subtreevalidation_processTxMetaUsingCache_BatchSize", 1024),
			ProcessTxMetaUsingCacheConcurrency:        getInt("subtreevalidation_processTxMetaUsingCache_Concurrency", 32),
			ProcessTxMetaUsingCacheMissingTxThreshold: getInt("subtreevalidation_processTxMetaUsingCache_MissingTxThreshold", 1),
			ProcessTxMetaUsingStoreBatchSize:          getInt("subtreevalidation_processTxMetaUsingStore_BatchSize", 1024),
			ProcessTxMetaUsingStoreConcurrency:        getInt("subtreevalidation_processTxMetaUsingStore_Concurrency", 32),
			ProcessTxMetaUsingStoreMissingTxThreshold: getInt("subtreevalidation_processTxMetaUsingStore_MissingTxThreshold", 1),
			SubtreeFoundChConcurrency:                 getInt("subtreevalidation_subtreeFoundChConcurrency", 1),
			SubtreeTTL:                                getDuration("subtreevalidation_subtreeTTLDuration", 120*time.Minute),
			SubtreeTTLConcurrency:                     getInt("subtreevalidation_subtreeTTLConcurrency", 8),
			SubtreeValidationTimeout:                  getInt("subtreevalidation_subtreeValidationTimeout", 1000),
			SubtreeValidationAbandonThreshold:         getInt("subtreevalidation_subtree_validation_abandon_threshold", 1),
			TxMetaCacheEnabled:                        getBool("subtreevalidation_txMetaCacheEnabled", true),
			ValidationMaxRetries:                      getInt("subtreevalidation_validation_max_retries", 30),
			ValidationRetrySleep:                      getString("subtreevalidation_validation_retry_sleep", "5s"),
			TxChanBufferSize:                          getInt("subtreevalidation_txChanBufferSize", 0),
			BatchMissingTransactions:                  getBool("subtreevalidation_batch_missing_transactions", true),
			SpendBatcherSize:                          getInt("subtreevalidation_spendBatcherSize", 1024),
			MissingTransactionsBatchSize:              getInt("subtreevalidation_missingTransactionsBatchSize", 100_000),
		},
		Legacy: LegacySettings{
			ListenAddresses:            getMultiString("legacy_listen_addresses", "|", []string{}),
			ConnectPeers:               getMultiString("legacy_connect_peers", "|", []string{}),
			OrphanEvictionDuration:     getDuration("legacy_orphanEvictionDuration", 10*time.Minute),
			StoreBatcherSize:           getInt("legacy_storeBatcherSize", 1024),
			StoreBatcherConcurrency:    getInt("legacy_storeBatcherConcurrency", 32),
			SpendBatcherSize:           getInt("legacy_spendBatcherSize", 1024),
			SpendBatcherConcurrency:    getInt("legacy_spendBatcherConcurrency", 32),
			OutpointBatcherSize:        getInt("legacy_outpointBatcherSize", 1024),
			OutpointBatcherConcurrency: getInt("legacy_outpointBatcherConcurrency", 32),
			PrintInvMessages:           getBool("legacy_printInvMessages", false),
			GRPCAddress:                getString("legacy_grpcAddress", ""),
		},
		Propagation: PropagationSettings{
			IPv6Addresses:        getString("ipv6_addresses", ""),
			IPv6Interface:        getString("ipv6_interface", ""),
			QuicListenAddress:    getString("propagation_quicListenAddress", ""),
			GRPCMaxConnectionAge: getDuration("propagation_grpcMaxConnectionAge", 90*time.Second),
			HTTPListenAddress:    getString("propagation_httpListenAddress", ""),
			SendBatchSize:        getInt("propagation_sendBatchSize", 100),
			SendBatchTimeout:     getInt("propagation_sendBatchTimeout", 5),
			GRPCResolver:         getString("grpc_resolver", ""),
			GRPCAddresses:        getMultiString("propagation_grpcAddresses", "|", []string{}),
		},
		RPC: RPCSettings{
			RPCUser:        getString("rpc_user", ""),
			RPCPass:        getString("rpc_pass", ""),
			RPCLimitUser:   getString("rpc_limit_user", ""),
			RPCLimitPass:   getString("rpc_limit_pass", ""),
			RPCMaxClients:  getInt("rpc_max_clients", 1),
			RPCQuirks:      getBool("rpc_quirks", true),
			RPCListenerURL: getString("rpc_listener_url", ""),
		},
		Faucet: FaucetSettings{
			HTTPListenAddress: getString("faucet_httpListenAddress", ""),
		},
	}
}
