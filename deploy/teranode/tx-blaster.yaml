# create service account
apiVersion: v1
kind: ServiceAccount
metadata:
  name: tx-blaster
  namespace: tx-blasters
---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: tx-blaster
subjects:
  - kind: ServiceAccount
    name: tx-blaster
    namespace: tx-blasters
roleRef:
  kind: ClusterRole
  name: view
  apiGroup: rbac.authorization.k8s.io
---
apiVersion: v1
data:
  SETTINGS_CONTEXT: "operator.teratestnet.tx-blaster"
kind: ConfigMap
metadata:
  name: tx-blaster-config
  namespace: tx-blasters
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: tx-blaster
  namespace: tx-blasters
  labels:
    app: tx-blaster
    project: service
spec:
  replicas: 0
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  selector:
    matchLabels:
      app: tx-blaster
  template:
    metadata:
      labels:
        app: tx-blaster
    spec:
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            - labelSelector:
                matchLabels:
                  app: tx-blaster
              topologyKey: "kubernetes.io/hostname"
      serviceAccountName: tx-blaster
      containers:
        - name: tx-blaster
          image: 434394763103.dkr.ecr.eu-north-1.amazonaws.com/ubsv:f41429d7879002eef353a3e496437f6336d99c5d
          command:
            - "./dlv"
            - "--listen=:4040"
            - "--continue"
            - "--accept-multiclient"
            - "--headless=true"
            - "--api-version=2"
            - "exec"
            - "./teranode.run"
            - "--"
          args:
            - "-legacy=1"
          envFrom:
            - configMapRef:
                name: tx-blaster-config
          env:
            - name: SERVICE_NAME
              value: tx-blaster-service
          ports:
            - containerPort: 9091
              protocol: TCP
            - containerPort: 4040
              protocol: TCP
          resources:
            limits:
              memory: 2Gi
            requests:
              cpu: "2"
              memory: 2Gi
#          readinessProbe:
#            httpGet:
#              path: /health
#              port: 9092
#            initialDelaySeconds: 1
#            periodSeconds: 10
#            failureThreshold: 5
#            timeoutSeconds: 3
#          livenessProbe:
#            httpGet:
#              path: /health
#              port: 9092
#            initialDelaySeconds: 1
#            periodSeconds: 10
#            failureThreshold: 5
#            timeoutSeconds: 3