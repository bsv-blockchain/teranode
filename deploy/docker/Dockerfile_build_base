# docker file used to build the docker image.
# The build process is now integrated into CICD
# To use: enable the 'build base container image' Workflow (usually disabled), then push a commit to master/staging branch.
# you can authenticate to ecr using this:
# $ aws ecr get-login-password --region eu-north-1 | docker login --username AWS --password-stdin 434394763103.dkr.ecr.eu-north-1.amazonaws.com

FROM golang:1.21.0-bullseye

ARG TARGETOS
ARG TARGETARCH

ARG GITHUB_SHA

# 18 is the latest LTS version of NodeJS
ENV NODE_MAJOR=18

# Add nodesource to apt sources
RUN echo "deb [signed-by=/etc/apt/keyrings/nodesource.gpg] https://deb.nodesource.com/node_$NODE_MAJOR.x nodistro main" | tee /etc/apt/sources.list.d/nodesource.list &&\
    mkdir -p /etc/apt/keyrings && \
    curl -fsSL https://deb.nodesource.com/gpgkey/nodesource-repo.gpg.key | gpg --dearmor -o /etc/apt/keyrings/nodesource.gpg

# Install packages
RUN apt-get update && \
    apt-get install -y ca-certificates gnupg nodejs build-essential libsecp256k1-dev gcc-aarch64-linux-gnu && \
    apt-get clean && \
    rm -rf /var/lib/apt/lists/*

# Add Debian ARM64 architecture
RUN dpkg --add-architecture arm64

# Add cross-compilation packages
RUN apt-get update && \
    apt-get install -y libsecp256k1-dev:arm64 libc6-dev-arm64-cross

# Download all node dependencies for the dashboard, so Docker can cache them if the package.json and package-lock.json files are not changed
WORKDIR /app/ui/dashboard

COPY ../../package.json package-lock.json ./
RUN npm install && npx node-prune

# Download all the go dependecies so Docker can cache them if the go.mod and go.sum files are not changed
WORKDIR /app
COPY ../../go.mod go.sum ./
RUN go mod download

# Install Delve debugger
RUN go install github.com/go-delve/delve/cmd/dlv@latest

# This causes issues with cross-compilation requiring the extra gcc package for alternative architectures
ENV CGO_ENABLED=1
