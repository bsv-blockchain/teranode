# docker file used to build the docker image. This was manually pushed to the ecr repo for now and used
# in case you want to make an update to the base image, change this file, build and push.
# you can authenticate to ecr using this:
# $ aws ecr get-login-password --region eu-north-1 | docker login --username AWS --password-stdin 434394763103.dkr.ecr.eu-north-1.amazonaws.com
# Set the base image
FROM --platform=linux/amd64 golang:1.21.0-bullseye
ARG GITHUB_SHA

# 18 is the latest LTS version of NodeJS
ENV NODE_MAJOR=18
RUN echo "deb [signed-by=/etc/apt/keyrings/nodesource.gpg] https://deb.nodesource.com/node_$NODE_MAJOR.x nodistro main" | tee /etc/apt/sources.list.d/nodesource.list
# Add nodesource to apt sources
RUN mkdir -p /etc/apt/keyrings
RUN curl -fsSL https://deb.nodesource.com/gpgkey/nodesource-repo.gpg.key | gpg --dearmor -o /etc/apt/keyrings/nodesource.gpg

RUN apt update && \
    apt install -y ca-certificates curl gnupg wget nodejs build-essential libsecp256k1-dev && \
    apt-get clean && \
    rm -rf /var/lib/apt/lists/*

# Download all node dependencies for the dashboard, so Docker can cache them if the package.json and package-lock.json files are not changed
WORKDIR /app/ui/dashboard

COPY ../../package.json package-lock.json ./
RUN npm install && npx node-prune

# Download all the go dependecies so Docker can cache them if the go.mod and go.sum files are not changed
WORKDIR /app
COPY ../../go.mod go.sum ./
RUN go mod download

# Install Delve debugger
RUN go install github.com/go-delve/delve/cmd/dlv@latest

ENV CGO_ENABLED=1
