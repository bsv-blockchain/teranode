# Define a common base configuration for ubsv nodes
x-ubsv-base: &ubsv-base
  image: ubsv:latest
  depends_on:
    - postgres
    - kafka-shared
  networks:
    - ubsv-network
  volumes:
    - ./data:/app/data
  expose:
    - 8081-8093
networks:
  ubsv-network:
    name: my-ubsv-network
services:
  ubsv-builder:
    image: ubsv:latest
    build:
      context: .
      dockerfile: local.Dockerfile
      args:
        BASE_IMG: 434394763103.dkr.ecr.eu-north-1.amazonaws.com/ubsv:base-build-3fed05f
        RUN_IMG: 434394763103.dkr.ecr.eu-north-1.amazonaws.com/ubsv:base-run-3fed05f
    networks:
      - ubsv-network
    entrypoint: ["pwd"]

  jaeger:
    image: jaegertracing/all-in-one:1.59
    container_name: jaeger
    ports:
      - "6831:6831/udp"
      - "6832:6832/udp"
      - "5778:5778"
      - "16686:16686"
      - "4317:4317"
      - "4318:4318"
      - "14250:14250"
      - "14268:14268"
      - "14269:14269"
      - "9411:9411"
    environment:
      - COLLECTOR_ZIPKIN_HOST_PORT=:9411
    networks:
      - ubsv-network

  postgres:
    container_name: postgres
    image: postgres:latest
    networks:
      - ubsv-network
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: really_strong_password_change_me
      POSTGRES_DB: postgres
    ports:
      - 5432:5432
    expose:
      - 5432
    volumes:
      - ./scripts/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql
      - ./data/postgres:/var/lib/postgresql/data
    restart: on-failure
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5

  kafka-shared:
    container_name: kafka-shared
    image: vectorized/redpanda:latest
    mem_limit: 256m
    networks:
      - ubsv-network
    command:
      - redpanda start
      - --smp 1
      - --overprovisioned
      - --node-id 0
      - --kafka-addr PLAINTEXT://0.0.0.0:9092
      - --advertise-kafka-addr PLAINTEXT://kafka-shared:9092
      - --pandaproxy-addr 0.0.0.0:9093
      - --advertise-pandaproxy-addr localhost:9093
    ports:
      - 18181:8081
      - 19092:9092
      - 19093:9093

  kafka-console-shared:
    container_name: kafka-console-shared
    image: docker.redpanda.com/redpandadata/console:latest
    networks:
      - ubsv-network
    restart: on-failure
    entrypoint: /bin/sh
    command: -c "echo \"$$CONSOLE_CONFIG_FILE\" > /tmp/config.yml; /app/console"
    environment:
      CONFIG_FILEPATH: /tmp/config.yml
      CONSOLE_CONFIG_FILE: |
        kafka:
          brokers: ["kafka-shared:9092"]
          schemaRegistry:
            enabled: true
            urls: ["http://kafka-shared:8081"]
    ports:
      - "18080:8080"
    depends_on:
      - kafka-shared

  ubsv-1:
    <<: *ubsv-base
    container_name: ubsv-1
    depends_on:
      - kafka-shared
      - postgres
      - jaeger
    entrypoint:
      [
        "/app/wait.sh",
        "postgres",
        "5432",
        "0",
        "--",
        "/app/wait.sh",
        "kafka-shared",
        "9092",
        "0",
        "--",
        "/app/ubsv.run",
      ]
    environment:
      SETTINGS_CONTEXT: ${SETTINGS_CONTEXT_1:-docker.ci.ubsv1}
      logLevel: "DEBUG"
      blockchain_store: postgres://miner1:miner1@postgres:5432/ubsv1
      coinbase_store: postgres://coinbase1:coinbase1@postgres:5432/coinbase1
      JAEGER_SERVICE_NAME: ubsv-1
      JAEGER_AGENT_HOST: jaeger
      JAEGER_AGENT_PORT: 6831
    volumes:
      - ./settings_local.conf:/app/settings_local.conf
      - ./data/ubsv1/txstore:/app/data/txstore
      - ./data/ubsv1/subtreestore:/app/data/subtreestore
      - ./data/ubsv1/blockstore:/app/data/blockstore
    ports:
      - "18081-18089:8081-8089"
      - "18090-18097:8090-8097"
      - "19091:9091"
      - "19905:9905"
      - "19292:9292"

  ubsv-2:
    <<: *ubsv-base
    container_name: ubsv-2
    depends_on:
      - kafka-shared
      - postgres
      - jaeger
    entrypoint:
      [
        "/app/wait.sh",
        "postgres",
        "5432",
        "0",
        "--",
        "/app/wait.sh",
        "kafka-shared",
        "9092",
        "0",
        "--",
        "/app/ubsv.run",
      ]
    environment:
      SETTINGS_CONTEXT: ${SETTINGS_CONTEXT_2:-docker.ci.ubsv2}
      logLevel: "DEBUG"
      blockchain_store: postgres://miner2:miner2@postgres:5432/ubsv2
      coinbase_store: postgres://coinbase2:coinbase2@postgres:5432/coinbase2
      JAEGER_SERVICE_NAME: ubsv-2
      JAEGER_AGENT_HOST: jaeger
      JAEGER_AGENT_PORT: 6831
    volumes:
      - ./settings_local.conf:/app/settings_local.conf
      - ./data/ubsv2/txstore:/app/data/txstore
      - ./data/ubsv2/subtreestore:/app/data/subtreestore
      - ./data/ubsv2/blockstore:/app/data/blockstore
    ports:
      - "28081-28089:8081-8089"
      - "28090-28093:8090-8093"
      - "29091:9091"
      - "29905:9905"

  ubsv-3:
    <<: *ubsv-base
    container_name: ubsv-3
    depends_on:
      - kafka-shared
      - postgres
      - jaeger
    entrypoint:
      [
        "/app/wait.sh",
        "postgres",
        "5432",
        "0",
        "--",
        "/app/wait.sh",
        "kafka-shared",
        "9092",
        "0",
        "--",
        "/app/ubsv.run",
      ]
    environment:
      SETTINGS_CONTEXT: ${SETTINGS_CONTEXT_3:-docker.ci.ubsv3}
      logLevel: "DEBUG"
      blockchain_store: postgres://miner3:miner3@postgres:5432/ubsv3
      coinbase_store: postgres://coinbase3:coinbase3@postgres:5432/coinbase3
      JAEGER_SERVICE_NAME: ubsv-3
      JAEGER_AGENT_HOST: jaeger
      JAEGER_AGENT_PORT: 6831
    volumes:
      - ./settings_local.conf:/app/settings_local.conf
      - ./data/ubsv3/txstore:/app/data/txstore
      - ./data/ubsv3/subtreestore:/app/data/subtreestore
      - ./data/ubsv3/blockstore:/app/data/blockstore
    ports:
      - "38081-38089:8081-8089"
      - "38090-38093:8090-8093"
      - "39091:9091"
      - "39905:9905"

  tx-blaster-1:
    <<: *ubsv-base
    container_name: tx-blaster-1
    depends_on:
      - ubsv-1
      - ubsv-2
      - ubsv-3
    environment:
      SETTINGS_CONTEXT: "docker.ci"
      tx_blaster_profilerAddr: ":9092"
      asset_httpAddress: "http://ubsv-1:8090"
      propagation_grpcAddresses: ubsv-1:8084 | ubsv-2:8084 | ubsv-3:8084
      coinbase_grpcAddress: ubsv-1:8093
      coinbase_store: postgres://coinbase1:coinbase1@postgres:5432/coinbase1
      blockchain_store: postgres://miner1:miner1@postgres:5432/ubsv1
      coinbase_assetGrpcAddress: ubsv-1:8091
      BLASTER_ARGS: "-workers=2"
      p2p_bootstrapAddresses: "/dns4/p2p-bootstrap-1/tcp/9901/p2p/12D3KooWJ6kQHAR65xkA34NABsNVAJyVxPWh8JUSo1vtZsTyw4GD"
      propagation_quicAddresses: https://ubsv-1:8384 | https://ubsv-2:8384 | https://ubsv-3:8384
    command:
      [
        "/app/blaster.run",
        "-workers=1",
        "-print=0",
        "-profile=:9092",
        "-log=0",
        "-limit=10",
        "--quic=false",
      ]
    networks:
      - ubsv-network
    volumes:
      - ./settings_local.conf:/app/settings_local.conf
      - ./data/txblaster1:/app/data

  prometheus-1:
    container_name: prometheus-1
    image: prom/prometheus:v2.44.0
    mem_limit: 64m
    ports:
      - "19090:9090"
    networks:
      - ubsv-network
    volumes:
      - ./deploy/dev/prometheus/prometheus-1.yml:/etc/prometheus/prometheus.yml

  prometheus-2:
    container_name: prometheus-2
    image: prom/prometheus:v2.44.0
    mem_limit: 64m
    ports:
      - "29090:9090"
    networks:
      - ubsv-network
    volumes:
      - ./deploy/dev/prometheus/prometheus-2.yml:/etc/prometheus/prometheus.yml

  prometheus-3:
    container_name: prometheus-3
    image: prom/prometheus:v2.44.0
    mem_limit: 64m
    ports:
      - "39090:9090"
    networks:
      - ubsv-network
    volumes:
      - ./deploy/dev/prometheus/prometheus-3.yml:/etc/prometheus/prometheus.yml

  grafana:
    container_name: grafana
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    networks:
      - ubsv-network
    volumes:
      - ./deploy/dev/grafana/datasources/main.yaml:/etc/grafana/provisioning/datasources/main.yaml
      - ./deploy/dev/grafana/dashboards/main.yaml:/etc/grafana/provisioning/dashboards/main.yaml
      - ./deploy/dev/grafana/dashboards:/var/lib/grafana/dashboards
      - ./deploy/dev/grafana/grafana.db:/var/lib/grafana
    depends_on:
      - prometheus-1
      - prometheus-2
      - prometheus-3

  grpc-client:
    build:
      context: .
      dockerfile: Dockerfile.grpc-client
    depends_on:
      - ubsv-1
      - ubsv-2
      - ubsv-3
    networks:
      - ubsv-network