logLevel.dev=DEBUG
logLevel=INFO
gocore_stats_reported_time_threshold=24h
gocore_stats_addr=:9092
gocore_stats_addr.dev=localhost:9092

profilerAddr=:9091
profilerAddr.dev=localhost:9091

prometheusEndpoint=/metrics
tracing_enabled=false
use_open_tracing=false
#tracing_collector_url=jaeger://:6831
tracing_collector_url=jaeger://jaeger-cluster-agent.jaeger.svc.cluster.local:6831

advertisingURL=
advertisingInterval.live=10s

logger_show_timestamps=false
logger_show_timestamps.dev=true
logger_show_timestamps.kubernetes=true

grpc_resolver=k8s
grpc_resolver.dev=dns

# ---------  TX BLASTER CONFIG  ---------
# Uncomment 2 lines below for running txblaster against multiple targets
# txblaster_propagation_grpcTargets=:18084|:28084|:38084
# txblaster_seeder_grpcTargets=:18083|:28803|:38083
# Note: when launching txblaster locally against docker ubsv containers
#       make sure grpc services bind to all addresses eg.g instead of
#       localhost:8084 it should be :8084 so that txblaster can reach
#       these services
# How to test:
# Step 1: build Docker image: docker build -t taal/ubsv:latest -f Dockerfile
# Step 2: run docker compose docker-compose up -d -f docker-3ubsv.yml
# Step 3: uncomment txblaster_xxx lines in TX BLASTER CONFIG
# Step 4: run cmd/txblaster$ go run . -workers=30 -print=1000 -profile=:9093
# ---------------------------------------

# --------- PROPAGATION SERVICE ---------
startPropagation.dev=true

propagation_grpcAddress=:8084
propagation_grpcAddress.dev=localhost:8084
txstore=badger:///data/txstore
#txstore=gcs:///ubsv-utxo-store
#txstore=minio://minio99:minio123@localhost:9000/txstore
subtreestore=badger:///data/subtreestore
#subtreestore=gcs:///subtreestore
#subtreestore=minio://minio99:minio123@localhost:9000/subtreestore

# --------- VALIDATOR SERVICE ---------
startValidator.dev=true

validator_grpcAddress=:8081
validator_grpcAddress.dev=localhost:8081

# set up the kafka brokers to use for the validator - the path is the topic to use
# validator_kafkaBrokers.dev=kafka://localhost:9092/txs?partitions=1&replication=1
# comma separated list of hosts is allowed
# validator_kafkaBrokers.prod=kafka://some.url:9092,some.other.url:9092/txs?partitions=1&replication=1
validator_kafkaWorkers=100

# --------- BLOCK ASSEMBLY SERVICE ---------
blockassembly_grpcAddress=:8085
blockassembly_grpcAddress.dev=localhost:8085
startBlockAssembly.dev=true

# 2^15 = 32768 - less in DEV mode to speed up testing
initial_merkle_items_per_subtree.dev=32768
# 2^20 = 1048576
initial_merkle_items_per_subtree=1048576

# set up the kafka brokers to use for the block assembly - the path is the topic to use
# blockassembly_kafkaBrokers.dev=kafka://localhost:9092/assembly?partitions=1&replication=1
# comma separated list of hosts is allowed
# blockassembly_kafkaBrokers.prod=kafka://some.url:9092,some.other.url:9092/assembly?partitions=1&replication=1
blockassembly_kafkaWorkers=100

# --------- BLOCK VALIDATION SERVICE ---------
blockvalidation_grpcAddress=:8088
blockvalidation_grpcAddress.dev=localhost:8088
startBlockValidation.dev=true

blockvalidation_peers=localhost:8081
# blockvalidation_peers=localhost:8081,localhost:8085

# --------- TX META DATA STORE SERVICE ---------
txmeta_grpcAddress=:8086
txmeta_grpcAddress.dev=localhost:8086
txmeta_store=memory://localhost:8086
#txmeta_store=aerospike://localhost:3800/test
startTxMetaStore.dev=true

# --------- UTXOSTORE SERVICE ---------
startUtxoStore.dev=true

utxostore=memory://localhost:8082/splitbyhash
utxostore.dev=memory://localhost:8082/splitbyhash

#utxostore = foundationdb://localhost:8083
#utxostore = aerospike://localhost:3800/test

# --------- BLOCKCHAIN SERVICE ---------
blockchain_grpcAddress=:8087
blockchain_grpcAddress.dev=localhost:8087
#blockchain_store=sqlite_memory:///blockchain
blockchain_store=sqlite:///blockchain
#blockchain_store=postgres://bitcoin:blockchain@localhost:5432/blockchain?sslmode=disable

# to force the shutdown of the grpc server without waiting for the client connections to terminate.
blockchain_grpcForceShutdown=true

startBlockchain.dev=true

# --------- SEEDER SERVICE ---------
startSeeder.dev=true

seeder_grpcAddress=:8083
seeder_grpcAddress.dev=localhost:8083

# --------- BOOTSTAP SERVICE ---------
# startBootstrapServer.dev=true
# bootstrap_grpcAddress=:8089
# bootstrap_grpcAddress.dev=localhost:8089

# --------- MINER SERVICE ---------
startMiner.dev=true

coinbase_number_of_outputs=1000
coinbase_number_of_outputs.dev=10
# node -e "const bsv = require('bsv'); const privateKey = bsv.PrivateKey.fromRandom(); console.log('privateKey: ' + privateKey.toString()); console.log('address: ' + privateKey.toAddress().toString())"
coinbase_wallet_privkey=KzKKMRt8P7kE5MKBRWMREufpeQVVX8QCoeV5rNXHqNaToQ5FPeh6
coinbase_wallet_address=1L7WqJNim1vBr4Eesi5MhMXKXiYUABYdtg
coinbase_arbitrary_text=/teranode/


blobserver_httpAddress=:8090
blobserver_httpAddress.dev=localhost:8090

blobserver_baseURL.dev=http://localhost:8090

# This is the address that the blobserver GRPC will listen on...
blobserver_grpcAddress=:8091
blobserver_grpcAddress.dev=localhost:8091

# This is the address that others can access the blobserver GRPC API...
blobserver_remoteAddress.dev=localhost:8091

# This is a pipe separated list of all blobServers...
blobserver_remoteAddresses.dev=127.0.0.1:8091
blobserver_remoteAddresses.kubernetes=miner1.miner1.svc.cluster.local:8091 | miner2.miner2.svc.cluster.local:8091 | miner3.miner3.svc.cluster.local:8091

startBlobServer.dev=true


# --------- COINBASE TRACKER SERVICE ---------
coinbasetracker_grpcAddress=:8092
startCoinbaseTracker.dev=true

# use the CGO signer
use_cgo_signer=true
use_cgo_signer.kubernetes=true

# use the CGO signature verifier
use_cgo_verifier=true
use_cgo_verifier.kubernetes=true

# IPV6
#ipv6_addresses=ff02::1234
