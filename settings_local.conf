# Logging Configuration
# ----------------------------------------
logger=zerolog

logLevel=INFO
logLevel.dev=DEBUG
logLevel.docker=DEBUG
logLevel.allinone=INFO

logger_output_format=| %-25s| %-7s| %s |

logger_show_timestamps=true

SERVICE_NAME.allinone.miner.LO=miner1-local
SERVICE_NAME.allinone.miner.EU=miner1-ireland
SERVICE_NAME.allinone.miner.US=miner4-virginia
SERVICE_NAME.allinone.miner.AP=miner7-tokyo

http_timeout=1000

# Ports Configuration
# ----------------------------------------
ASSET_GRPC_PORT=8091
ASSET_HTTP_PORT=8090
BLOCK_ASSEMBLY_FRPC_PORT=8285
BLOCK_ASSEMBLY_GRPC_PORT=8085
BLOCK_VALIDATION_FRPC_PORT=8288
BLOCK_VALIDATION_GRPC_PORT=8088
BLOCK_VALIDATION_HTTP_PORT=8188
BLOCKCHAIN_GRPC_PORT=8087
BOOTSTRAP_GRPC_PORT=8089
BOOTSTRAP_HTTP_PORT=8099
COINBASE_GRPC_PORT=8093
FAUCET_HTTP_PORT=8097
JAEGER_PORT=6831=6379
MINER_HTTP_PORT=8092
P2P_BOOTSTRAP_PORT=9901
P2P_HTTP_PORT=9906
P2P_PORT=9905
P2P_PORT_COINBASE=9907
PROFILE_PORT=9091
PROFILE_PORT_TXBLASTER=9092
PROPAGATION_GRPC_PORT=8084
PROPAGATION_HTTP_PORT=8833
PROPAGATION_QUIC_PORT=8384
REDIS_PORT=6379
VALIDATOR_GRPC_PORT=8081

# Core Stats Configuration
# ----------------------------------------
gocore_stats_reported_time_threshold=24h
stats_prefix=gocore

# Profiler Configuration
# ----------------------------------------
profilerAddr=:${PROFILE_PORT}
profilerAddr.dev=localhost:${PROFILE_PORT}


# Security Configuration
# ----------------------------------------
securityLevelHTTP=0
securityLevelGRPC=0

server_certFile=certs/ubsv.crt
server_keyFile=certs/ubsv.key

# Aerospike read/write policy defaults
# ----------------------------------------
aerospike_useDefaultBasePolicies=false
aerospike_useDefaultPolicies=false
aerospike_warmUp=true

# The following 3 policies are used for all read/write operations when the aerospike_useDefaultPolicies is false
aerospike_batchPolicy=aerospike:///?MaxRetries=5&SleepBetweenRetries=50ms&SleepMultiplier=1&TotalTimeout=3s&SocketTimeout=1s&ConcurrentNodes=0
aerospike_readPolicy=aerospike:///?MaxRetries=5&SleepBetweenRetries=50ms&SleepMultiplier=1&TotalTimeout=3s&SocketTimeout=1s
aerospike_writePolicy=aerospike:///?MaxRetries=5&SleepBetweenRetries=50ms&SleepMultiplier=1&TotalTimeout=3s&SocketTimeout=1s


# Prometheus and Tracing Configuration
# ----------------------------------------
prometheusEndpoint=/metrics

use_open_tracing=false
use_open_tracing.allinone=true

tracing_SampleRate=0.01
tracing_SampleRate.allinone=1

# careful! this variable only works for the OTEL tracer. If you're using open tracing you need to set JAEGER_AGENT_HOST
tracing_collector_url=jaeger://jaeger-cluster-agent.jaeger.svc.cluster.local:${JAEGER_PORT}
tracing_collector_url.dev=jaeger://:${JAEGER_PORT}
tracing_collector_url.allinone.miner.EU=jaeger://jaeger-eu-west-1-agent.jaeger.svc.cluster.local:${JAEGER_PORT}
tracing_collector_url.allinone.miner.US=jaeger://jaeger-us-east-1-agent.jaeger.svc.cluster.local:${JAEGER_PORT}
tracing_collector_url.allinone.miner.AP=jaeger://jaeger-ap-northeast-1-agent.jaeger.svc.cluster.local:${JAEGER_PORT}


# Sentry Configuration
# ----------------------------------------
sentry_dsn=
sentry_dsn.docker=https://dcad1ec4c60a4a2e80a7f8599e86ec4b@o4505013263466496.ingest.sentry.io/4505013264449536
sentry_dsn.scaling=https://dcad1ec4c60a4a2e80a7f8599e86ec4b@o4505013263466496.ingest.sentry.io/4505013264449536

sentry_traces_sample_rate=1.0


# Advertising Configuration
# ----------------------------------------
advertisingURL=
advertisingInterval=10s


# Grpc Resolver Configuration
# ----------------------------------------
grpc_resolver=dns
grpc_resolver.scaling=k8s

k8s_resolver_ttl=10
k8s_resolver_ttl.dev=0

postgres_check_address.allinone.miner.LO.1=postgres-lo-1.miner-lo-1.svc.cluster.local:5432
postgres_check_address.allinone.miner.EU.1=postgres-eu-1.miner-eu-1.svc.cluster.local:5432
postgres_check_address.allinone.miner.US.1=postgres-us-1.miner-us-1.svc.cluster.local:5432
postgres_check_address.allinone.miner.AP.1=postgres-ap-1.miner-ap-1.svc.cluster.local:5432

# Propagation Service Configuration
# ----------------------------------------
startPropagation=true
startPropagation.scaling=false

propagation_grpcListenAddress=:${PROPAGATION_GRPC_PORT}
propagation_grpcListenAddress.dev=localhost:${PROPAGATION_GRPC_PORT}

propagation_quicListenAddress=:${PROPAGATION_QUIC_PORT}
propagation_quicListenAddress.dev=localhost:${PROPAGATION_QUIC_PORT}

# Note the following settings can be a pipe separated list
propagation_quicAddresses=https://localhost:${PROPAGATION_QUIC_PORT}
propagation_quicAddresses.docker=
# propagation_quicAddresses.docker.ci=http://ubsv-1:${PROPAGATION_QUIC_PORT}|http://ubsv-2:${PROPAGATION_QUIC_PORT}|http://ubsv-3:${PROPAGATION_QUIC_PORT}
propagation_quicAddresses.scaling=https://m1.scaling.ubsv.dev:${PROPAGATION_QUIC_PORT}|https://m2.scaling.ubsv.dev:${PROPAGATION_QUIC_PORT}

# Note the following settings can be a pipe separated list
propagation_grpcAddresses=localhost:${PROPAGATION_GRPC_PORT}
propagation_grpcAddresses.docker.ci=ubsv-1:${PROPAGATION_GRPC_PORT}|ubsv-2:${PROPAGATION_GRPC_PORT}|ubsv-3:${PROPAGATION_GRPC_PORT}
propagation_grpcAddresses.docker.ci.externaltxblaster=localhost:1${PROPAGATION_GRPC_PORT}
propagation_grpcAddresses.allinone.miner.EU.1=miner-eu-1.miner-eu-1.svc.cluster.local:${PROPAGATION_GRPC_PORT}
propagation_grpcAddresses.allinone.miner.US.1=miner-us-1.miner-us-1.svc.cluster.local:${PROPAGATION_GRPC_PORT}
propagation_grpcAddresses.allinone.miner.AP.1=miner-ap-1.miner-ap-1.svc.cluster.local:${PROPAGATION_GRPC_PORT}

# 2 nodes
propagation_grpcAddresses.scaling.m1=k8s:///propagation-service1.m1.svc.cluster.local:${PROPAGATION_GRPC_PORT}|dns:///m2.scaling.ubsv.dev:${PROPAGATION_GRPC_PORT}
propagation_grpcAddresses.scaling.m2=k8s:///propagation-service2.m2.svc.cluster.local:${PROPAGATION_GRPC_PORT}|dns:///m1.scaling.ubsv.dev:${PROPAGATION_GRPC_PORT}
propagation_grpcAddresses.scaling.m3=k8s:///propagation-service3.m3.svc.cluster.local:${PROPAGATION_GRPC_PORT}|dns:///m1.scaling.ubsv.dev:${PROPAGATION_GRPC_PORT}

# 3 nodes
# propagation_grpcAddresses.scaling.m1=k8s:///propagation-service1.m1.svc.cluster.local:${PROPAGATION_GRPC_PORT}|dns:///m2.scaling.ubsv.dev:${PROPAGATION_GRPC_PORT}|dns:///m3.scaling.ubsv.dev:${PROPAGATION_GRPC_PORT}
# propagation_grpcAddresses.scaling.m2=k8s:///propagation-service2.m2.svc.cluster.local:${PROPAGATION_GRPC_PORT}|dns:///m1.scaling.ubsv.dev:${PROPAGATION_GRPC_PORT}|dns:///m3.scaling.ubsv.dev:${PROPAGATION_GRPC_PORT}
# propagation_grpcAddresses.scaling.m3=k8s:///propagation-service3.m3.svc.cluster.local:${PROPAGATION_GRPC_PORT}|dns:///m2.scaling.ubsv.dev:${PROPAGATION_GRPC_PORT}|dns:///m3.scaling.ubsv.dev:${PROPAGATION_GRPC_PORT}

propagation_httpListenAddress=:${PROPAGATION_HTTP_PORT}
propagation_httpListenAddress.dev=localhost:${PROPAGATION_HTTP_PORT}

propagation_httpAddresses=http://localhost:${PROPAGATION_HTTP_PORT}
propagation_httpAddresses.docker.ci.ubsv1=http://ubsv-1:${PROPAGATION_HTTP_PORT}
propagation_httpAddresses.docker.ci.ubsv2=http://ubsv-2:${PROPAGATION_HTTP_PORT}
propagation_httpAddresses.docker.ci.ubsv3=http://ubsv-3:${PROPAGATION_HTTP_PORT}
propagation_httpAddresses.scaling.m1=http://propagation-service1.m1.svc.cluster.local:${PROPAGATION_HTTP_PORT}
propagation_httpAddresses.scaling.m2=http://propagation-service2.m2.svc.cluster.local:${PROPAGATION_HTTP_PORT}
propagation_httpAddresses.scaling.m3=http://propagation-service3.m3.svc.cluster.local:${PROPAGATION_HTTP_PORT}


# txstore=null:///
txstore=badger:///data/txstore
# use a batcher by passing batch=true in the query parameters
# txstore=file:///data/txstore?batch=true&writeKeys=true
txstore.docker.ci.chainintegrity.ubsv1=file:///data/ubsv1/txstore
txstore.docker.ci.chainintegrity.ubsv2=file:///data/ubsv2/txstore
txstore.docker.ci.chainintegrity.ubsv3=file:///data/ubsv3/txstore
txstore.allinone=null:///
# txstore.allinone.miner.EU=s3:///eu-ubsv-txstore?region=eu-west-1&batch=true&writeKeys=true
# txstore.allinone.miner.US=s3:///us-ubsv-txstore?region=us-east-1&batch=true&writeKeys=true
# txstore.allinone.miner.AP=s3:///asia-ubsv-txstore?region=ap-northeast-1&batch=true&writeKeys=true
# txstore.scaling.m1=s3://s3.eu-west-1.amazonaws.com/eu-ubsv-txstore?region=eu-west-1&batch=true&writeKeys=true&sizeInBytes=33554432
# txstore.scaling.m2=s3://s3.us-east-1.amazonaws.com/us-ubsv-txstore?region=us-east-1&batch=true&writeKeys=true&sizeInBytes=33554432
# txstore.scaling.m3=s3://s3.ap-northeast-1.amazonaws.com/asia-ubsv-txstore?region=ap-northeast-1&batch=true&writeKeys=true&sizeInBytes=33554432
txstore.scaling=null:///

# subtreestore=null:///data/subtreestore?localTTLStore=file&localTTLStorePath=data/subtreestore-ttl-1|data/subtreestore-ttl-2
# example using local TTL store - can be either "badger" or "file" type
# subtreestore=file:///data/subtreestore?localTTLStore=file&localTTLStorePath=./data/subtreestore-ttl
subtreestore=badger:///data/subtreestore?localTTLStore=file&localTTLStorePath=data/subtreestore-ttl-1|data/subtreestore-ttl-2
subtreestore.dev=badger:///data/subtreestore?localTTLStore=shared&localTTLStorePath=data/subtreestore-ttl-1|data/subtreestore-ttl-2&persist=s3
subtreestore.docker.ci.chainintegrity.ubsv1=file:///data/ubsv1/subtreestore
subtreestore.docker.ci.chainintegrity.ubsv2=file:///data/ubsv2/subtreestore
subtreestore.docker.ci.chainintegrity.ubsv3=file:///data/ubsv3/subtreestore
subtreestore.allinone=null:///?localTTLStore=file&localTTLStorePath=/data/subtreestore-ttl
# subtreestore.allinone.miner.EU=s3:///eu-ubsv-subtree-store?region=eu-west-1&localTTLStore=file&localTTLStorePath=/data/subtreestore-ttl
# subtreestore.allinone.miner.US=s3:///us-ubsv-subtree-store?region=us-east-1&localTTLStore=file&localTTLStorePath=/data/subtreestore-ttl
# subtreestore.allinone.miner.AP=s3:///asia-ubsv-subtree-store?region=ap-northeast-1&localTTLStore=file&localTTLStorePath=/data/subtreestore-ttl

# lustre://s3.com/ubsv?localDir=/data/subtrees&localPersist=s3
subtreestore.scaling.m1=lustre://s3.eu-west-1.amazonaws.com/eu-ubsv-subtree-store?region=eu-west-1&localDir=/data/subtreestore&localPersist=s3
subtreestore.scaling.m2=lustre://s3.us-east-1.amazonaws.com/us-ubsv-subtree-store?region=us-east-1&localDir=/data/subtreestore&localPersist=s3
subtreestore.scaling.m3=lustre://s3.ap-northeast-1.amazonaws.com/asia-ubsv-subtree-store?region=ap-northeast-1&localDir=/data/subtreestore&localPersist=s3

# subtreestore.scaling=null:///?localTTLStore=file&localTTLStorePath=/data/subtreestore-ttl-1|/data/subtreestore-ttl-2|/data/subtreestore-ttl-3|/data/subtreestore-ttl-4
# subtreestore.scaling.m1=badger:///data/subtreestore
# subtreestore.scaling.m1=null:///

# the ba-subtreestore is used by the block assembly and asset services to store the block assembly subtrees
## subtreestore.scaling.m1=s3:///eu-ubsv-subtree-store?region=eu-west-1&localTTLStore=file&localTTLStorePath=/data/ba-subtreestore
# the bv-subtreestore is used by the block validation service to store the block validation subtrees
# block assembly also mounts the block validation directory as a read only volume to use as a cache
## subtreestore.scaling.m1.blockvalidation=s3:///eu-ubsv-subtree-store?region=eu-west-1&localTTLStore=file&localTTLStorePath=/data/bv-subtreestore
## subtreestore.scaling.m2=s3:///us-ubsv-subtree-store?region=us-east-1&localTTLStore=file&localTTLStorePath=/data/ba-subtreestore
## subtreestore.scaling.m2.blockvalidation=s3:///us-ubsv-subtree-store?region=us-east-1&localTTLStore=file&localTTLStorePath=/data/bv-subtreestore
## subtreestore.scaling.m3=s3:///asia-ubsv-subtree-store?region=ap-northeast-1&localTTLStore=file&localTTLStorePath=/data/ba-subtreestore
## subtreestore.scaling.m3.blockvalidation=s3:///asia-ubsv-subtree-store?region=ap-northeast-1&localTTLStore=file&localTTLStorePath=/data/bv-subtreestore

# Validator Service Configuration
# ----------------------------------------
startValidator=false

useLocalValidator=true

validator_sendBatchSize=0
validator_sendBatchTimeout=100
validator_sendBatchWorkers=1

validator_grpcListenAddress=:${VALIDATOR_GRPC_PORT}
validator_grpcListenAddress.dev=localhost:${VALIDATOR_GRPC_PORT}

validator_grpcAddress=localhost:${VALIDATOR_GRPC_PORT}
validator_grpcAddress.docker.ci.ubsv1=ubsv-1:${VALIDATOR_GRPC_PORT}
validator_grpcAddress.docker.ci.ubsv2=ubsv-2:${VALIDATOR_GRPC_PORT}
validator_grpcAddress.docker.ci.ubsv3=ubsv-3:${VALIDATOR_GRPC_PORT}
validator_grpcAddress.scaling.m1=k8s:///validation-service1.m1.svc.cluster.local:${VALIDATOR_GRPC_PORT}
validator_grpcAddress.scaling.m2=k8s:///validation-service2.m2.svc.cluster.local:${VALIDATOR_GRPC_PORT}
validator_grpcAddress.scaling.m3=k8s:///validation-service3.m3.svc.cluster.local:${VALIDATOR_GRPC_PORT}


# set up the kafka brokers to use for the validator - the path is the topic to use
validator_kafkaBrokers.dev.kafka=kafka://127.0.0.1:9092/txs?partitions=1&replication=1
# comma separated list of hosts is allowed
validator_kafkaWorkers=100



# Block Assembly Service Configuration
# ----------------------------------------
startBlockAssembly=true
startBlockAssembly.scaling=false

blockassembly_disabled=false
blockassembly_creates_utxos=false

blockassembly_sendBatchSize=100
blockassembly_sendBatchTimeout=10
blockassembly_sendBatchWorkers=1
blockassembly_sendBatchRPCTimeoutSeconds=10

blockassembly_remoteTTLStores=false
#blockassembly_remoteTTLStores.scaling=true
# the local TTL cache is only used when remote TTL stores are enabled
blockassembly_localTTLCache=
#blockassembly_localTTLCache.scaling=/data/subtreestore-ttl-1|/data/subtreestore-ttl-2|/data/subtreestore-ttl-3|/data/subtreestore-ttl-4

blockassembly_auxiliarySubtreeStore=
#blockassembly_auxiliarySubtreeStore.scaling=/data/bv-subtreestore

blockassembly_maxBlockReorgRollback=100
blockassembly_maxBlockReorgRollback.allinone=500
blockassembly_maxBlockReorgRollback.scaling=500

blockassembly_maxBlockReorgCatchup=100
blockassembly_maxBlockReorgCatchup.allinone=2000
blockassembly_maxBlockReorgCatchup.scaling=2000

blockassembly_subtreeProcessorBatcherSize=1000
blockassembly_subtreeProcessorBatcherSize.scaling=10000000

blockassembly_subtreeProcessorConcurrentReads=100

blockassembly_grpcListenAddress=:${BLOCK_ASSEMBLY_GRPC_PORT}
blockassembly_grpcListenAddress.dev=localhost:${BLOCK_ASSEMBLY_GRPC_PORT}

blockassembly_frpcListenAddress=:${BLOCK_ASSEMBLY_FRPC_PORT}
blockassembly_frpcListenAddress.dev=localhost:${BLOCK_ASSEMBLY_FRPC_PORT}
blockassembly_frpcListenAddress.docker=

blockassembly_frpcConcurrency=0

blockassembly_grpcAddress=localhost:${BLOCK_ASSEMBLY_GRPC_PORT}
blockassembly_grpcAddress.docker=localhost:${BLOCK_ASSEMBLY_GRPC_PORT}
blockassembly_grpcAddress.docker.ci.ubsv1=ubsv-1:${BLOCK_ASSEMBLY_GRPC_PORT}
blockassembly_grpcAddress.docker.ci.ubsv2=ubsv-2:${BLOCK_ASSEMBLY_GRPC_PORT}
blockassembly_grpcAddress.docker.ci.ubsv3=ubsv-3:${BLOCK_ASSEMBLY_GRPC_PORT}
blockassembly_grpcAddress.scaling.m1=k8s:///blockassembly-service1.m1.svc.cluster.local:${BLOCK_ASSEMBLY_GRPC_PORT}
blockassembly_grpcAddress.scaling.m2=k8s:///blockassembly-service2.m2.svc.cluster.local:${BLOCK_ASSEMBLY_GRPC_PORT}
blockassembly_grpcAddress.scaling.m3=k8s:///blockassembly-service3.m3.svc.cluster.local:${BLOCK_ASSEMBLY_GRPC_PORT}

blockassembly_frpcAddress.dev.frpc=localhost:${BLOCK_ASSEMBLY_FRPC_PORT}
blockassembly_frpcAddress.dev.stu=localhost:${BLOCK_ASSEMBLY_FRPC_PORT}
# blockassembly_frpcAddress.docker.ci.ubsv1=ubsv-1:${BLOCK_ASSEMBLY_GRPC_PORT}
# blockassembly_frpcAddress.docker.ci.ubsv2=ubsv-2:${BLOCK_ASSEMBLY_GRPC_PORT}
# blockassembly_frpcAddress.docker.ci.ubsv3=ubsv-3:${BLOCK_ASSEMBLY_GRPC_PORT}
blockassembly_frpcAddress.scaling.m1=blockassembly-service1.m1.svc.cluster.local:${BLOCK_ASSEMBLY_FRPC_PORT}
blockassembly_frpcAddress.scaling.m2=blockassembly-service2.m2.svc.cluster.local:${BLOCK_ASSEMBLY_FRPC_PORT}
blockassembly_frpcAddress.scaling.m3=blockassembly-service3.m3.svc.cluster.local:${BLOCK_ASSEMBLY_FRPC_PORT}

blockassembly_kafkaWorkers=0
# blockassembly_kafkaWorkers.scaling=256
blockassembly_kafkaBrokers.dev.kafka=kafka://127.0.0.1:9092/txs?partitions=16&replication=1
blockassembly_kafkaBrokers.scaling.m1=kafka://b-1.ubsvmskeu.4h864p.c3.kafka.eu-west-1.amazonaws.com:9092,b-2.ubsvmskeu.4h864p.c3.kafka.eu-west-1.amazonaws.com:9092,b-3.ubsvmskeu.4h864p.c3.kafka.eu-west-1.amazonaws.com:9092/txs?partitions=256&replication=3
blockassembly_kafkaBrokers.scaling.m2=kafka://b-1.ubsvmskus.t4bsx0.c25.kafka.us-east-1.amazonaws.com:9092,b-2.ubsvmskus.t4bsx0.c25.kafka.us-east-1.amazonaws.com:9092,b-3.ubsvmskus.t4bsx0.c25.kafka.us-east-1.amazonaws.com:9092/txs?partitions=256&replication=3

initial_merkle_items_per_subtree=1048576
initial_merkle_items_per_subtree.dev=32768
initial_merkle_items_per_subtree.allinone=32768

# Difficulty configuration
difficulty_adjustment=false
difficulty_adjustment.dev=false
difficulty_adjustment.scaling=false

difficulty_adjustment_window=144 # blocks

difficulty_target_time_per_block=600 # seconds
difficulty_target_time_per_block.dev=60
difficulty_target_time_per_block.test=144

difficulty_pow_limit=234
difficulty_pow_limit.scaling=224



# Block Validation Service Configuration
# ----------------------------------------
startBlockValidation=true
startBlockValidation.scaling=false

blockvalidation_subtreeValidationTimeout=1000
blockvalidation_localSetMined.scaling=true

blockvalidation_txMetaCacheBatcherEnabled=true
blockvalidation_txMetaCacheBatchSize=100
blockvalidation_txMetaCacheBatchTimeoutMillis=5
blockvalidation_txMetaCacheBatcherSendTimeout=5s

blockvalidation_grpcListenAddress=:${BLOCK_VALIDATION_GRPC_PORT}
blockvalidation_grpcListenAddress.dev=localhost:${BLOCK_VALIDATION_GRPC_PORT}

blockvalidation_httpListenAddress=:${BLOCK_VALIDATION_HTTP_PORT}
blockvalidation_httpListenAddress.dev=localhost:${BLOCK_VALIDATION_HTTP_PORT}

blockvalidation_httpAddress=http://localhost:${BLOCK_VALIDATION_HTTP_PORT}
blockvalidation_httpAddress.docker.ci.ubsv1=ubsv-1:${BLOCK_ASSEMBLY_GRPC_PORT}
blockvalidation_httpAddress.docker.ci.ubsv2=ubsv-2:${BLOCK_ASSEMBLY_GRPC_PORT}
blockvalidation_httpAddress.docker.ci.ubsv3=ubsv-3:${BLOCK_ASSEMBLY_GRPC_PORT}
blockvalidation_httpAddress.scaling.m1=http://blockvalidation-service1.m1.svc.cluster.local:${BLOCK_VALIDATION_HTTP_PORT}
blockvalidation_httpAddress.scaling.m2=http://blockvalidation-service2.m2.svc.cluster.local:${BLOCK_VALIDATION_HTTP_PORT}
blockvalidation_httpAddress.scaling.m3=http://blockvalidation-service3.m3.svc.cluster.local:${BLOCK_VALIDATION_HTTP_PORT}

blockvalidation_frpcListenAddress=:${BLOCK_VALIDATION_FRPC_PORT}
blockvalidation_frpcListenAddress.dev=localhost:${BLOCK_VALIDATION_FRPC_PORT}

blockvalidation_frpcConcurrency=0

blockvalidation_grpcAddress=localhost:${BLOCK_VALIDATION_GRPC_PORT}
# blockvalidation_grpcAddress.docker.ci.ubsv1=ubsv-1:${BLOCK_ASSEMBLY_GRPC_PORT}
# blockvalidation_grpcAddress.docker.ci.ubsv2=ubsv-2:${BLOCK_ASSEMBLY_GRPC_PORT}
# blockvalidation_grpcAddress.docker.ci.ubsv3=ubsv-3:${BLOCK_ASSEMBLY_GRPC_PORT}
blockvalidation_grpcAddress.scaling.m1=k8s:///blockvalidation-service1.m1.svc.cluster.local:${BLOCK_VALIDATION_GRPC_PORT}
blockvalidation_grpcAddress.scaling.m2=k8s:///blockvalidation-service2.m2.svc.cluster.local:${BLOCK_VALIDATION_GRPC_PORT}
blockvalidation_grpcAddress.scaling.m3=k8s:///blockvalidation-service3.m3.svc.cluster.local:${BLOCK_VALIDATION_GRPC_PORT}

blockvalidation_frpcAddress.dev.frpc=localhost:${BLOCK_VALIDATION_FRPC_PORT}
# blockvalidation_frpcAddress.docker.ci=localhost:${BLOCK_VALIDATION_FRPC_PORT}
# blockvalidation_frpcAddress.docker.ci.ubsv1=ubsv-1:${BLOCK_VALIDATION_FRPC_PORT}
# blockvalidation_frpcAddress.docker.ci.ubsv2=ubsv-2:${BLOCK_VALIDATION_FRPC_PORT}
# blockvalidation_frpcAddress.docker.ci.ubsv3=ubsv-3:${BLOCK_VALIDATION_FRPC_PORT}
blockvalidation_frpcAddress.scaling.m1=blockvalidation-service1.m1.svc.cluster.local:${BLOCK_VALIDATION_FRPC_PORT}
blockvalidation_frpcAddress.scaling.m2=blockvalidation-service2.m2.svc.cluster.local:${BLOCK_VALIDATION_FRPC_PORT}
blockvalidation_frpcAddress.scaling.m3=blockvalidation-service3.m3.svc.cluster.local:${BLOCK_VALIDATION_FRPC_PORT}

blockvalidation_kafkaWorkers=0
# blockvalidation_kafkaWorkers.scaling=256
blockvalidation_kafkaBrokers.dev.kafka=kafka://127.0.0.1:9092/txs?partitions=16&replication=1
blockvalidation_kafkaBrokers.scaling.m1=kafka://b-1.ubsvmskeu.4h864p.c3.kafka.eu-west-1.amazonaws.com:9092,b-2.ubsvmskeu.4h864p.c3.kafka.eu-west-1.amazonaws.com:9092,b-3.ubsvmskeu.4h864p.c3.kafka.eu-west-1.amazonaws.com:9092/txs?partitions=256&replication=3
blockvalidation_kafkaBrokers.scaling.m2=kafka://b-1.ubsvmskus.t4bsx0.c25.kafka.us-east-1.amazonaws.com:9092,b-2.ubsvmskus.t4bsx0.c25.kafka.us-east-1.amazonaws.com:9092,b-3.ubsvmskus.t4bsx0.c25.kafka.us-east-1.amazonaws.com:9092/txs?partitions=256&replication=3

# Tx Meta Data Store Service Configuration
# ----------------------------------------
txMetaCacheMaxMB=32
txMetaCacheMaxMB.scaling=131702

txmeta_store_dbTimeoutMillis=5000

txmeta_store_ttl=14400 # 4 hours
txmeta_store_ttl.allinone=600 # 10 minutes

txmeta_store_maxMinedBatchSize=1024
txmeta_store_maxMinedBatchSize.scaling=102400

txmeta_store_maxMinedRoutines=4
txmeta_store_maxMinedRoutines.scaling=8

txmeta_store=null:///
txmeta_store.dev=sqlite:///metastore
txmeta_store.dev.stu=postgres://ubsv:ubsv@localhost:5432/ubsv
# txmeta_store.dev.simon=redis:///localhost:${REDIS_PORT}
# txmeta_store.dev.stu=null:///




txmeta_store.scaling.m1=aerospike://editor:password1234@10.1.42.245:3000/ubsv-store?WarmUp=0&ConnectionQueueSize=640&LimitConnectionsToQueueSize=true&MinConnectionsPerNode=64&expiration=86400
txmeta_store.scaling.m2=aerospike://editor:password1234@10.2.49.122:3000/ubsv-store?WarmUp=0&ConnectionQueueSize=640&LimitConnectionsToQueueSize=true&MinConnectionsPerNode=64&expiration=86400
# txmeta_store.scaling=null:///

# UTXO Store Service Configuration
# ----------------------------------------
utxostore_dbTimeoutMillis=5000

utxostore_batchingEnabled=true

utxostore=null:///
utxostore.dev=sqlite:///utxostore
utxostore.dev.stu=postgres://ubsv:ubsv@localhost:5432/ubsv
utxostore.dev.simon=redis://localhost:${REDIS_PORT}
utxostore.docker.ci.chainintegrity.ubsv1=postgres://miner1:miner1@localhost:5432/ubsv1
utxostore.docker.ci.chainintegrity.ubsv2=postgres://miner2:miner2@localhost:5432/ubsv2
utxostore.docker.ci.chainintegrity.ubsv3=postgres://miner3:miner3@localhost:5432/ubsv3





; utxostore.scaling=aerospike://editor:password1234@aerocluster.aerospike.svc.cluster.local:3000/ubsv-store?WarmUp=1024&ConnectionQueueSize=1024&LimitConnectionsToQueueSize=false&MinConnectionsPerNode=1024&expiration=900
# utxostore.scaling=null:///

utxostore.scaling.m1=aerospike://editor:password1234@10.1.42.245:3000/ubsv-store?WarmUp=0&ConnectionQueueSize=640&LimitConnectionsToQueueSize=true&MinConnectionsPerNode=64&expiration=900
utxostore.scaling.m2=aerospike://editor:password1234@10.2.49.122:3000/ubsv-store?WarmUp=0&ConnectionQueueSize=640&LimitConnectionsToQueueSize=true&MinConnectionsPerNode=64&expiration=900
# utxostore.scaling.m1.propagation=null:///
# utxostore.scaling.m2.propagation=null:///
# utxostore.scaling.m3.propagation=null:///

utxoblaster_utxostore_aerospike.m1=aerospike://editor:password1234@10.1.42.245:3000/ubsv-store?WarmUp=0&ConnectionQueueSize=640&LimitConnectionsToQueueSize=true&MinConnectionsPerNode=64&expiration=900
utxoblaster_utxostore_aerospike.2=aerospike://editor:password1234@10.2.49.122:3000/ubsv-store?WarmUp=0&ConnectionQueueSize=640&LimitConnectionsToQueueSize=true&MinConnectionsPerNode=64&expiration=900
utxoblaster_utxostore_aerospike.dev=aerospike://localhost:3000/test

REDIS_HOSTS=localhost:${REDIS_PORT}
# REDIS_HOSTS.dev=localhost:$},localhost:6380,localhost:6381,localhost:6382
REDIS_HOSTS.scaling=ubsv-store-redis-cluster-0.ubsv-store-redis-cluster-headless.redis.svc.cluster.local:$},ubsv-store-redis-cluster-1.ubsv-store-redis-cluster-headless.redis.svc.cluster.local:$},ubsv-store-redis-cluster-2.ubsv-store-redis-cluster-headless.redis.svc.cluster.local:$},ubsv-store-redis-cluster-3.ubsv-store-redis-cluster-headless.redis.svc.cluster.local:$},ubsv-store-redis-cluster-4.ubsv-store-redis-cluster-headless.redis.svc.cluster.local:$},ubsv-store-redis-cluster-5.ubsv-store-redis-cluster-headless.redis.svc.cluster.local:$}
utxoblaster_utxostore_redis=redis://${REDIS_HOSTS}

# how long to wait before deleting spent utxos (seconds)
spent_utxo_ttl=3600 #  = 1 hour
spent_utxo_ttl.dev=10 #  = 10 seconds


# Blockchain Service Configuration
# ----------------------------------------
startBlockchain=true
startBlockchain.scaling=false

blockchain_grpcListenAddress=:${BLOCKCHAIN_GRPC_PORT}
blockchain_grpcListenAddress.docker=0.0.0.0:${BLOCKCHAIN_GRPC_PORT}
blockchain_grpcListenAddress.dev=localhost:${BLOCKCHAIN_GRPC_PORT}

blockchain_grpcAddress=localhost:${BLOCKCHAIN_GRPC_PORT}
blockchain_grpcAddress.scaling.m1=k8s:///blockchain-service1.m1.svc.cluster.local:${BLOCKCHAIN_GRPC_PORT}
blockchain_grpcAddress.scaling.m2=k8s:///blockchain-service2.m2.svc.cluster.local:${BLOCKCHAIN_GRPC_PORT}
blockchain_grpcAddress.scaling.m3=k8s:///blockchain-service3.m3.svc.cluster.local:${BLOCKCHAIN_GRPC_PORT}

blockchain_store=sqlite:///blockchain
blockchain_store.dev.stu=postgres://ubsv:ubsv@localhost:5432/ubsv
# blockchain_store.dev.stu=postgres://ubsv:ubsv@localhost:5432/ubsv
# blockchain_store.dev.simon=postgres://ubsv:ubsv@localhost:5432/ubsv
blockchain_store.docker.ci.chainintegrity.ubsv1=postgres://miner1:miner1@localhost:5432/ubsv1
blockchain_store.docker.ci.chainintegrity.ubsv2=postgres://miner2:miner2@localhost:5432/ubsv2
blockchain_store.docker.ci.chainintegrity.ubsv3=postgres://miner3:miner3@localhost:5432/ubsv3












# Bootstrap Service Configuration
# ----------------------------------------
startBootstrap=false

bootstrap_grpcListenAddress=:${BOOTSTRAP_GRPC_PORT}
bootstrap_grpcListenAddress.dev=localhost:${BOOTSTRAP_GRPC_PORT}
bootstrap_grpcListenAddress.docker=localhost:${BOOTSTRAP_GRPC_PORT}

bootstrap_grpcAddress=localhost:${BOOTSTRAP_GRPC_PORT}
bootstrap_grpcAddress.docker=localhost:${BOOTSTRAP_GRPC_PORT}
bootstrap_grpcAddress.allinone=bootstrap.allinone.ubsv.dev:${BOOTSTRAP_GRPC_PORT}
# bootstrap_grpcAddress.scaling.m1=bootstrap.scaling.ubsv.dev:${BOOTSTRAP_GRPC_PORT}
# bootstrap_grpcAddress.scaling.m1=bootstrap-service.bootstrap-service.svc.cluster.local:${BOOTSTRAP_GRPC_PORT}

bootstrap_httpListenAddress=:${BOOTSTRAP_HTTP_PORT}
bootstrap_httpListenAddress.dev=localhost:${BOOTSTRAP_HTTP_PORT}


# Miner Service Configuration
# ----------------------------------------
startMiner=true
startMiner.scaling=false

mine_candidate_request_interval=10

mine_initial_blocks=false
mine_initial_blocks.dev=true
mine_initial_blocks.allinone.miner.EU.1=true
mine_initial_blocks.scaling.m1=true

mine_initial_blocks_count=1000
mine_initial_blocks_count.dev=200 # don't need more in dev
mine_initial_blocks_count.dev.simon=200
mine_initial_blocks_count.dev.stu=1000
mine_initial_blocks_count.docker.ci=301

mine_initial_blocks_final_wait=5s

miner_waitSeconds.allinone=270
miner_waitSeconds.scaling=120
miner_waitSeconds.dev.stu=30

PK1=L56TgyTpDdvL3W24SMoALYotibToSCySQeo4pThLKxw6EFR6f93Q
PK2=KyAwSjuXZNgj78w3W7mR1fVMbPFu2heaCJJkWK5Yy58NZ4xafV6k
PK3=L3NVjmwg3nC7ZPrwMVF6FXiG1a1RZ89nhizmJVctGztRKLYrhtFL

miner_wallet_private_keys=${PK1}
miner_wallet_private_keys.allinone=${PK1} | ${PK2} | ${PK3}
miner_wallet_private_keys.scaling=${PK1} | ${PK2} | ${PK3}
miner_wallet_private_keys.docker=${PK1} | ${PK2} | ${PK3}


miner_httpListenAddress=:${MINER_HTTP_PORT}
miner_httpListenAddress.dev=localhost:${MINER_HTTP_PORT}

coinbase_wallet_private_key=${PK1}
coinbase_wallet_private_key.allinone.miner.EU.1=${PK1}
coinbase_wallet_private_key.allinone.miner.US.1=${PK2}
coinbase_wallet_private_key.allinone.miner.AP.1=${PK3}
coinbase_wallet_private_key.scaling.m1=${PK1}
coinbase_wallet_private_key.scaling.m2=${PK2}
coinbase_wallet_private_key.scaling.m3=${PK3}

coinbase_arbitrary_text=/teranode/
coinbase_arbitrary_text.dev.siggi=/siggi/
coinbase_arbitrary_text.dev.simon=/simon/
coinbase_arbitrary_text.dev.liam=/liam/
coinbase_arbitrary_text.dev.stu=/stu/
coinbase_arbitrary_text.dev.leonard=/leonard/
coinbase_arbitrary_text.dev.vicente=/vicente/
coinbase_arbitrary_text.dev.gokhan=/gokhan/
coinbase_arbitrary_text.dev.NEW_USER_TEMPLATE=/NEW_USER_TEMPLATE/ # template for future new users (referenced in documentation)
coinbase_arbitrary_text.docker.ci.ubsv1=/m1-eu/
coinbase_arbitrary_text.docker.ci.ubsv2=/m2-us/
coinbase_arbitrary_text.docker.ci.ubsv3=/m3-asia/
coinbase_arbitrary_text.allinone.miner.EU.1=/miner1-eu/
coinbase_arbitrary_text.allinone.miner.US.1=/miner1-usa/
coinbase_arbitrary_text.allinone.miner.AP.1=/miner1-asia/
coinbase_arbitrary_text.scaling.m1=/m1-eu/
coinbase_arbitrary_text.scaling.m2=/m2-us/
coinbase_arbitrary_text.scaling.m3=/m3-asia/

# Asset Service Configuration
# ----------------------------------------
startAsset=true
startAsset.scaling=false

asset_http_port=80
asset_https_port=443

asset_grpcListenAddress=:${ASSET_GRPC_PORT}
asset_grpcListenAddress.dev=localhost:${ASSET_GRPC_PORT}

asset_grpcAddress=localhost:${ASSET_GRPC_PORT}
asset_grpcAddress.docker.ci.ubsv1=ubsv-1:${ASSET_GRPC_PORT}
asset_grpcAddress.docker.ci.ubsv2=ubsv-2:${ASSET_GRPC_PORT}
asset_grpcAddress.docker.ci.ubsv3=ubsv-3:${ASSET_GRPC_PORT}
asset_grpcAddress.docker.ci.externaltxblaster.ubsv1=localhost:1${ASSET_GRPC_PORT}
asset_grpcAddress.allinone.miner.EU.1=miner-eu-1.allinone.ubsv.dev:${ASSET_GRPC_PORT}
asset_grpcAddress.allinone.miner.US.1=miner-us-1.allinone.ubsv.dev:${ASSET_GRPC_PORT}
asset_grpcAddress.allinone.miner.AP.1=miner-ap-1.allinone.ubsv.dev:${ASSET_GRPC_PORT}
asset_grpcAddress.scaling.m1=k8s:///asset-service1.m1.svc.cluster.local:${ASSET_GRPC_PORT}
asset_grpcAddress.scaling.m2=k8s:///asset-service2.m2.svc.cluster.local:${ASSET_GRPC_PORT}
asset_grpcAddress.scaling.m3=k8s:///asset-service3.m3.svc.cluster.local:${ASSET_GRPC_PORT}

asset_httpListenAddress=:${ASSET_HTTP_PORT}
asset_httpListenAddress.dev=localhost:${ASSET_HTTP_PORT}

asset_httpAddress=http://localhost:${ASSET_HTTP_PORT}
asset_httpAddress.dev.siggi=http://bastion.ubsv.dev:18090
asset_httpAddress.dev.simon=http://bastion.ubsv.dev:18190
asset_httpAddress.dev.liam=http://bastion.ubsv.dev:18290
asset_httpAddress.dev.stu=http://bastion.ubsv.dev:18390
# asset_httpAddress.dev.stu=http://localhost:8090
asset_httpAddress.dev.vicente=http://bastion.ubsv.dev:18490
asset_httpAddress.dev.gokhan=http://bastion.ubsv.dev:18590
asset_httpAddress.dev.NEW_USER_TEMPLATE=http://bastion.ubsv.dev:18x90 # template for future new users (referenced in documentation)
asset_httpAddress.allinone.miner.EU.1=http://miner-eu-1.allinone.ubsv.dev
asset_httpAddress.allinone.miner.US.1=http://miner-us-1.allinone.ubsv.dev
asset_httpAddress.allinone.miner.AP.1=http://miner-ap-1.allinone.ubsv.dev
asset_httpAddress.scaling.m1=http://m1.scaling.ubsv.dev
asset_httpAddress.scaling.m2=http://m2.scaling.ubsv.dev
asset_httpAddress.scaling.m3=http://m3.scaling.ubsv.dev
asset_httpAddress.docker.ci.externaltxblaster=http://localhost:1${ASSET_HTTP_PORT}

asset_clientName=Not specified
asset_clientName.dev.siggi=Siggi
asset_clientName.dev.simon=Simon
asset_clientName.dev.liam=Liam
asset_clientName.dev.stu=Stu
asset_clientName.dev.vicente=Vicente
asset_clientName.dev.gokhan=Gokhan
asset_clientName.dev.NEW_USER_TEMPLATE=NEW_USER_TEMPLATE # template for future new users (referenced in documentation)
asset_clientName.docker.ci.ubsv1=ubsv-1
asset_clientName.docker.ci.ubsv2=ubsv-2
asset_clientName.docker.ci.ubsv3=ubsv-3
asset_clientName.allinone.miner.EU.1=Miner1-EU
asset_clientName.allinone.miner.US.1=Miner1-USA
asset_clientName.allinone.miner.AP.1=Miner1-ASIA
asset_clientName.scaling.m1=M1
asset_clientName.scaling.m2=M3
asset_clientName.scaling.m3=M3


# Coinbase Tracker Service Configuration
# ----------------------------------------
startCoinbase=true
startCoinbase.docker=false
startCoinbase.scaling=false


coinbase_grpcListenAddress=:${COINBASE_GRPC_PORT}
coinbase_grpcListenAddress.dev=localhost:${COINBASE_GRPC_PORT}
coinbase_grpcListenAddress.docker.ci.externaltxblaster.ubsv1=localhost:${COINBASE_GRPC_PORT}

coinbase_assetGrpcAddress=localhost:${ASSET_GRPC_PORT}
coinbase_assetGrpcAddress.docker.ci.ubsv1=ubsv-1:${ASSET_GRPC_PORT}
coinbase_assetGrpcAddress.docker.ci.ubsv2=ubsv-2:${ASSET_GRPC_PORT}
coinbase_assetGrpcAddress.docker.ci.ubsv3=ubsv-3:${ASSET_GRPC_PORT}
coinbase_assetGrpcAddress.docker.ci.externaltxblaster.ubsv1=localhost:1${ASSET_GRPC_PORT}
coinbase_assetGrpcAddress.scaling.m1=k8s:///asset-service1.m1.svc.cluster.local:${ASSET_GRPC_PORT}
coinbase_assetGrpcAddress.scaling.m2=k8s:///asset-service2.m2.svc.cluster.local:${ASSET_GRPC_PORT}
coinbase_assetGrpcAddress.scaling.m3=k8s:///asset-service3.m3.svc.cluster.local:${ASSET_GRPC_PORT}


coinbase_grpcAddress=localhost:18093
coinbase_grpcAddress.dev=localhost:${COINBASE_GRPC_PORT}
coinbase_grpcAddress.docker.ci.externaltxblaster=localhost:18093
coinbase_grpcAddress.docker.ci.ubsv1=ubsv-1-coinbase:${COINBASE_GRPC_PORT}
coinbase_grpcAddress.docker.ci.ubsv2=ubsv-2-coinbase:${COINBASE_GRPC_PORT}
coinbase_grpcAddress.docker.ci.ubsv3=ubsv-3-coinbase:${COINBASE_GRPC_PORT}
coinbase_grpcAddress.allinone.miner.EU.1=miner-eu-1.miner-eu-1.svc.cluster.local:${COINBASE_GRPC_PORT}
coinbase_grpcAddress.allinone.miner.US.1=miner-us-1.miner-us-1.svc.cluster.local:${COINBASE_GRPC_PORT}
coinbase_grpcAddress.allinone.miner.AP.1=miner-ap-1.miner-ap-1.svc.cluster.local:${COINBASE_GRPC_PORT}
coinbase_grpcAddress.scaling.m1=k8s:///coinbase-service1.m1.svc.cluster.local:${COINBASE_GRPC_PORT}
coinbase_grpcAddress.scaling.m2=k8s:///coinbase-service2.m2.svc.cluster.local:${COINBASE_GRPC_PORT}
coinbase_grpcAddress.scaling.m3=k8s:///coinbase-service3.m3.svc.cluster.local:${COINBASE_GRPC_PORT}

coinbase_notification_threshold.scaling=100000

coinbase_store_dbTimeoutMillis=5000

coinbase_store=sqlite:///coinbase
coinbase_store.dev.stu=postgres://ubsv:ubsv@localhost:5432/coinbase
coinbase_store.dev.simon=postgres://ubsv:ubsv@localhost:5432/coinbase
coinbase_store.docker=postgres://coinbase:coinbase@postgres:5432/coinbase
coinbase_store.docker.ci.externaltxblaster=postgres://coinbase:coinbase@postgres:5432/coinbase
coinbase_store.docker.ci.externaltxblaster.ubsv1=postgres://coinbase1:coinbase1@localhost:5432/coinbase1
coinbase_store.docker.ci.chainintegrity.ubsv1=postgres://coinbase1:coinbase1@localhost:5432/coinbase1
coinbase_store.docker.ci.chainintegrity.ubsv2=postgres://coinbase2:coinbase2@localhost:5432/coinbase2
coinbase_store.docker.ci.chainintegrity.ubsv3=postgres://coinbase3:coinbase3@localhost:5432/coinbase3
coinbase_store.docker.ci=postgres://coinbase:coinbase@localhost:5432/coinbase








coinbase_wait_for_peers=true
coinbase_wait_for_peers.scaling=false

# Faucet Service Configuration
# ----------------------------------------
startFaucet=true
startFaucet.scaling=false

faucet_httpListenAddress=:${FAUCET_HTTP_PORT}
faucet_httpListenAddress.dev=localhost:${FAUCET_HTTP_PORT}

# P2P Configuration
# ----------------------------------------
startP2P=true
startP2P.scaling=false

p2p_ip=0.0.0.0
p2p_ip.dev=127.0.0.1

p2p_port=${P2P_PORT}
p2p_port_coinbase=${P2P_PORT}
#dev env runs in same process so must have different port
p2p_port_coinbase.dev=${P2P_PORT_COINBASE}
#allinone env runs in same process so must have different port
p2p_port_coinbase.allinone=${P2P_PORT_COINBASE}

p2p_optimise_retries=true

p2p_topic_prefix=github.com/bitcoin-sv/ubsv
p2p_topic_prefix.dev=dev.github.com/bitcoin-sv/ubsv
p2p_topic_prefix.dev.simon=dev.simon.github.com/bitcoin-sv/ubsv
p2p_topic_prefix.allinone=allinone.github.com/bitcoin-sv/ubsv
p2p_topic_prefix.allinone.miner.LO=allinone.LO.github.com/bitcoin-sv/ubsv
p2p_topic_prefix.scaling=scaling.github.com/bitcoin-sv/ubsv

p2p_block_topic=block
p2p_subtree_topic=subtree
p2p_bestblock_topic=bestblock
p2p_mining_on_topic=miningon
# The P2P topic to publish rejected transaction messages
p2p_rejected_tx_topic=rejected_tx

p2p_httpListenAddress=:${P2P_HTTP_PORT}
p2p_httpListenAddress.dev=localhost:${P2P_HTTP_PORT}
p2p_httpListenAddress.docker=localhost:${P2P_HTTP_PORT}

p2p_dht_use_private=false
p2p_dht_use_private.dev=false
p2p_dht_use_private.docker=true
p2p_dht_use_private.allinone=true
p2p_dht_use_private.scaling=false

p2p_dht_protocol_id=/ubsv

p2p_shared_key=285b49e6d910726a70f205086c39cbac6d8dcc47839053a21b1f614773bbc137
p2p_shared_key.docker=847a544c7403b353bd493791de2bd70878860932a40957196cc7462c8cf435c7

p2p_bootstrapAddresses=/dns4/eu-p2pbootstrap.ubsv.dev/tcp/${P2P_BOOTSTRAP_PORT}/p2p/12D3KooWESmhNAN8s6NPdGNvJH3zJ4wMKDxapXKNUe2DzkAwKYqK|/dns4/us-p2pbootstrap.ubsv.dev/tcp/${P2P_BOOTSTRAP_PORT}/p2p/12D3KooWJ6kQHAR65xkA34NABsNVAJyVxPWh8JUSo1vtZsTyw4GD
# p2p_bootstrapAddresses.docker=/dns4/p2p-bootstrap-1/tcp/${P2P_BOOTSTRAP_PORT}/p2p/12D3KooWS43tBXaGewmskvL1B82KccLP5JafTvreiJNbHCbZhDnh

# CGO Signer and Verifier Configuration
# ----------------------------------------
use_cgo_signer=true
use_cgo_signer.scaling=true

use_cgo_verifier=true
use_cgo_verifier.scaling=true


# IPV6 Addresses
# ----------------------------------------
#ipv6_addresses=ff02::1234


# Feature Switches
feature_libP2P=true

feature_bootstrap=false
feature_bootstrap.docker=true

tx_blaster_profilerAddr=:${PROFILE_PORT_TXBLASTER}
tx_blaster_profilerAddr.dev=localhost:${PROFILE_PORT_TXBLASTER}

tx_blaster_staggerWorkersTimeMs=25

# time to wait in ms between sending transactions
distributer_wait_time=10

# distributor config
distributor_backoff_duration=1s
distributor_backoff_duration.m1.scaling.coinbase=10s
distributor_backoff_duration.m2.scaling.coinbase=10s
distributor_backoff_duration.m3.scaling.coinbase=10s

distributor_max_retries=3
distributor_max_retries.m1.scaling.coinbase=3
distributor_max_retries.m2.scaling.coinbase=3
distributor_max_retries.m3.scaling.coinbase=3

distributor_failure_tolerance=0
distributor_failure_tolerance.m1.scaling.coinbase=0
distributor_failure_tolerance.m2.scaling.coinbase=0
distributor_failure_tolerance.m3.scaling.coinbase=0


# E2E test configuration
min_block_height_for_e2e=200

coinbase_should_wait.docker=true

coinbase_wait_until_block.docker=200
