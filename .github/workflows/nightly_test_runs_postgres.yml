name: nightly_test_runs_postgres

on:
  schedule:
    - cron: "0 0 * * *" # Runs at midnight UTC every day
  workflow_dispatch:

env:
  REPO: teranode
  ECR_REGION: eu-north-1
  USE_ECR_IMAGE: true
  GO_VERSION: '1.24.1'

jobs:
  pull-image:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.ECR_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
        with:
          mask-password: true

      - name: Pull Docker image from ECR
        if: env.USE_ECR_IMAGE == 'true'
        run: |
          IMAGE_TAG=latest
          docker pull ${{ steps.login-ecr.outputs.registry }}/${{ env.REPO }}:$IMAGE_TAG
          docker tag ${{ steps.login-ecr.outputs.registry }}/${{ env.REPO }}:$IMAGE_TAG teranode:latest

  run-tests-postgres:
    needs: pull-image
    runs-on: teranode-runner
    strategy:
      matrix:
        test_config:
          # TNC Tests
          - test_dir: "test/tnc"
            test_tags: "test_tnc"
            test_suite: "TestTNC1_1TestSuite"
            test_func: "TestVerifyMerkleRootCalculation"
            test_filename: "tnc1_1_test.go"
          - test_dir: "test/tnc"
            test_tags: "test_tnc"
            test_suite: "TestTNC1_2TestSuite"
            test_func: "TestCheckPrevBlockHash"
            test_filename: "tnc1_2_test.go"
          - test_dir: "test/tnc"
            test_tags: "test_tnc"
            test_suite: "TestTNC1_2TestSuite"
            test_func: "TestPrevBlockHashAfterReorg"
            test_filename: "tnc1_2_test.go"
          - test_dir: "test/tnc"
            test_tags: "test_tnc"
            test_suite: "TestTNC1TestSuite"
            test_func: "TestCandidateContainsAllTxs"
            test_filename: "tnc1_3_test.go"
          - test_dir: "test/tnc"
            test_tags: "test_tnc"
            test_suite: "TestTNC1TestSuite"
            test_func: "TestCheckHashPrevBlockCandidate"
            test_filename: "tnc1_3_test.go"
          - test_dir: "test/tnc"
            test_tags: "test_tnc"
            test_suite: "TestTNC1TestSuite"
            test_func: "TestCoinbaseTXAmount"
            test_filename: "tnc1_3_test.go"
          - test_dir: "test/tnc"
            test_tags: "test_tnc"
            test_suite: "TestTNC1TestSuite"
            test_func: "TestCoinbaseTXAmount2"
            test_filename: "tnc1_3_test.go"
          - test_dir: "test/tnc"
            test_tags: "test_tnc"
            test_suite: "TestTNC2_1TestSuite"
            test_func: "TestUniqueCandidateIdentifiers"
            test_filename: "tnc2_1_test.go"
          - test_dir: "test/tnc"
            test_tags: "test_tnc"
            test_suite: "TestTNC2_1TestSuite"
            test_func: "TestConcurrentCandidateIdentifiers"
            test_filename: "tnc2_1_test.go"
          - test_dir: "test/tnc"
            test_tags: "test_tnc"
            test_suite: "TestTNC2_2TestSuite"
            test_func: "TestCandidateBlockStorage"
            test_filename: "tnc2_2_test.go"
          - test_dir: "test/tnc"
            test_tags: "test_tnc"
            test_suite: "TestTNC2_2TestSuite"
            test_func: "TestCandidateBlockRetention"
            test_filename: "tnc2_2_test.go"
          - test_dir: "test/tnc"
            test_tags: "test_tnc"
            test_suite: "TestTNC2_2TestSuite"
            test_func: "TestConcurrentCandidateStorage"
            test_filename: "tnc2_2_test.go"

          # TNB Tests
          - test_dir: "test/tnb"
            test_tags: "test_tnb"
            test_suite: "TestTNB1TestSuite"
            test_func: "TestSendTxsInBatch"
            test_filename: "tnb1_test.go"
          - test_dir: "test/tnb"
            test_tags: "test_tnb"
            test_suite: "TestTNB1TestSuite"
            test_func: "TestReceiveExtendedFormatTx"
            test_filename: "tnb1_test.go"
          - test_dir: "test/tnb"
            test_tags: "test_tnb"
            test_suite: "TestTNB1TestSuite"
            test_func: "TestNoReformattingRequired"
            test_filename: "tnb1_test.go"
          - test_dir: "test/tnb"
            test_tags: "test_tnb"
            test_suite: "TestTNB2TestSuite"
            test_func: "TestUTXOValidation"
            test_filename: "tnb2_test.go"
          - test_dir: "test/tnb"
            test_tags: "test_tnb"
            test_suite: "TestTNB2TestSuite"
            test_func: "TestScriptValidation"
            test_filename: "tnb2_test.go"
          - test_dir: "test/tnb"
            test_tags: "test_tnb"
            test_suite: "TestTNB6TestSuite"
            test_func: "TestUTXOSetManagement"
            test_filename: "tnb6_test.go"

          # TNJ Tests
          - test_dir: "test/tnj"
            test_tags: "test_tnj"
            test_suite: "TestTNJLockTimeTestSuite"
            test_func: "TestLocktimeScenarios"
            test_filename: "locktime_test.go"
          - test_dir: "test/tnj"
            test_tags: "test_tnj"
            test_suite: "TestTNJ4TestSuite"
            test_func: "TestBlockSubsidy"
            test_filename: "tnj_4_test.go"
          - test_dir: "test/tnj"
            test_tags: "test_tnj"
            test_suite: "TestTNJDoubleSpendTestSuite"
            test_func: "TestRejectLongerChainWithDoubleSpend"
            test_filename: "double_spend_test.go"
          - test_dir: "test/tnj"
            test_tags: "test_tnj"
            test_suite: "TestTNJDoubleSpendTestSuite"
            test_func: "TestDoubleSpendMultipleUtxos"
            test_filename: "double_spend_test.go"

          # TND Tests
          - test_dir: "test/tnd"
            test_tags: "test_tnd"
            test_suite: "TestTND1_1TestSuite"
            test_func: "TestBlockPropagation"
            test_filename: "tnd1_1_test.go"
          - test_dir: "test/tnd"
            test_tags: "test_tnd"
            test_suite: "TestTND1_1TestSuite"
            test_func: "TestBlockPropagationWithNotifications"
            test_filename: "tnd_1_test.go"

          # TNE Tests
          - test_dir: "test/tne"
            test_tags: "test_tne"
            test_suite: "TestTNE1_1TestSuite"
            test_func: "TestNode_DoNotVerifyTransactionsIfAlreadyVerified"
            test_filename: "tne1_1_test.go"

          # TNA Tests
          - test_dir: "test/tna"
            test_tags: "test_tna"
            test_suite: "TNA1TestSuite"
            test_func: "TestBroadcastNewTxAllNodes"
            test_filename: "tna1_test.go"
          - test_dir: "test/tna"
            test_tags: "test_tna"
            test_suite: "TNA2TestSuite"
            test_func: "TestTxsReceivedAllNodes"
            test_filename: "tna2_test.go"
          - test_dir: "test/tna"
            test_tags: "test_tna"
            test_suite: "TestTNA4TestSuite"
            test_func: "TestBlockBroadcast"
            test_filename: "tna4_test.go"
          - test_dir: "test/tna"
            test_tags: "test_tna"
            test_suite: "TestTNA6TestSuite"
            test_func: "TestAcceptanceNextBlock"
            test_filename: "tna6_test.go"

          # FSM Tests
          - test_dir: "test/fsm"
            test_tags: "test_fsm"
            test_suite: "TestFsmTestSuite"
            test_func: "TestNodeCatchUpState_WithStartAndStopNodes"
            test_filename: "fsm_state.go"
          - test_dir: "test/fsm"
            test_tags: "test_fsm"
            test_suite: "TestFsmTestSuite"
            test_func: "TestNodeCatchUpStateSingleNode_WithP2PSwitch"
            test_filename: "fsm_state.go"
          - test_dir: "test/fsm"
            test_tags: "test_fsm"
            test_suite: "TestFsmTestSuite"
            test_func: "TestNodeCatchUpStateMultipleNodes_WithP2PSwitch"
            test_filename: "fsm_state.go"
          - test_dir: "test/fsm"
            test_tags: "test_fsm"
            test_suite: "TestFsmTestSuite"
            test_func: "TestNodeDoesNotSendMiningCandidate_CatchUpState_WithStartAndStopNodes"
            test_filename: "fsm_state.go"

      max-parallel: 1
      fail-fast: false

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.ECR_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: false

      - name: Start PostgreSQL service
        run: docker-compose -f docker-compose.yml up -d postgres

      - name: Wait for PostgreSQL
        run: |
          for i in {1..10}; do
            nc -z localhost 15432 && echo "Postgres is up" && exit 0
            echo "Waiting for Postgres..."
            sleep 2
          done
          echo "Postgres did not start in time" && exit 1

      - name: Run test with PostgreSQL backend
        run: |
          go clean -testcache
          docker pull ${{ steps.login-ecr.outputs.registry }}/${{ env.REPO }}:latest
          docker tag ${{ steps.login-ecr.outputs.registry }}/${{ env.REPO }}:latest teranode:latest
          go test -v -run "^${{ matrix.test_config.test_suite }}$/${{ matrix.test_config.test_func }}$" \
            -tags ${{ matrix.test_config.test_tags }} \
            ./${{ matrix.test_config.test_dir }}/${{ matrix.test_config.test_filename }}
        env:
          SETTINGS_CONTEXT: docker.teranode1.test.nightly
          test_dir: ${{ matrix.test_config.test_dir }}
          test_tags: ${{ matrix.test_config.test_tags }}
          report_name: ${{ matrix.test_config.report_name }}
          GITHUB_ACTIONS: true
        continue-on-error: false
