name: pullrequest-analysis
on:
  pull_request:

permissions:
  contents: read
  pull-requests: read

env:
  REPO: teranode
  ECR_REGION: eu-north-1
  SETTINGS_CONTEXT_DEFAULT: "test"

jobs:
  golangci:
    name: lint
    runs-on: teranode-runner
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v5
        with:
          go-version: '1.24.0'
          cache: "false"
      - name: golangci-lint
        uses: golangci/golangci-lint-action@v5
        with:
          version: latest
          only-new-issues: true
          args: --timeout=5m

  buildtest:
    name: build non-unit tests
    runs-on: teranode-runner
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v5
        with:
          go-version: '1.24.0'
          cache: "false"
      - name: Build Go tests in test directory
        run: make buildtest

  test:
    name: test
    runs-on: teranode-runner
    steps:
      - uses: actions/checkout@v4

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - uses: actions/setup-go@v5
        with:
          go-version: '1.24.0'
          cache: "false"
      - name: Run Go tests
        # run: USE_JSON_REPORTER=true make longtests
        run: make longtests
        continue-on-error: false
      - name: Upload coverage report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: coverage.out
          retention-days: 1
      # - name: Publish Test Summary Results
      #   if: always()
      #   run: npx github-actions-ctrf ctrf-report.json

  smoketest:
    name: smoketest
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24.0'
          cache: "false"

      - name: Run Smoke tests
        run: |
          cd test/smoke && \
          go test -v -count 1 -tags test_smoke_rpc ./...
        env:
          settings_context: ${{ env.SETTINGS_CONTEXT_DEFAULT }}
        continue-on-error: false

  sonarqube:
    name: Sonarqube
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: coverage-report

      - name: Run filename check script
        run: |
          ./scripts/check_filenames.sh

      # Re-run golangci separately without exiting on errors and generating a report for use in Sonar
      - name: golangci-lint
        uses: golangci/golangci-lint-action@v5
        with:
          version: latest
          args: --timeout=5m --issues-exit-code=0 --out-format=checkstyle:golangci-lint-report.xml

      - uses: twingate/github-action@4493ffc3806241aa98194a3fa679f874bce013b5
        with:
          service-key: ${{ secrets.TWINGATE_GH_ACTIONS_SERVICE_KEY }}

      - name: SonarQube Scan
        uses: sonarsource/sonarqube-scan-action@v4.2.1
        env:
          SONAR_TOKEN: ${{ secrets.UBSV_OLD_SONAR_TOKEN }}
          SONAR_HOST_URL: https://sonarqube.ubsv.dev

  # Get version tag
  get_tag:
    runs-on: ubuntu-latest
    steps:
      - name: Determine deployment tag
        id: deployment_tag
        run: |
          if [[ '${{ github.ref_type }}' == 'tag' ]]; then
            export tag=${{ github.ref_name }}
            echo "version tag is $tag"
            echo "id=$tag" >> $GITHUB_OUTPUT
          else
            export tag=${{ github.sha }}
            echo "version tag is $tag"
            echo "id=$tag" >> $GITHUB_OUTPUT
          fi
    outputs:
      deployment_tag: ${{ steps.deployment_tag.outputs.id }}

  # Build for X86 (AMD64)
  build_amd64:
    needs: get_tag
    uses: ./.github/workflows/gke_build.yaml
    secrets: inherit
    with:
      arch: amd64
      repo: teranode
      tag: ${{ needs.get_tag.outputs.deployment_tag }}
      region: eu-north-1
      pull_request: true

  # Build for ARM64 (Graviton and Darwin)
  build_arm64:
    needs: get_tag
    uses: ./.github/workflows/gke_build.yaml
    secrets: inherit
    with:
      arch: arm64
      repo: teranode
      tag: ${{ needs.get_tag.outputs.deployment_tag }}
      region: eu-north-1
      pull_request: true

  # Create docker manifest for multiple architecture tags
  create_manifest:
    needs: [ build_amd64, build_arm64, get_tag ]
    uses: ./.github/workflows/gke_manifest.yaml
    secrets: inherit
    with:
      region: eu-north-1
      repo: teranode
      tag: ${{ needs.get_tag.outputs.deployment_tag }}
      pull_request: true
