name: pullrequest-analysis
on:
  pull_request:

permissions:
  contents: read
  pull-requests: read

env:
  REPO: ubsv
  ECR_REGION: eu-north-1

jobs:
  golangci:
    name: lint
    runs-on: ubsv-runner
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v5
        with:
          go-version: '1.21.0'
      - name: golangci-lint
        uses: golangci/golangci-lint-action@v5
        with:
          version: latest

  test:
    name: test
    runs-on: ubsv-runner
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v5
        with:
          go-version: '1.21.0'
      - name: Run Go tests
        run: make longtests
        continue-on-error: false
      - name: Upload coverage report
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: coverage.out
          retention-days: 1

  smoketest:
    name: smoketest
    runs-on: ubsv-runner
    steps:
      # Setup Docker Buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        # with:
        #   buildkitd-flags: --debug # Debug logs

      # Set up AWS CLI
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.ECR_REGION }}

      # Authenticate Docker to AWS ECR
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
        with:
          mask-password: true

      - uses: actions/checkout@v4

      - uses: actions/setup-go@v5
        with:
          go-version: '1.21.0'

      - name: Run Smoke tests
        run: make smoketests
        continue-on-error: false

  sonarqube:
    name: Sonarqube
    runs-on: ubsv-runner
    needs: test
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: coverage-report

      # Re-run golangci separately without exiting on errors and generating a report for use in Sonar
      - name: golangci-lint
        uses: golangci/golangci-lint-action@v5
        with:
          version: latest
          args: --timeout=5m --issues-exit-code=0 --out-format=checkstyle:golangci-lint-report.xml

      - uses: twingate/github-action@4493ffc3806241aa98194a3fa679f874bce013b5
        with:
          service-key: ${{ secrets.TWINGATE_GH_ACTIONS_SERVICE_KEY }}

      - name: SonarQube Scan
        uses: sonarsource/sonarqube-scan-action@v2.0.2
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: https://sonarqube.ubsv.dev

#  # Get version tag
#  get_tag:
#    runs-on: self-hosted
#    steps:
#      - name: Determine deployment tag
#        id: deployment_tag
#        run: |
#          if [[ '${{ github.ref_type }}' == 'tag' ]]; then
#            export tag=${{ github.ref_name }}
#            echo "version tag is $tag"
#            echo "id=$tag" >> $GITHUB_OUTPUT
#          else
#            export tag=${{ github.sha }}
#            echo "version tag is $tag"
#            echo "id=$tag" >> $GITHUB_OUTPUT
#          fi
#    outputs:
#      deployment_tag: ${{ steps.deployment_tag.outputs.id }}
#
#  # Build for X86 (AMD64)
#  build_amd64:
#    needs: get_tag
#    uses: ./.github/workflows/gke_build.yaml
#    secrets: inherit
#    with:
#      arch: amd64
#      repo: ubsv
#      tag: ${{ needs.get_tag.outputs.deployment_tag }}
#      region: eu-north-1
#
#  # Build for ARM64 (Graviton and Darwin)
#  build_arm64:
#    needs: get_tag
#    uses: ./.github/workflows/gke_build.yaml
#    secrets: inherit
#    with:
#      arch: arm64
#      repo: ubsv
#      tag: ${{ needs.get_tag.outputs.deployment_tag }}
#      region: eu-north-1
