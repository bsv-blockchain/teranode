name: nightly-test-runs
on:
  schedule:
    - cron: "0 0 * * *" # Runs at midnight UTC every day
  workflow_dispatch:

env:
  REPO: teranode
  ECR_REGION: eu-north-1
  SETTINGS_CONTEXT_DEFAULT: default_context
  USE_ECR_IMAGE: true
  GO_VERSION: '1.24.1'

permissions:
  contents: read
  pull-requests: read
  id-token: write

jobs:
  pull-image:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_OIDC_ROLE }}
          aws-region: ${{ env.ECR_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
        with:
          mask-password: true

      - name: Pull Docker Image from ECR (if USE_ECR_IMAGE=true)
        if: env.USE_ECR_IMAGE == 'true'
        run: |
          IMAGE_TAG=latest
          docker pull ${{ steps.login-ecr.outputs.registry }}/${{ env.REPO }}:$IMAGE_TAG
          docker tag ${{ steps.login-ecr.outputs.registry }}/${{ env.REPO }}:$IMAGE_TAG teranode:latest

  run-docker-tests:
    needs: pull-image
    runs-on: teranode-runner
    strategy:
      matrix:
        test_config:
          # TNC Tests
          - test_dir: "test/tnc"
            test_tags: "test_tnc"
            test_suite: "TestTNC1_1TestSuite"
            test_func: "TestVerifyMerkleRootCalculation"
            test_filename: "tnc1_1_test.go"
          - test_dir: "test/tnc"
            test_tags: "test_tnc"
            test_suite: "TestTNC1_2TestSuite"
            test_func: "TestCheckPrevBlockHash"
            test_filename: "tnc1_2_test.go"
          - test_dir: "test/tnc"
            test_tags: "test_tnc"
            test_suite: "TestTNC1_2TestSuite"
            test_func: "TestPrevBlockHashAfterReorg"
            test_filename: "tnc1_2_test.go"
          - test_dir: "test/tnc"
            test_tags: "test_tnc"
            test_suite: "TestTNC1TestSuite"
            test_func: "TestCandidateContainsAllTxs"
            test_filename: "tnc1_3_test.go"
          - test_dir: "test/tnc"
            test_tags: "test_tnc"
            test_suite: "TestTNC1TestSuite"
            test_func: "TestCheckHashPrevBlockCandidate"
            test_filename: "tnc1_3_test.go"
          - test_dir: "test/tnc"
            test_tags: "test_tnc"
            test_suite: "TestTNC1TestSuite"
            test_func: "TestCoinbaseTXAmount"
            test_filename: "tnc1_3_test.go"
          - test_dir: "test/tnc"
            test_tags: "test_tnc"
            test_suite: "TestTNC1TestSuite"
            test_func: "TestCoinbaseTXAmount2"
            test_filename: "tnc1_3_test.go"
          - test_dir: "test/tnc"
            test_tags: "test_tnc"
            test_suite: "TestTNC2_1TestSuite"
            test_func: "TestUniqueCandidateIdentifiers"
            test_filename: "tnc2_1_test.go"
          - test_dir: "test/tnc"
            test_tags: "test_tnc"
            test_suite: "TestTNC2_1TestSuite"
            test_func: "TestConcurrentCandidateIdentifiers"
            test_filename: "tnc2_1_test.go"

          # TNB Tests
          - test_dir: "test/tnb"
            test_tags: "test_tnb"
            test_suite: "TestTNB1TestSuite"
            test_func: "TestSendTxsInBatch"
            test_filename: "tnb1_test.go"
          - test_dir: "test/tnb"
            test_tags: "test_tnb"
            test_suite: "TestTNB1TestSuite"
            test_func: "TestReceiveExtendedFormatTx"
            test_filename: "tnb1_test.go"
          - test_dir: "test/tnb"
            test_tags: "test_tnb"
            test_suite: "TestTNB1TestSuite"
            test_func: "TestNoReformattingRequired"
            test_filename: "tnb1_test.go"
          - test_dir: "test/tnb"
            test_tags: "test_tnb"
            test_suite: "TestTNB2TestSuite"
            test_func: "TestUTXOValidation"
            test_filename: "tnb2_test.go"
          - test_dir: "test/tnb"
            test_tags: "test_tnb"
            test_suite: "TestTNB2TestSuite"
            test_func: "TestScriptValidation"
            test_filename: "tnb2_test.go"
          - test_dir: "test/tnb"
            test_tags: "test_tnb"
            test_suite: "TestTNB6TestSuite"
            test_func: "TestUTXOSetManagement"
            test_filename: "tnb6_test.go"

          # TND Tests
          - test_dir: "test/tnd"
            test_tags: "test_tnd"
            test_suite: "TestTND1_1TestSuite"
            test_func: "TestBlockPropagation"
            test_filename: "tnd1_1_test.go"
          - test_dir: "test/tnd"
            test_tags: "test_tnd"
            test_suite: "TestTND1_1TestSuite"
            test_func: "TestBlockPropagationWithNotifications"
            test_filename: "tnd_1_test.go"

          # TNE Tests
          - test_dir: "test/tne"
            test_tags: "test_tne"
            test_suite: "TestTNE1_1TestSuite"
            test_func: "TestNode_DoNotVerifyTransactionsIfAlreadyVerified"
            test_filename: "tne1_1_test.go"

          # TNA Tests
          - test_dir: "test/tna"
            test_tags: "test_tna"
            test_suite: "TNA1TestSuite"
            test_func: "TestBroadcastNewTxAllNodes"
            test_filename: "tna1_test.go"
          - test_dir: "test/tna"
            test_tags: "test_tna"
            test_suite: "TNA2TestSuite"
            test_func: "TestTxsReceivedAllNodes"
            test_filename: "tna2_test.go"
          - test_dir: "test/tna"
            test_tags: "test_tna"
            test_suite: "TestTNA4TestSuite"
            test_func: "TestBlockBroadcast"
            test_filename: "tna4_test.go"
          - test_dir: "test/tna"
            test_tags: "test_tna"
            test_suite: "TestTNA6TestSuite"
            test_func: "TestAcceptanceNextBlock"
            test_filename: "tna6_test.go"

          # FSM Tests
          - test_dir: "test/fsm"
            test_tags: "test_fsm"
            test_suite: "TestFsmTestSuite"
            test_func: "TestNodeCatchUpState_WithStartAndStopNodes"
            test_filename: "fsm_state.go"
          - test_dir: "test/fsm"
            test_tags: "test_fsm"
            test_suite: "TestFsmTestSuite"
            test_func: "TestNodeCatchUpStateSingleNode_WithP2PSwitch"
            test_filename: "fsm_state.go"
          - test_dir: "test/fsm"
            test_tags: "test_fsm"
            test_suite: "TestFsmTestSuite"
            test_func: "TestNodeCatchUpStateMultipleNodes_WithP2PSwitch"
            test_filename: "fsm_state.go"
          - test_dir: "test/fsm"
            test_tags: "test_fsm"
            test_suite: "TestFsmTestSuite"
            test_func: "TestNodeDoesNotSendMiningCandidate_CatchUpState_WithStartAndStopNodes"
            test_filename: "fsm_state.go"

          # Reorg Tests
          - test_dir: "test/smoke/withdaemon"
            test_tags: "test_docker_daemon"
            test_func: "TestMoveUp"
            test_filename: "reorg_test.go"
          - test_dir: "test/smoke/withdaemon"
            test_tags: "test_docker_daemon"
            test_func: "TestMoveDownMoveUpWhenNewBlockIsGenerated"
            test_filename: "reorg_test.go"
          - test_dir: "test/smoke/withdaemon"
            test_tags: "test_docker_daemon"
            test_func: "TestMoveDownMoveUpWhenNoNewBlockIsGenerated"
            test_filename: "reorg_test.go"
          - test_dir: "test/smoke/withdaemon"
            test_tags: "test_docker_daemon"
            test_func: "TestInvalidBlock"
            test_filename: "reorg_test.go"

          # Block Subsidy Tests
          - test_dir: "test/smoke/withdaemon"
            test_tags: "test_docker_daemon"
            test_func: "TestBlockSubsidy"
            test_filename: "block_subsidy_test.go"

          # Reassign Tests
          - test_dir: "test/smoke/withdaemon"
            test_tags: "test_docker_daemon"
            test_func: "TestShouldAllowReassign"
            test_filename: "reassign_test.go"

          # Spend UTXO Tests
          - test_dir: "test/smoke/withdaemon"
            test_tags: "test_docker_daemon"
            test_func: "TestShouldAllowSpendAllUtxos"
            test_filename: "spend_utxo_test.go"

          # UTXO Tests
          - test_dir: "test/smoke/withdaemon"
            test_tags: "test_docker_daemon"
            test_func: "TestFreezeAndUnfreezeUtxos"
            test_filename: "utxo_test.go"

          #TNx postgres tests - tna2 single tx
          - test_dir: "test/tna/withdaemon"
            test_tags: "test_tna"
            test_func: "TestSingleTransactionPropagationWithUtxoPostgres"
            test_filename: "tna2_pg_test.go"

          #TNx postgres tests - tna2 multiple txs
          - test_dir: "test/tna/withdaemon"
            test_tags: "test_tna"
            test_func: "TestMultipleTransactionsPropagationWithUtxoPostgres"
            test_filename: "tna2_pg_test.go"

          #TNx postgres tests - tna2 concurrent txs
          - test_dir: "test/tna/withdaemon"
            test_tags: "test_tna"
            test_func: "TestConcurrentTransactionsPropagationWithUtxoPostgres"
            test_filename: "tna2_pg_test.go"

          #TNx postgres tests - tnb6
          - test_dir: "test/tnb/withdaemon"
            test_tags: "test_tnb"
            test_func: "TestUnspentTransactionOutputsWithPostgres"
            test_filename: "tnb6_pg_test.go"

          #TNx postgres tests - tnb7
          - test_dir: "test/tnb/withdaemon"
            test_tags: "test_tnb"
            test_func: "TestValidatedTxShouldSpendInputsWithPostgres"
            test_filename: "tnb7_pg_test.go"

      max-parallel: 1
      fail-fast: false

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_OIDC_ROLE }}
          aws-region: ${{ env.ECR_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: false

      - name: Run Test
        run: |
          go clean -testcache
          docker pull ${{ steps.login-ecr.outputs.registry }}/${{ env.REPO }}:latest
          docker tag ${{ steps.login-ecr.outputs.registry }}/${{ env.REPO }}:latest teranode:latest
          go test -v -run "^${{ matrix.test_config.test_suite }}$/${{ matrix.test_config.test_func }}$" -tags ${{ matrix.test_config.test_tags }} ./${{ matrix.test_config.test_dir }}/${{ matrix.test_config.test_filename }}

        env:
          test_dir: ${{ matrix.test_config.test_dir }}
          test_tags: ${{ matrix.test_config.test_tags }}
          settings_context: ${{ matrix.test_config.settings_context || '' }}
          report_name: ${{ matrix.test_config.report_name }}
          GITHUB_ACTIONS: true
        continue-on-error: false

      # - name: Publish Test Summary Results
      #   run: npx github-actions-ctrf ${{ matrix.test_config.report_name }}

  run-daemon-tests:
    runs-on: teranode-runner
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: false

      - name: Run Block Subsidy Tests
        run: |
          go clean -testcache
          go test -v -tags test_nightly ./test/smoke/withdaemon/block_subsidy_test.go
        env:
          GITHUB_ACTIONS: true
        continue-on-error: true

      - name: Run Legacy Tests
        run: |
          go test -v -tags test_nightly ./test/smoke/withdaemon/legacy_test.go
        env:
          GITHUB_ACTIONS: true
        continue-on-error: true

      - name: Run Reassign Tests
        run: |
          go test -v -tags test_nightly ./test/smoke/withdaemon/reassign_test.go
        env:
          GITHUB_ACTIONS: true
        continue-on-error: true

      - name: Run Reorg Tests
        run: |
          go test -v -tags test_nightly ./test/smoke/withdaemon/reorg_test.go
        env:
          GITHUB_ACTIONS: true
        continue-on-error: true

      - name: Run RPC Smoke PG Tests
        run: |
          go test -v -tags test_nightly ./test/smoke/withdaemon/rpc_smoke_pg_test.go
        env:
          GITHUB_ACTIONS: true
        continue-on-error: true

      - name: Run Spend UTXO Tests
        run: |
          go test -v -tags test_nightly ./test/smoke/withdaemon/spend_utxo_test.go
        env:
          GITHUB_ACTIONS: true
        continue-on-error: true

      - name: Run UTXO Tests
        run: |
          go test -v -tags test_nightly ./test/smoke/withdaemon/utxo_test.go
        env:
          GITHUB_ACTIONS: true
        continue-on-error: true

      - name: Check for Test Failures
        if: always()
        run: |
          if [[ "${{ job.status }}" == "failure" ]]; then
            echo "One or more test suites failed"
            exit 1
          fi
