name: test-build-deploy
on:
  push:
    tags:
      - 'v*'
      - 'scaling-v*'
    branches:
      - master
      - staging

env:
  # These variables aren't used for called reusable workflows, so we have to also define 'with' variables below
  REPO: ubsv
  ECR_REGION: eu-north-1

jobs:
  # Get version tag
  get_tag:
    runs-on: self-hosted
    steps:
      - name: Determine deployment tag
        id: deployment_tag
        run: |
          if [[ '${{ github.ref_type }}' == 'tag' ]]; then
            export tag=${{ github.ref_name }}
            echo "version tag is $tag"
            echo "id=$tag" >> $GITHUB_OUTPUT
          else
            export tag=${{ github.sha }}
            echo "version tag is $tag"
            echo "id=$tag" >> $GITHUB_OUTPUT
          fi
    outputs:
      deployment_tag: ${{ steps.deployment_tag.outputs.id }}
  # Tests and code lint
  test_and_lint:
    uses: ./.github/workflows/gke_tests.yaml
    secrets: inherit
  # Build for X86 (AMD64)
  build_amd64:
    needs: [ get_tag ]
    uses: ./.github/workflows/gke_build.yaml
    secrets: inherit
    with:
      arch: amd64
      repo: ubsv
      tag: ${{ needs.get_tag.outputs.deployment_tag }}
      region: eu-north-1
  # Build for ARM64 (Graviton and Darwin)
  build_arm64:
    needs: [ get_tag ]
    uses: ./.github/workflows/gke_build.yaml
    secrets: inherit
    with:
      arch: arm64
      repo: ubsv
      tag: ${{ needs.get_tag.outputs.deployment_tag }}
      region: eu-north-1
  # Create docker manifest for multiple architecture tags
  create_manifest:
    needs: [ test_and_lint, build_amd64, build_arm64, get_tag ]
    uses: ./.github/workflows/gke_manifest.yaml
    secrets: inherit
    with:
      region: eu-north-1
      repo: ubsv
      tag: ${{ needs.get_tag.outputs.deployment_tag }}
  deploy_to_operator:
    runs-on: self-hosted
    needs: [ create_manifest ]
    if: startsWith(github.event.ref, 'refs/tags/v')
    steps:
      - uses: actions/checkout@v3

      # Set up AWS CLI
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4.0.2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-central-1

      # Install and configure kubectl for AWS EKS
      - name: Install kubectl & Login to EKS
        run: |
          
          # kubectl already installed
          kubectl version --client
          rm -rf ~/.kube
          aws eks update-kubeconfig --name aws-ubsv-playground --region eu-central-1
          kubectl cluster-info

      - name: Deploy to Operator
        run: |
          kubectl patch -n t1 --type=merge clusters.teranode.bsvblockchain.org cluster-sample -p '{"spec":{"image":"434394763103.dkr.ecr.eu-north-1.amazonaws.com/ubsv:${{ github.ref_name }}"}}';
          kubectl patch -n t2 --type=merge clusters.teranode.bsvblockchain.org cluster-sample -p '{"spec":{"image":"434394763103.dkr.ecr.eu-north-1.amazonaws.com/ubsv:${{ github.ref_name }}"}}';
          kubectl patch -n t3 --type=merge clusters.teranode.bsvblockchain.org cluster-sample -p '{"spec":{"image":"434394763103.dkr.ecr.eu-north-1.amazonaws.com/ubsv:${{ github.ref_name }}"}}';
  notify_on_failure:
    runs-on: ubuntu-latest
    if: always()
    needs:
      - test_and_lint
      - build_amd64
      - build_arm64
      - create_manifest
      - deploy_to_operator
    steps:
      - name: Notify on failure
        if: ${{ contains(needs.*.result, 'failure') }}
        run: |
          echo "Deployment failed"
          curl -X POST https://hooks.slack.com/triggers/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 \
          -H "Content-Type: application/json" \
          -d '{
            "repo": "${{ github.repository }}",
            "commit": "${{ github.sha }}",
            "build_number": "${{ github.run_id }}",
            "link": "${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}",
          }'