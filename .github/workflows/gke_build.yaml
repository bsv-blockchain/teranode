name: build-teranode
on:
  workflow_call:
    inputs:
      repo:
        description: 'Repo name'
        required: true
        type: string
      tag:
        description: 'Deployment tag'
        required: true
        type: string
      region:
        description: 'AWS region'
        required: true
        type: string
      arch:
        description: 'Architecture to build'
        required: true
        type: string
      pull_request:
        description: 'Is this a pull request?'
        required: false
        type: boolean
        default: false

jobs:
  build-docker:
    name: Build Docker image
    runs-on: ${{ inputs.arch == 'arm64' && fromJSON('[ "teranode-runner-arm" ]') || fromJSON('[ "teranode-runner" ]') }}
    timeout-minutes: 20
    permissions:
      contents: read
      packages: write
    steps:
      - uses: actions/checkout@v4

      # Setup Docker Buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Set up AWS CLI
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ inputs.region }}

      # Authenticate Docker to AWS ECR
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
        with:
          mask-password: true

      # Authenticate Docker to GitHub Container Registry
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Get current cluster ID for base image
      - name: Get Cluster Base ID
        id: base
        run: echo "id=$(cat './deploy/docker/CLUSTER_BASE_ID')" >> $GITHUB_OUTPUT

      # Get current cluster ID for run image
      - name: Get Cluster Run ID
        id: run
        run: echo "id=$(cat './deploy/docker/CLUSTER_RUN_ID')" >> $GITHUB_OUTPUT

      # Get GH repo name
      - name: Extract repository name
        id: repo-name
        run: |
          REPO_NAME=$(echo "${{ github.repository }}" | tr '[:upper:]' '[:lower:]')
          echo "repo=$REPO_NAME" >> $GITHUB_OUTPUT

      # Set latest tag if not a pull request
      - name: Set latest tag
        id: latest
        run: |
          case ${{ inputs.pull_request }} in
            "false")
            echo "tag=${{ steps.login-ecr.outputs.registry }}/${{ inputs.repo }}:latest-${{ inputs.arch }}" >> $GITHUB_OUTPUT
            echo "ghtag=ghcr.io/${{ steps.repo-name.outputs.repo }}:latest-${{ inputs.arch }}" >> $GITHUB_OUTPUT
            ;;
          esac

      # Build and push Docker image to AWS ECR
      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          # cache-from: type=gha
          # cache-to: type=gha,mode=max
          file: ./Dockerfile
          push: true
          build-args: |
            GITHUB_SHA=${{ github.sha }}
            DEBUG=true
            RACE=true
            GITHUB_REF=${{ github.ref_name }}
            ARCH=${{ inputs.arch }}
            VERSION=${{ inputs.tag }}
            BASE_IMG=${{ steps.login-ecr.outputs.registry }}/${{ inputs.repo }}:base-build-${{ steps.base.outputs.id }}
            RUN_IMG=${{ steps.login-ecr.outputs.registry }}/${{ inputs.repo }}:base-run-${{ steps.run.outputs.id }}
          tags: |
            ${{ steps.login-ecr.outputs.registry }}/${{ inputs.repo }}:${{ inputs.tag }}-${{ inputs.arch }}
            ghcr.io/${{ steps.repo-name.outputs.repo }}:${{ inputs.tag }}-${{ inputs.arch }}
            ${{ steps.latest.outputs.tag }}
            ${{ steps.latest.outputs.ghtag }}
          platforms: linux/${{ inputs.arch }}
          labels: |
            org.opencontainers.image.created=${{ github.event.repository.updated_at }}
            org.opencontainers.image.source=${{ github.server_url }}/${{ github.repository }}
            org.opencontainers.image.version=${{ inputs.tag }}
            org.opencontainers.image.revision=${{ github.sha }}
            org.opencontainers.image.licenses=${{ github.event.repository.license.spdx_id }}
