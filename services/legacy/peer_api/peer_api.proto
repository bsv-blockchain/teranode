syntax = "proto3";

option go_package = "./;peer_api";
import "google/protobuf/empty.proto";

package peer_api;

// Add new message types for peer information
// "addr": "host:port",  (string) the ip address and port of the peer
	// "services": "00000001",  (string) the services supported by the peer
	// "lastrecv": n,  (numeric) time the last message was received in seconds since 1 Jan 1970 GMT
	// "lastsend": n,  (numeric) time the last message was sent in seconds since 1 Jan 1970 GMT
	// "bytessent": n,  (numeric) total bytes sent
	// "bytesrecv": n,  (numeric) total bytes received
	// "conntime": n,  (numeric) time the connection was made in seconds since 1 Jan 1970 GMT
	// "pingtime": n,  (numeric) number of microseconds the last ping took
	// "pingwait": n,  (numeric) number of microseconds a queued ping has been waiting for a response
	// "version": n,  (numeric) the protocol version of the peer
	// "subver": "useragent",  (string) the user agent of the peer
	// "inbound": true_or_false,  (boolean) whether or not the peer is an inbound connection
	// "startingheight": n,  (numeric) the latest block height the peer knew about when the connection was established
	// "currentheight": n,  (numeric) the latest block height the peer is known to have relayed since connected
	// "syncnode": true_or_false,  (boolean) whether or not t

message Peer {
  int32 id = 1;
  string addr = 2;
  string addrLocal = 3;
  string services = 4;
  int64 lastSend = 5;
  int64 lastRecv = 6;
  int64 sendSize = 7;
  int64 recvSize = 8;
  int64 sendMemory = 9;
  bool pauseSend = 10;
  bool unpauseSend = 11;
  uint64 bytesSent = 12;
  uint64 bytesReceived = 13;
  int64 avgRecvBandwidth = 14;
  string assocId = 15;
  string streamPolicy = 16;
  bool inbound = 17;
  int64 connTime = 18;
  int64 pingTime = 19;
  int64 timeOffset = 20;
  uint32 version = 21;
  string subVer = 22;
  int32 startingHeight = 23;
  int32 currentHeight = 24;
  int32 banscore = 25;
  bool whitelisted = 26;
  int64 feeFilter = 27;
  // ConnTime:       sp.ConnTime().Unix(),
	// 		PingTime:       sp.PingTime(),
	// 		TimeOffset:     sp.TimeOffset(),
	// 		Version:        sp.Version(),
	// 		SubVer:         sp.SubVer(),
	// 		StartingHeight: sp.StartingHeight(),
	// 		CurrentHeight:  sp.CurrentHeight(),
	// 		Banscore:       sp.Banscore(),
	// 		Whitelisted:    sp.Whitelisted(),
	// 		FeeFilter:      sp.FeeFilter
  }

	// 			"relaytxes":    true,
  //   "lastsend":     1727097288,
  //   "lastrecv":     1727097288,
  //   "sendsize":     0,
  //   "recvsize":     0,
  //   "sendmemory":   0,
  //   "pausesend":    false,
  //   "unpausesend":  false,
  //   "bytessent":    158838738,
  //   "bytesrecv":    17731391382,
  //   "avgrecvbw":    41,
  //   "associd":      "1f75f603-8fa2-4dbe-b68c-d686adbf5f8d",
  //   "streampolicy": "BlockPriority",

  message GetPeersResponse {
    repeated Peer peers = 1;
  }

  message GetPeerCountResponse {
    int32 count = 1;
  }

  message BanPeerRequest {
      string addr = 1;
      int64 until = 2;
  }
  
  message BanPeerResponse {
      bool ok = 1;
  }

  message UnbanPeerRequest {
      string addr = 1;
  }

  message UnbanPeerResponse {
      bool ok = 1;
  }

  message IsBannedRequest {
      string ipOrSubnet = 1;
  }

  message IsBannedResponse {
      bool isBanned = 1;
  }

  message ListBannedResponse {
      repeated string banned = 1;
  }

  message ClearBannedResponse {
      bool ok = 1;
  }
  
  // Add new service for peer operations
  service PeerService {
    rpc GetPeers(google.protobuf.Empty) returns (GetPeersResponse) {}
    rpc BanPeer(BanPeerRequest) returns (BanPeerResponse) {}
    rpc UnbanPeer(UnbanPeerRequest) returns (UnbanPeerResponse) {}
    rpc IsBanned(IsBannedRequest) returns (IsBannedResponse) {}
    rpc ListBanned(google.protobuf.Empty) returns (ListBannedResponse) {}
    rpc ClearBanned(google.protobuf.Empty) returns (ClearBannedResponse) {}
  }
  