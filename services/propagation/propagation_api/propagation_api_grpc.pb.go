// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.24.3
// source: services/propagation/propagation_api/propagation_api.proto

package propagation_api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	PropagationAPI_Health_FullMethodName                   = "/propagation_api.PropagationAPI/Health"
	PropagationAPI_ProcessTransaction_FullMethodName       = "/propagation_api.PropagationAPI/ProcessTransaction"
	PropagationAPI_ProcessTransactionStream_FullMethodName = "/propagation_api.PropagationAPI/ProcessTransactionStream"
	PropagationAPI_ProcessTransactionDebug_FullMethodName  = "/propagation_api.PropagationAPI/ProcessTransactionDebug"
)

// PropagationAPIClient is the client API for PropagationAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PropagationAPIClient interface {
	// Health returns the health of the API.
	Health(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (*HealthResponse, error)
	ProcessTransaction(ctx context.Context, in *ProcessTransactionRequest, opts ...grpc.CallOption) (*EmptyMessage, error)
	ProcessTransactionStream(ctx context.Context, opts ...grpc.CallOption) (PropagationAPI_ProcessTransactionStreamClient, error)
	ProcessTransactionDebug(ctx context.Context, in *ProcessTransactionRequest, opts ...grpc.CallOption) (*EmptyMessage, error)
}

type propagationAPIClient struct {
	cc grpc.ClientConnInterface
}

func NewPropagationAPIClient(cc grpc.ClientConnInterface) PropagationAPIClient {
	return &propagationAPIClient{cc}
}

func (c *propagationAPIClient) Health(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (*HealthResponse, error) {
	out := new(HealthResponse)
	err := c.cc.Invoke(ctx, PropagationAPI_Health_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *propagationAPIClient) ProcessTransaction(ctx context.Context, in *ProcessTransactionRequest, opts ...grpc.CallOption) (*EmptyMessage, error) {
	out := new(EmptyMessage)
	err := c.cc.Invoke(ctx, PropagationAPI_ProcessTransaction_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *propagationAPIClient) ProcessTransactionStream(ctx context.Context, opts ...grpc.CallOption) (PropagationAPI_ProcessTransactionStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &PropagationAPI_ServiceDesc.Streams[0], PropagationAPI_ProcessTransactionStream_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &propagationAPIProcessTransactionStreamClient{stream}
	return x, nil
}

type PropagationAPI_ProcessTransactionStreamClient interface {
	Send(*ProcessTransactionRequest) error
	Recv() (*EmptyMessage, error)
	grpc.ClientStream
}

type propagationAPIProcessTransactionStreamClient struct {
	grpc.ClientStream
}

func (x *propagationAPIProcessTransactionStreamClient) Send(m *ProcessTransactionRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *propagationAPIProcessTransactionStreamClient) Recv() (*EmptyMessage, error) {
	m := new(EmptyMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *propagationAPIClient) ProcessTransactionDebug(ctx context.Context, in *ProcessTransactionRequest, opts ...grpc.CallOption) (*EmptyMessage, error) {
	out := new(EmptyMessage)
	err := c.cc.Invoke(ctx, PropagationAPI_ProcessTransactionDebug_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PropagationAPIServer is the server API for PropagationAPI service.
// All implementations must embed UnimplementedPropagationAPIServer
// for forward compatibility
type PropagationAPIServer interface {
	// Health returns the health of the API.
	Health(context.Context, *EmptyMessage) (*HealthResponse, error)
	ProcessTransaction(context.Context, *ProcessTransactionRequest) (*EmptyMessage, error)
	ProcessTransactionStream(PropagationAPI_ProcessTransactionStreamServer) error
	ProcessTransactionDebug(context.Context, *ProcessTransactionRequest) (*EmptyMessage, error)
	mustEmbedUnimplementedPropagationAPIServer()
}

// UnimplementedPropagationAPIServer must be embedded to have forward compatible implementations.
type UnimplementedPropagationAPIServer struct {
}

func (UnimplementedPropagationAPIServer) Health(context.Context, *EmptyMessage) (*HealthResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Health not implemented")
}
func (UnimplementedPropagationAPIServer) ProcessTransaction(context.Context, *ProcessTransactionRequest) (*EmptyMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProcessTransaction not implemented")
}
func (UnimplementedPropagationAPIServer) ProcessTransactionStream(PropagationAPI_ProcessTransactionStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method ProcessTransactionStream not implemented")
}
func (UnimplementedPropagationAPIServer) ProcessTransactionDebug(context.Context, *ProcessTransactionRequest) (*EmptyMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProcessTransactionDebug not implemented")
}
func (UnimplementedPropagationAPIServer) mustEmbedUnimplementedPropagationAPIServer() {}

// UnsafePropagationAPIServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PropagationAPIServer will
// result in compilation errors.
type UnsafePropagationAPIServer interface {
	mustEmbedUnimplementedPropagationAPIServer()
}

func RegisterPropagationAPIServer(s grpc.ServiceRegistrar, srv PropagationAPIServer) {
	s.RegisterService(&PropagationAPI_ServiceDesc, srv)
}

func _PropagationAPI_Health_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PropagationAPIServer).Health(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PropagationAPI_Health_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PropagationAPIServer).Health(ctx, req.(*EmptyMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _PropagationAPI_ProcessTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProcessTransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PropagationAPIServer).ProcessTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PropagationAPI_ProcessTransaction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PropagationAPIServer).ProcessTransaction(ctx, req.(*ProcessTransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PropagationAPI_ProcessTransactionStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(PropagationAPIServer).ProcessTransactionStream(&propagationAPIProcessTransactionStreamServer{stream})
}

type PropagationAPI_ProcessTransactionStreamServer interface {
	Send(*EmptyMessage) error
	Recv() (*ProcessTransactionRequest, error)
	grpc.ServerStream
}

type propagationAPIProcessTransactionStreamServer struct {
	grpc.ServerStream
}

func (x *propagationAPIProcessTransactionStreamServer) Send(m *EmptyMessage) error {
	return x.ServerStream.SendMsg(m)
}

func (x *propagationAPIProcessTransactionStreamServer) Recv() (*ProcessTransactionRequest, error) {
	m := new(ProcessTransactionRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _PropagationAPI_ProcessTransactionDebug_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProcessTransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PropagationAPIServer).ProcessTransactionDebug(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PropagationAPI_ProcessTransactionDebug_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PropagationAPIServer).ProcessTransactionDebug(ctx, req.(*ProcessTransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PropagationAPI_ServiceDesc is the grpc.ServiceDesc for PropagationAPI service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PropagationAPI_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "propagation_api.PropagationAPI",
	HandlerType: (*PropagationAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Health",
			Handler:    _PropagationAPI_Health_Handler,
		},
		{
			MethodName: "ProcessTransaction",
			Handler:    _PropagationAPI_ProcessTransaction_Handler,
		},
		{
			MethodName: "ProcessTransactionDebug",
			Handler:    _PropagationAPI_ProcessTransactionDebug_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ProcessTransactionStream",
			Handler:       _PropagationAPI_ProcessTransactionStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "services/propagation/propagation_api/propagation_api.proto",
}
