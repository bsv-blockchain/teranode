// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.24.4
// source: services/seeder/seeder_api/seeder_api.proto

package seeder_api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	SeederAPI_Health_FullMethodName                       = "/seeder_api.SeederAPI/Health"
	SeederAPI_CreateSpendableTransactions_FullMethodName  = "/seeder_api.SeederAPI/CreateSpendableTransactions"
	SeederAPI_NextSpendableTransaction_FullMethodName     = "/seeder_api.SeederAPI/NextSpendableTransaction"
	SeederAPI_ShowAllSpendableTransactions_FullMethodName = "/seeder_api.SeederAPI/ShowAllSpendableTransactions"
)

// SeederAPIClient is the client API for SeederAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SeederAPIClient interface {
	// Health returns the health of the API.
	Health(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*HealthResponse, error)
	CreateSpendableTransactions(ctx context.Context, in *CreateSpendableTransactionsRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	NextSpendableTransaction(ctx context.Context, in *NextSpendableTransactionRequest, opts ...grpc.CallOption) (*NextSpendableTransactionResponse, error)
	ShowAllSpendableTransactions(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (SeederAPI_ShowAllSpendableTransactionsClient, error)
}

type seederAPIClient struct {
	cc grpc.ClientConnInterface
}

func NewSeederAPIClient(cc grpc.ClientConnInterface) SeederAPIClient {
	return &seederAPIClient{cc}
}

func (c *seederAPIClient) Health(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*HealthResponse, error) {
	out := new(HealthResponse)
	err := c.cc.Invoke(ctx, SeederAPI_Health_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *seederAPIClient) CreateSpendableTransactions(ctx context.Context, in *CreateSpendableTransactionsRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, SeederAPI_CreateSpendableTransactions_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *seederAPIClient) NextSpendableTransaction(ctx context.Context, in *NextSpendableTransactionRequest, opts ...grpc.CallOption) (*NextSpendableTransactionResponse, error) {
	out := new(NextSpendableTransactionResponse)
	err := c.cc.Invoke(ctx, SeederAPI_NextSpendableTransaction_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *seederAPIClient) ShowAllSpendableTransactions(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (SeederAPI_ShowAllSpendableTransactionsClient, error) {
	stream, err := c.cc.NewStream(ctx, &SeederAPI_ServiceDesc.Streams[0], SeederAPI_ShowAllSpendableTransactions_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &seederAPIShowAllSpendableTransactionsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type SeederAPI_ShowAllSpendableTransactionsClient interface {
	Recv() (*NextSpendableTransactionResponse, error)
	grpc.ClientStream
}

type seederAPIShowAllSpendableTransactionsClient struct {
	grpc.ClientStream
}

func (x *seederAPIShowAllSpendableTransactionsClient) Recv() (*NextSpendableTransactionResponse, error) {
	m := new(NextSpendableTransactionResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// SeederAPIServer is the server API for SeederAPI service.
// All implementations must embed UnimplementedSeederAPIServer
// for forward compatibility
type SeederAPIServer interface {
	// Health returns the health of the API.
	Health(context.Context, *emptypb.Empty) (*HealthResponse, error)
	CreateSpendableTransactions(context.Context, *CreateSpendableTransactionsRequest) (*emptypb.Empty, error)
	NextSpendableTransaction(context.Context, *NextSpendableTransactionRequest) (*NextSpendableTransactionResponse, error)
	ShowAllSpendableTransactions(*emptypb.Empty, SeederAPI_ShowAllSpendableTransactionsServer) error
	mustEmbedUnimplementedSeederAPIServer()
}

// UnimplementedSeederAPIServer must be embedded to have forward compatible implementations.
type UnimplementedSeederAPIServer struct {
}

func (UnimplementedSeederAPIServer) Health(context.Context, *emptypb.Empty) (*HealthResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Health not implemented")
}
func (UnimplementedSeederAPIServer) CreateSpendableTransactions(context.Context, *CreateSpendableTransactionsRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSpendableTransactions not implemented")
}
func (UnimplementedSeederAPIServer) NextSpendableTransaction(context.Context, *NextSpendableTransactionRequest) (*NextSpendableTransactionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NextSpendableTransaction not implemented")
}
func (UnimplementedSeederAPIServer) ShowAllSpendableTransactions(*emptypb.Empty, SeederAPI_ShowAllSpendableTransactionsServer) error {
	return status.Errorf(codes.Unimplemented, "method ShowAllSpendableTransactions not implemented")
}
func (UnimplementedSeederAPIServer) mustEmbedUnimplementedSeederAPIServer() {}

// UnsafeSeederAPIServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SeederAPIServer will
// result in compilation errors.
type UnsafeSeederAPIServer interface {
	mustEmbedUnimplementedSeederAPIServer()
}

func RegisterSeederAPIServer(s grpc.ServiceRegistrar, srv SeederAPIServer) {
	s.RegisterService(&SeederAPI_ServiceDesc, srv)
}

func _SeederAPI_Health_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SeederAPIServer).Health(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SeederAPI_Health_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SeederAPIServer).Health(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _SeederAPI_CreateSpendableTransactions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSpendableTransactionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SeederAPIServer).CreateSpendableTransactions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SeederAPI_CreateSpendableTransactions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SeederAPIServer).CreateSpendableTransactions(ctx, req.(*CreateSpendableTransactionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SeederAPI_NextSpendableTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NextSpendableTransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SeederAPIServer).NextSpendableTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SeederAPI_NextSpendableTransaction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SeederAPIServer).NextSpendableTransaction(ctx, req.(*NextSpendableTransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SeederAPI_ShowAllSpendableTransactions_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(emptypb.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SeederAPIServer).ShowAllSpendableTransactions(m, &seederAPIShowAllSpendableTransactionsServer{stream})
}

type SeederAPI_ShowAllSpendableTransactionsServer interface {
	Send(*NextSpendableTransactionResponse) error
	grpc.ServerStream
}

type seederAPIShowAllSpendableTransactionsServer struct {
	grpc.ServerStream
}

func (x *seederAPIShowAllSpendableTransactionsServer) Send(m *NextSpendableTransactionResponse) error {
	return x.ServerStream.SendMsg(m)
}

// SeederAPI_ServiceDesc is the grpc.ServiceDesc for SeederAPI service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SeederAPI_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "seeder_api.SeederAPI",
	HandlerType: (*SeederAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Health",
			Handler:    _SeederAPI_Health_Handler,
		},
		{
			MethodName: "CreateSpendableTransactions",
			Handler:    _SeederAPI_CreateSpendableTransactions_Handler,
		},
		{
			MethodName: "NextSpendableTransaction",
			Handler:    _SeederAPI_NextSpendableTransaction_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ShowAllSpendableTransactions",
			Handler:       _SeederAPI_ShowAllSpendableTransactions_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "services/seeder/seeder_api/seeder_api.proto",
}
