syntax = "proto3";

option go_package = ".;blockchain_api";

package blockchain_api;

import "google/protobuf/timestamp.proto";
import "google/protobuf/empty.proto";

service BlockchainAPI {
  // Health returns the health of the API.
  rpc Health (google.protobuf.Empty) returns (HealthResponse) {}

  // AddBlock adds a block to the blockchain.  This will be called by BlockValidator.
  rpc AddBlock (AddBlockRequest) returns (google.protobuf.Empty) {}
  rpc GetBlock (GetBlockRequest) returns (GetBlockResponse) {}
  rpc GetMedianTime(GetMedianTimeRequest) returns (GetMedianTimeResponse) {}
  rpc SubscribeChainTip (google.protobuf.Empty) returns (stream ChainTipResponse) {}
}

// swagger:model HealthResponse
message HealthResponse {
  bool ok = 1;
  string details = 2;
  google.protobuf.Timestamp timestamp = 3;
}

// swagger:model AddBlockRequest
message AddBlockRequest {
  bytes header = 1;
  repeated bytes subtree_hashes = 2; // The fist subtree will contain the coinbase txid (not the placeholder)
}

// swagger:model GetBlockRequest
message GetBlockRequest {
  bytes hash = 1;
}

// swagger:model GetBlockResponse
message GetBlockResponse {
  bytes header = 1;
  repeated bytes subtree_hashes = 2; // The fist subtree will contain the coinbase txid (not the placeholder)
}

// swagger:model GetMedianTimeRequest
message GetMedianTimeRequest {
  bytes blockHash = 1;
}

// swagger:model GetMedianTimeResponse
message GetMedianTimeResponse {
  repeated uint32 block_header_time = 1; // This will return the nTimes of the last 11 (+1) blocks
}

// swagger:model ChainTipResponse
message ChainTipResponse {
  bytes blockHeader = 1;
  uint64 height = 2;
}
