syntax = "proto3";

option go_package = "./;blockchain_api";

package blockchain_api;

import "google/protobuf/timestamp.proto";
import "google/protobuf/empty.proto";
import "model/model.proto";

service BlockchainAPI {
  // Health returns the health of the API.
  rpc HealthGRPC (google.protobuf.Empty) returns (HealthResponse) {}

  // AddBlock adds a block to the blockchain.  This will be called by BlockValidator.
  rpc AddBlock (AddBlockRequest) returns (google.protobuf.Empty) {}
  rpc GetBlock (GetBlockRequest) returns (GetBlockResponse) {}
  rpc GetBlocks (GetBlocksRequest) returns (GetBlocksResponse) {}
  rpc GetBlockByHeight (GetBlockByHeightRequest) returns (GetBlockResponse) {}
  rpc GetBlockStats (google.protobuf.Empty) returns (model.BlockStats) {}
  rpc GetBlockGraphData (GetBlockGraphDataRequest) returns (model.BlockDataPoints) {}
  rpc GetLastNBlocks (GetLastNBlocksRequest) returns (GetLastNBlocksResponse) {}
  rpc GetSuitableBlock (GetSuitableBlockRequest) returns (GetSuitableBlockResponse) {}
  rpc GetHashOfAncestorBlock (GetHashOfAncestorBlockRequest) returns (GetHashOfAncestorBlockResponse) {}
  rpc GetNextWorkRequired (GetNextWorkRequiredRequest) returns (GetNextWorkRequiredResponse) {}
  rpc GetBlockExists (GetBlockRequest) returns (GetBlockExistsResponse) {}
  rpc GetBlockHeaders(GetBlockHeadersRequest) returns (GetBlockHeadersResponse) {}
  rpc GetBlockHeadersFromTill(GetBlockHeadersFromTillRequest) returns (GetBlockHeadersResponse) {}
  rpc GetBlockHeadersFromHeight(GetBlockHeadersFromHeightRequest) returns (GetBlockHeadersFromHeightResponse) {}
  rpc GetBlockHeadersByHeight(GetBlockHeadersByHeightRequest) returns (GetBlockHeadersByHeightResponse) {}
  rpc GetBlockHeaderIDs(GetBlockHeadersRequest) returns (GetBlockHeaderIDsResponse) {}
  rpc GetBestBlockHeader(google.protobuf.Empty) returns (GetBlockHeaderResponse) {}
  rpc CheckBlockIsInCurrentChain(CheckBlockIsCurrentChainRequest) returns (CheckBlockIsCurrentChainResponse) {}
  rpc GetBlockHeader(GetBlockHeaderRequest) returns (GetBlockHeaderResponse) {}
  rpc InvalidateBlock(InvalidateBlockRequest) returns (google.protobuf.Empty) {}
  rpc RevalidateBlock(RevalidateBlockRequest) returns (google.protobuf.Empty) {}
  rpc Subscribe (SubscribeRequest) returns (stream Notification) {}
  rpc SendNotification(Notification) returns (google.protobuf.Empty) {}
  rpc GetState(GetStateRequest) returns (StateResponse) {}
  rpc SetState(SetStateRequest) returns (google.protobuf.Empty) {}
  rpc SetBlockMinedSet(SetBlockMinedSetRequest) returns (google.protobuf.Empty) {}
  rpc GetBlocksMinedNotSet(google.protobuf.Empty) returns (GetBlocksMinedNotSetResponse) {}
  rpc SetBlockSubtreesSet(SetBlockSubtreesSetRequest) returns (google.protobuf.Empty) {}
  rpc GetBlocksSubtreesNotSet(google.protobuf.Empty) returns (GetBlocksSubtreesNotSetResponse) {}
  rpc SendFSMEvent(SendFSMEventRequest) returns (GetFSMStateResponse) {}
  rpc GetFSMCurrentState(google.protobuf.Empty) returns (GetFSMStateResponse) {}
  rpc WaitFSMToTransitionToGivenState(WaitFSMToTransitionRequest) returns (google.protobuf.Empty) {}
  rpc Run(google.protobuf.Empty) returns (google.protobuf.Empty) {}
  rpc CatchUpTransactions(google.protobuf.Empty) returns (google.protobuf.Empty) {}
  rpc CatchUpBlocks(google.protobuf.Empty) returns (google.protobuf.Empty) {}
  rpc Restore(google.protobuf.Empty) returns (google.protobuf.Empty) {}
  rpc LegacySync(google.protobuf.Empty) returns (google.protobuf.Empty) {}
  rpc Unavailable(google.protobuf.Empty) returns (google.protobuf.Empty) {}
  rpc GetBlockLocator(GetBlockLocatorRequest) returns (GetBlockLocatorResponse) {}
  rpc LocateBlockHeaders(LocateBlockHeadersRequest) returns (LocateBlockHeadersResponse) {}
  rpc GetBestHeightAndTime(google.protobuf.Empty) returns (GetBestHeightAndTimeResponse) {}
}

// swagger:model HealthResponse
message HealthResponse {
  bool ok = 1;
  string details = 2;
  google.protobuf.Timestamp timestamp = 3;
}

// swagger:model AddBlockRequest
message AddBlockRequest {
  bytes header = 1;
  repeated bytes subtree_hashes = 2; // The fist subtree will contain the coinbase txid (not the placeholder)
  bytes coinbase_tx = 3;
  uint64 transaction_count = 4;
  uint64 size_in_bytes = 5;
  bool external = 6;
  string peer_id = 7;
}

// swagger:model GetBlockRequest
message GetBlockRequest {
  bytes hash = 1;
}

// swagger:model GetBlocksRequest
message GetBlocksRequest {
  bytes hash = 1;
  uint32 count = 2;
}

// swagger:model GetBlocksResponse
message GetBlocksResponse {
  repeated bytes blocks = 1;
}

// swagger:model GetBlockByHeightRequest
message GetBlockByHeightRequest {
  uint32 height = 1;
}

// swagger:model GetBlockInChainByHeightHashRequest
message GetBlockInChainByHeightHashRequest {
  uint32 height = 1;
  bytes start_hash = 2;
}

// swagger:model GetBlockResponse
message GetBlockResponse {
  bytes header = 1;
  uint32 height = 2;
  bytes coinbase_tx = 3;
  uint64 transaction_count = 4;
  repeated bytes subtree_hashes = 5;
  uint64 size_in_bytes = 6;
  uint32 id = 7;
}

// swagger:model GetBlockInChainByHeightHashResponse
message GetFullBlockResponse {
  bytes full_block_bytes = 1;
}

// swagger:model GetBlockGraphDataRequest
message GetBlockGraphDataRequest {
  uint64 period_millis = 1;
}

// swagger:model GetBlockResponse
message GetBlockExistsResponse {
  bool exists = 1;
}

// swagger:model GetMedianTimeRequest
message GetMedianTimeRequest {
  bytes blockHash = 1;
}

// swagger:model GetBlockHeadersRequest
message GetBlockHeadersRequest {
  bytes startHash = 1;
  uint64 numberOfHeaders = 2;
}

// swagger:model GetBlockHeadersResponse
message GetBlockHeadersResponse {
  repeated bytes blockHeaders = 1;
  repeated bytes metas = 2;
}

// swagger:model GetBlockHeadersFromTillRequest
message GetBlockHeadersFromTillRequest {
  bytes startHash = 1;
  bytes endHash = 2;
}

// swagger:model GetBlockHeadersFromHeightRequest
message GetBlockHeadersFromHeightRequest {
  uint32 startHeight = 1;
  uint32 limit = 2;
}

// swagger:model GetBlockHeadersFromHeightResponse
message GetBlockHeadersFromHeightResponse {
  repeated bytes blockHeaders = 1;
  repeated bytes metas = 2;
}

// swagger:model GetBlockHeadersByHeightRequest
message GetBlockHeadersByHeightRequest {
  uint32 startHeight = 1;
  uint32 endHeight = 2;
}

// swagger:model GetBlockHeadersByHeightResponse
message GetBlockHeadersByHeightResponse {
  repeated bytes blockHeaders = 1;
  repeated bytes metas = 2;
}

// swagger:model GetBlockHeaderIDsResponse
message GetBlockHeaderIDsResponse {
  repeated uint32 ids = 1;
}

// swagger:model GetMedianTimeResponse
message GetMedianTimeResponse {
  repeated uint32 block_header_time = 1; // This will return the nTimes of the last 11 (+1) blocks
}

// swagger:model GetBlockHeaderRequest
message GetBlockHeaderRequest {
  bytes blockHash = 1;
}

// swagger:model CheckBlockIsCurrentChainRequest
message CheckBlockIsCurrentChainRequest {
  repeated uint32 blockIDs = 1;
}

// swagger:model InvalidateBlockRequest
message InvalidateBlockRequest {
  bytes blockHash = 1;
}

// swagger:model RevalidateBlockRequest
message RevalidateBlockRequest {
  bytes blockHash = 1;
}

// swagger:model GetBlockHeaderResponse
message GetBlockHeaderResponse {
  bytes blockHeader = 1;
  uint32 height = 2;
  uint64 tx_count = 3;
  uint64 size_in_bytes = 4;
  string miner = 5;
  uint32 block_time = 6;
  uint32 timestamp = 7;
  bytes chain_work = 8;
}

// swagger:model CheckBlockIsCurrentChainResponse
message CheckBlockIsCurrentChainResponse {
  bool isPartOfCurrentChain = 1;
}

// swagger:model SubscribeRequest
message SubscribeRequest {
  string source = 1;
}

// swagger:model Notification
message Notification {
  model.NotificationType type = 1;
  bytes hash = 2;
  string base_URL = 3;
  NotificationMetadata metadata = 4;
}

// swagger:model NotificationMetadata
message NotificationMetadata {
  //define a map of string to string
  map<string, string> metadata = 1;
}

// swagger:model StateRequest
message GetStateRequest {
  string key = 1;
}

// swagger:model StateResponse
message StateResponse {
  bytes data = 1;
}

// swagger:model SetStateRequest
message SetStateRequest {
  string key = 1;
  bytes data = 2;
}

// swagger:model GetLastNBlocksRequest
message GetLastNBlocksRequest {
  int64 numberOfBlocks = 1;
  bool includeOrphans = 2;
  uint32 fromHeight = 3;
}

// swagger:model GetLastNBlocksResponse
message GetLastNBlocksResponse {
  repeated model.BlockInfo blocks = 1;
}

// swagger:model GetSuitableBlockRequest
message GetSuitableBlockRequest {
  bytes hash = 1;
}

// swagger:model GetSuitableBlockResponse
message GetSuitableBlockResponse {
  model.SuitableBlock block = 1;
}

// swagger:model GetHashOfAncestorBlockRequest
message GetHashOfAncestorBlockRequest {
  bytes hash = 1;
  uint32 depth =2;
}

// swagger:model GetHashOfAncestorBlockResponse
message GetHashOfAncestorBlockResponse {
  bytes hash = 1;
}

// swagger:model GGetNextWorkRequiredRequest
message GetNextWorkRequiredRequest {
  bytes blockHash = 1;
}

// swagger:model GGetNextWorkRequiredResponse
message GetNextWorkRequiredResponse {
  bytes bits = 1;
}

// swagger:model SetBlockMinedSetRequest
message SetBlockMinedSetRequest {
  bytes blockHash = 1;
}

// swagger:model GetBlocksMinedNotSetResponse
message GetBlocksMinedNotSetResponse {
  repeated bytes blockBytes = 1;
}

// swagger:model SetBlockSubtreesSetRequest
message SetBlockSubtreesSetRequest {
  bytes blockHash = 1;
}

// swagger:model GetBlocksSubtreesNotSetResponse
message GetBlocksSubtreesNotSetResponse {
  repeated bytes blockBytes = 1;
}

// swagger:model GetFSMStateResponse
message GetFSMStateResponse {
  FSMStateType state = 1;
}

// swagger:model WaitFSMToTransitionRequest
message WaitFSMToTransitionRequest {
  FSMStateType state = 1;
}

// swagger:model SendFSMEventRequest
message SendFSMEventRequest {
  FSMEventType event = 1;
}

// swagger:enum FSMEventType
enum FSMEventType {
  STOP = 0;
  RUN = 1;
  // MINE = 2;
  CATCHUPBLOCKS = 3;
  CATCHUPTXS = 4;
  RESTORE = 5;
  LEGACYSYNC = 6;
  UNAVAILABLE = 7;
}

// swagger:enum FSMStateType
enum FSMStateType {
  STOPPED = 0;
  RUNNING = 1;
  // MINING = 2;
  CATCHINGBLOCKS = 3;
  CATCHINGTXS = 4;
  RESTORING = 5;
  LEGACYSYNCING =6;
  RESOURCE_UNAVAILABLE = 7;
}

message GetBlockLocatorRequest {
  bytes hash = 1;
  uint32 height = 2;
}

message GetBlockLocatorResponse {
  repeated bytes locator = 1;
}

message LocateBlockHeadersRequest {
  repeated bytes locator = 1;
  bytes hash_stop = 2;
  uint32 max_hashes = 3;
}

message LocateBlockHeadersResponse {
  repeated bytes block_headers = 1;
}

// swagger:model GetBestHeightAndTimeResponse
message GetBestHeightAndTimeResponse {
  uint32 height = 1;
  uint32 time = 2;
}

