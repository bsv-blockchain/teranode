// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: services/blockchain/blockchain_api/blockchain_api.proto

package blockchain_api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	BlockchainAPI_Health_FullMethodName   = "/blockchain_api.BlockchainAPI/Health"
	BlockchainAPI_AddBlock_FullMethodName = "/blockchain_api.BlockchainAPI/AddBlock"
	BlockchainAPI_GetBlock_FullMethodName = "/blockchain_api.BlockchainAPI/GetBlock"
	BlockchainAPI_ChainTip_FullMethodName = "/blockchain_api.BlockchainAPI/ChainTip"
)

// BlockchainAPIClient is the client API for BlockchainAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BlockchainAPIClient interface {
	// Health returns the health of the API.
	Health(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*HealthResponse, error)
	AddBlock(ctx context.Context, in *AddBlockRequest, opts ...grpc.CallOption) (*AddBlockResponse, error)
	GetBlock(ctx context.Context, in *GetBlockRequest, opts ...grpc.CallOption) (*GetBlockResponse, error)
	ChainTip(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ChainTipResponse, error)
}

type blockchainAPIClient struct {
	cc grpc.ClientConnInterface
}

func NewBlockchainAPIClient(cc grpc.ClientConnInterface) BlockchainAPIClient {
	return &blockchainAPIClient{cc}
}

func (c *blockchainAPIClient) Health(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*HealthResponse, error) {
	out := new(HealthResponse)
	err := c.cc.Invoke(ctx, BlockchainAPI_Health_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blockchainAPIClient) AddBlock(ctx context.Context, in *AddBlockRequest, opts ...grpc.CallOption) (*AddBlockResponse, error) {
	out := new(AddBlockResponse)
	err := c.cc.Invoke(ctx, BlockchainAPI_AddBlock_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blockchainAPIClient) GetBlock(ctx context.Context, in *GetBlockRequest, opts ...grpc.CallOption) (*GetBlockResponse, error) {
	out := new(GetBlockResponse)
	err := c.cc.Invoke(ctx, BlockchainAPI_GetBlock_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blockchainAPIClient) ChainTip(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ChainTipResponse, error) {
	out := new(ChainTipResponse)
	err := c.cc.Invoke(ctx, BlockchainAPI_ChainTip_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BlockchainAPIServer is the server API for BlockchainAPI service.
// All implementations must embed UnimplementedBlockchainAPIServer
// for forward compatibility
type BlockchainAPIServer interface {
	// Health returns the health of the API.
	Health(context.Context, *emptypb.Empty) (*HealthResponse, error)
	AddBlock(context.Context, *AddBlockRequest) (*AddBlockResponse, error)
	GetBlock(context.Context, *GetBlockRequest) (*GetBlockResponse, error)
	ChainTip(context.Context, *emptypb.Empty) (*ChainTipResponse, error)
	mustEmbedUnimplementedBlockchainAPIServer()
}

// UnimplementedBlockchainAPIServer must be embedded to have forward compatible implementations.
type UnimplementedBlockchainAPIServer struct {
}

func (UnimplementedBlockchainAPIServer) Health(context.Context, *emptypb.Empty) (*HealthResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Health not implemented")
}
func (UnimplementedBlockchainAPIServer) AddBlock(context.Context, *AddBlockRequest) (*AddBlockResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddBlock not implemented")
}
func (UnimplementedBlockchainAPIServer) GetBlock(context.Context, *GetBlockRequest) (*GetBlockResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBlock not implemented")
}
func (UnimplementedBlockchainAPIServer) ChainTip(context.Context, *emptypb.Empty) (*ChainTipResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChainTip not implemented")
}
func (UnimplementedBlockchainAPIServer) mustEmbedUnimplementedBlockchainAPIServer() {}

// UnsafeBlockchainAPIServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BlockchainAPIServer will
// result in compilation errors.
type UnsafeBlockchainAPIServer interface {
	mustEmbedUnimplementedBlockchainAPIServer()
}

func RegisterBlockchainAPIServer(s grpc.ServiceRegistrar, srv BlockchainAPIServer) {
	s.RegisterService(&BlockchainAPI_ServiceDesc, srv)
}

func _BlockchainAPI_Health_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlockchainAPIServer).Health(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BlockchainAPI_Health_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlockchainAPIServer).Health(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlockchainAPI_AddBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddBlockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlockchainAPIServer).AddBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BlockchainAPI_AddBlock_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlockchainAPIServer).AddBlock(ctx, req.(*AddBlockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlockchainAPI_GetBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBlockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlockchainAPIServer).GetBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BlockchainAPI_GetBlock_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlockchainAPIServer).GetBlock(ctx, req.(*GetBlockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlockchainAPI_ChainTip_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlockchainAPIServer).ChainTip(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BlockchainAPI_ChainTip_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlockchainAPIServer).ChainTip(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// BlockchainAPI_ServiceDesc is the grpc.ServiceDesc for BlockchainAPI service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BlockchainAPI_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "blockchain_api.BlockchainAPI",
	HandlerType: (*BlockchainAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Health",
			Handler:    _BlockchainAPI_Health_Handler,
		},
		{
			MethodName: "AddBlock",
			Handler:    _BlockchainAPI_AddBlock_Handler,
		},
		{
			MethodName: "GetBlock",
			Handler:    _BlockchainAPI_GetBlock_Handler,
		},
		{
			MethodName: "ChainTip",
			Handler:    _BlockchainAPI_ChainTip_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "services/blockchain/blockchain_api/blockchain_api.proto",
}
