// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.27.3
// source: services/blockchain/blockchain_api/blockchain_api.proto

package blockchain_api

import (
	context "context"
	model "github.com/bitcoin-sv/ubsv/model"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	BlockchainAPI_HealthGRPC_FullMethodName                = "/blockchain_api.BlockchainAPI/HealthGRPC"
	BlockchainAPI_AddBlock_FullMethodName                  = "/blockchain_api.BlockchainAPI/AddBlock"
	BlockchainAPI_GetBlock_FullMethodName                  = "/blockchain_api.BlockchainAPI/GetBlock"
	BlockchainAPI_GetBlocks_FullMethodName                 = "/blockchain_api.BlockchainAPI/GetBlocks"
	BlockchainAPI_GetBlockByHeight_FullMethodName          = "/blockchain_api.BlockchainAPI/GetBlockByHeight"
	BlockchainAPI_GetBlockStats_FullMethodName             = "/blockchain_api.BlockchainAPI/GetBlockStats"
	BlockchainAPI_GetBlockGraphData_FullMethodName         = "/blockchain_api.BlockchainAPI/GetBlockGraphData"
	BlockchainAPI_GetLastNBlocks_FullMethodName            = "/blockchain_api.BlockchainAPI/GetLastNBlocks"
	BlockchainAPI_GetSuitableBlock_FullMethodName          = "/blockchain_api.BlockchainAPI/GetSuitableBlock"
	BlockchainAPI_GetHashOfAncestorBlock_FullMethodName    = "/blockchain_api.BlockchainAPI/GetHashOfAncestorBlock"
	BlockchainAPI_GetNextWorkRequired_FullMethodName       = "/blockchain_api.BlockchainAPI/GetNextWorkRequired"
	BlockchainAPI_GetBlockExists_FullMethodName            = "/blockchain_api.BlockchainAPI/GetBlockExists"
	BlockchainAPI_GetBlockHeaders_FullMethodName           = "/blockchain_api.BlockchainAPI/GetBlockHeaders"
	BlockchainAPI_GetBlockHeadersFromHeight_FullMethodName = "/blockchain_api.BlockchainAPI/GetBlockHeadersFromHeight"
	BlockchainAPI_GetBlockHeaderIDs_FullMethodName         = "/blockchain_api.BlockchainAPI/GetBlockHeaderIDs"
	BlockchainAPI_GetBestBlockHeader_FullMethodName        = "/blockchain_api.BlockchainAPI/GetBestBlockHeader"
	BlockchainAPI_GetBlockHeader_FullMethodName            = "/blockchain_api.BlockchainAPI/GetBlockHeader"
	BlockchainAPI_InvalidateBlock_FullMethodName           = "/blockchain_api.BlockchainAPI/InvalidateBlock"
	BlockchainAPI_RevalidateBlock_FullMethodName           = "/blockchain_api.BlockchainAPI/RevalidateBlock"
	BlockchainAPI_Subscribe_FullMethodName                 = "/blockchain_api.BlockchainAPI/Subscribe"
	BlockchainAPI_SendNotification_FullMethodName          = "/blockchain_api.BlockchainAPI/SendNotification"
	BlockchainAPI_GetState_FullMethodName                  = "/blockchain_api.BlockchainAPI/GetState"
	BlockchainAPI_SetState_FullMethodName                  = "/blockchain_api.BlockchainAPI/SetState"
	BlockchainAPI_SetBlockMinedSet_FullMethodName          = "/blockchain_api.BlockchainAPI/SetBlockMinedSet"
	BlockchainAPI_GetBlocksMinedNotSet_FullMethodName      = "/blockchain_api.BlockchainAPI/GetBlocksMinedNotSet"
	BlockchainAPI_SetBlockSubtreesSet_FullMethodName       = "/blockchain_api.BlockchainAPI/SetBlockSubtreesSet"
	BlockchainAPI_GetBlocksSubtreesNotSet_FullMethodName   = "/blockchain_api.BlockchainAPI/GetBlocksSubtreesNotSet"
	BlockchainAPI_SendFSMEvent_FullMethodName              = "/blockchain_api.BlockchainAPI/SendFSMEvent"
	BlockchainAPI_GetFSMCurrentState_FullMethodName        = "/blockchain_api.BlockchainAPI/GetFSMCurrentState"
	BlockchainAPI_Run_FullMethodName                       = "/blockchain_api.BlockchainAPI/Run"
	BlockchainAPI_Mine_FullMethodName                      = "/blockchain_api.BlockchainAPI/Mine"
	BlockchainAPI_CatchUpTransactions_FullMethodName       = "/blockchain_api.BlockchainAPI/CatchUpTransactions"
	BlockchainAPI_CatchUpBlocks_FullMethodName             = "/blockchain_api.BlockchainAPI/CatchUpBlocks"
	BlockchainAPI_GetBlockLocator_FullMethodName           = "/blockchain_api.BlockchainAPI/GetBlockLocator"
	BlockchainAPI_LocateBlockHeaders_FullMethodName        = "/blockchain_api.BlockchainAPI/LocateBlockHeaders"
	BlockchainAPI_GetBestHeightAndTime_FullMethodName      = "/blockchain_api.BlockchainAPI/GetBestHeightAndTime"
)

// BlockchainAPIClient is the client API for BlockchainAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BlockchainAPIClient interface {
	// Health returns the health of the API.
	HealthGRPC(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*HealthResponse, error)
	// AddBlock adds a block to the blockchain.  This will be called by BlockValidator.
	AddBlock(ctx context.Context, in *AddBlockRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetBlock(ctx context.Context, in *GetBlockRequest, opts ...grpc.CallOption) (*GetBlockResponse, error)
	GetBlocks(ctx context.Context, in *GetBlocksRequest, opts ...grpc.CallOption) (*GetBlocksResponse, error)
	GetBlockByHeight(ctx context.Context, in *GetBlockByHeightRequest, opts ...grpc.CallOption) (*GetBlockResponse, error)
	GetBlockStats(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*model.BlockStats, error)
	GetBlockGraphData(ctx context.Context, in *GetBlockGraphDataRequest, opts ...grpc.CallOption) (*model.BlockDataPoints, error)
	GetLastNBlocks(ctx context.Context, in *GetLastNBlocksRequest, opts ...grpc.CallOption) (*GetLastNBlocksResponse, error)
	GetSuitableBlock(ctx context.Context, in *GetSuitableBlockRequest, opts ...grpc.CallOption) (*GetSuitableBlockResponse, error)
	GetHashOfAncestorBlock(ctx context.Context, in *GetHashOfAncestorBlockRequest, opts ...grpc.CallOption) (*GetHashOfAncestorBlockResponse, error)
	GetNextWorkRequired(ctx context.Context, in *GetNextWorkRequiredRequest, opts ...grpc.CallOption) (*GetNextWorkRequiredResponse, error)
	GetBlockExists(ctx context.Context, in *GetBlockRequest, opts ...grpc.CallOption) (*GetBlockExistsResponse, error)
	GetBlockHeaders(ctx context.Context, in *GetBlockHeadersRequest, opts ...grpc.CallOption) (*GetBlockHeadersResponse, error)
	GetBlockHeadersFromHeight(ctx context.Context, in *GetBlockHeadersFromHeightRequest, opts ...grpc.CallOption) (*GetBlockHeadersFromHeightResponse, error)
	GetBlockHeaderIDs(ctx context.Context, in *GetBlockHeadersRequest, opts ...grpc.CallOption) (*GetBlockHeaderIDsResponse, error)
	GetBestBlockHeader(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetBlockHeaderResponse, error)
	GetBlockHeader(ctx context.Context, in *GetBlockHeaderRequest, opts ...grpc.CallOption) (*GetBlockHeaderResponse, error)
	InvalidateBlock(ctx context.Context, in *InvalidateBlockRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	RevalidateBlock(ctx context.Context, in *RevalidateBlockRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	Subscribe(ctx context.Context, in *SubscribeRequest, opts ...grpc.CallOption) (BlockchainAPI_SubscribeClient, error)
	SendNotification(ctx context.Context, in *Notification, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetState(ctx context.Context, in *GetStateRequest, opts ...grpc.CallOption) (*StateResponse, error)
	SetState(ctx context.Context, in *SetStateRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	SetBlockMinedSet(ctx context.Context, in *SetBlockMinedSetRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetBlocksMinedNotSet(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetBlocksMinedNotSetResponse, error)
	SetBlockSubtreesSet(ctx context.Context, in *SetBlockSubtreesSetRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetBlocksSubtreesNotSet(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetBlocksSubtreesNotSetResponse, error)
	SendFSMEvent(ctx context.Context, in *SendFSMEventRequest, opts ...grpc.CallOption) (*GetFSMStateResponse, error)
	GetFSMCurrentState(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetFSMStateResponse, error)
	Run(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error)
	Mine(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error)
	CatchUpTransactions(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error)
	CatchUpBlocks(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetBlockLocator(ctx context.Context, in *GetBlockLocatorRequest, opts ...grpc.CallOption) (*GetBlockLocatorResponse, error)
	LocateBlockHeaders(ctx context.Context, in *LocateBlockHeadersRequest, opts ...grpc.CallOption) (*LocateBlockHeadersResponse, error)
	GetBestHeightAndTime(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetBestHeightAndTimeResponse, error)
}

type blockchainAPIClient struct {
	cc grpc.ClientConnInterface
}

func NewBlockchainAPIClient(cc grpc.ClientConnInterface) BlockchainAPIClient {
	return &blockchainAPIClient{cc}
}

func (c *blockchainAPIClient) HealthGRPC(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*HealthResponse, error) {
	out := new(HealthResponse)
	err := c.cc.Invoke(ctx, BlockchainAPI_HealthGRPC_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blockchainAPIClient) AddBlock(ctx context.Context, in *AddBlockRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, BlockchainAPI_AddBlock_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blockchainAPIClient) GetBlock(ctx context.Context, in *GetBlockRequest, opts ...grpc.CallOption) (*GetBlockResponse, error) {
	out := new(GetBlockResponse)
	err := c.cc.Invoke(ctx, BlockchainAPI_GetBlock_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blockchainAPIClient) GetBlocks(ctx context.Context, in *GetBlocksRequest, opts ...grpc.CallOption) (*GetBlocksResponse, error) {
	out := new(GetBlocksResponse)
	err := c.cc.Invoke(ctx, BlockchainAPI_GetBlocks_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blockchainAPIClient) GetBlockByHeight(ctx context.Context, in *GetBlockByHeightRequest, opts ...grpc.CallOption) (*GetBlockResponse, error) {
	out := new(GetBlockResponse)
	err := c.cc.Invoke(ctx, BlockchainAPI_GetBlockByHeight_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blockchainAPIClient) GetBlockStats(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*model.BlockStats, error) {
	out := new(model.BlockStats)
	err := c.cc.Invoke(ctx, BlockchainAPI_GetBlockStats_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blockchainAPIClient) GetBlockGraphData(ctx context.Context, in *GetBlockGraphDataRequest, opts ...grpc.CallOption) (*model.BlockDataPoints, error) {
	out := new(model.BlockDataPoints)
	err := c.cc.Invoke(ctx, BlockchainAPI_GetBlockGraphData_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blockchainAPIClient) GetLastNBlocks(ctx context.Context, in *GetLastNBlocksRequest, opts ...grpc.CallOption) (*GetLastNBlocksResponse, error) {
	out := new(GetLastNBlocksResponse)
	err := c.cc.Invoke(ctx, BlockchainAPI_GetLastNBlocks_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blockchainAPIClient) GetSuitableBlock(ctx context.Context, in *GetSuitableBlockRequest, opts ...grpc.CallOption) (*GetSuitableBlockResponse, error) {
	out := new(GetSuitableBlockResponse)
	err := c.cc.Invoke(ctx, BlockchainAPI_GetSuitableBlock_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blockchainAPIClient) GetHashOfAncestorBlock(ctx context.Context, in *GetHashOfAncestorBlockRequest, opts ...grpc.CallOption) (*GetHashOfAncestorBlockResponse, error) {
	out := new(GetHashOfAncestorBlockResponse)
	err := c.cc.Invoke(ctx, BlockchainAPI_GetHashOfAncestorBlock_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blockchainAPIClient) GetNextWorkRequired(ctx context.Context, in *GetNextWorkRequiredRequest, opts ...grpc.CallOption) (*GetNextWorkRequiredResponse, error) {
	out := new(GetNextWorkRequiredResponse)
	err := c.cc.Invoke(ctx, BlockchainAPI_GetNextWorkRequired_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blockchainAPIClient) GetBlockExists(ctx context.Context, in *GetBlockRequest, opts ...grpc.CallOption) (*GetBlockExistsResponse, error) {
	out := new(GetBlockExistsResponse)
	err := c.cc.Invoke(ctx, BlockchainAPI_GetBlockExists_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blockchainAPIClient) GetBlockHeaders(ctx context.Context, in *GetBlockHeadersRequest, opts ...grpc.CallOption) (*GetBlockHeadersResponse, error) {
	out := new(GetBlockHeadersResponse)
	err := c.cc.Invoke(ctx, BlockchainAPI_GetBlockHeaders_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blockchainAPIClient) GetBlockHeadersFromHeight(ctx context.Context, in *GetBlockHeadersFromHeightRequest, opts ...grpc.CallOption) (*GetBlockHeadersFromHeightResponse, error) {
	out := new(GetBlockHeadersFromHeightResponse)
	err := c.cc.Invoke(ctx, BlockchainAPI_GetBlockHeadersFromHeight_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blockchainAPIClient) GetBlockHeaderIDs(ctx context.Context, in *GetBlockHeadersRequest, opts ...grpc.CallOption) (*GetBlockHeaderIDsResponse, error) {
	out := new(GetBlockHeaderIDsResponse)
	err := c.cc.Invoke(ctx, BlockchainAPI_GetBlockHeaderIDs_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blockchainAPIClient) GetBestBlockHeader(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetBlockHeaderResponse, error) {
	out := new(GetBlockHeaderResponse)
	err := c.cc.Invoke(ctx, BlockchainAPI_GetBestBlockHeader_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blockchainAPIClient) GetBlockHeader(ctx context.Context, in *GetBlockHeaderRequest, opts ...grpc.CallOption) (*GetBlockHeaderResponse, error) {
	out := new(GetBlockHeaderResponse)
	err := c.cc.Invoke(ctx, BlockchainAPI_GetBlockHeader_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blockchainAPIClient) InvalidateBlock(ctx context.Context, in *InvalidateBlockRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, BlockchainAPI_InvalidateBlock_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blockchainAPIClient) RevalidateBlock(ctx context.Context, in *RevalidateBlockRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, BlockchainAPI_RevalidateBlock_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blockchainAPIClient) Subscribe(ctx context.Context, in *SubscribeRequest, opts ...grpc.CallOption) (BlockchainAPI_SubscribeClient, error) {
	stream, err := c.cc.NewStream(ctx, &BlockchainAPI_ServiceDesc.Streams[0], BlockchainAPI_Subscribe_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &blockchainAPISubscribeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type BlockchainAPI_SubscribeClient interface {
	Recv() (*Notification, error)
	grpc.ClientStream
}

type blockchainAPISubscribeClient struct {
	grpc.ClientStream
}

func (x *blockchainAPISubscribeClient) Recv() (*Notification, error) {
	m := new(Notification)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *blockchainAPIClient) SendNotification(ctx context.Context, in *Notification, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, BlockchainAPI_SendNotification_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blockchainAPIClient) GetState(ctx context.Context, in *GetStateRequest, opts ...grpc.CallOption) (*StateResponse, error) {
	out := new(StateResponse)
	err := c.cc.Invoke(ctx, BlockchainAPI_GetState_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blockchainAPIClient) SetState(ctx context.Context, in *SetStateRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, BlockchainAPI_SetState_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blockchainAPIClient) SetBlockMinedSet(ctx context.Context, in *SetBlockMinedSetRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, BlockchainAPI_SetBlockMinedSet_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blockchainAPIClient) GetBlocksMinedNotSet(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetBlocksMinedNotSetResponse, error) {
	out := new(GetBlocksMinedNotSetResponse)
	err := c.cc.Invoke(ctx, BlockchainAPI_GetBlocksMinedNotSet_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blockchainAPIClient) SetBlockSubtreesSet(ctx context.Context, in *SetBlockSubtreesSetRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, BlockchainAPI_SetBlockSubtreesSet_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blockchainAPIClient) GetBlocksSubtreesNotSet(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetBlocksSubtreesNotSetResponse, error) {
	out := new(GetBlocksSubtreesNotSetResponse)
	err := c.cc.Invoke(ctx, BlockchainAPI_GetBlocksSubtreesNotSet_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blockchainAPIClient) SendFSMEvent(ctx context.Context, in *SendFSMEventRequest, opts ...grpc.CallOption) (*GetFSMStateResponse, error) {
	out := new(GetFSMStateResponse)
	err := c.cc.Invoke(ctx, BlockchainAPI_SendFSMEvent_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blockchainAPIClient) GetFSMCurrentState(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetFSMStateResponse, error) {
	out := new(GetFSMStateResponse)
	err := c.cc.Invoke(ctx, BlockchainAPI_GetFSMCurrentState_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blockchainAPIClient) Run(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, BlockchainAPI_Run_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blockchainAPIClient) Mine(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, BlockchainAPI_Mine_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blockchainAPIClient) CatchUpTransactions(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, BlockchainAPI_CatchUpTransactions_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blockchainAPIClient) CatchUpBlocks(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, BlockchainAPI_CatchUpBlocks_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blockchainAPIClient) GetBlockLocator(ctx context.Context, in *GetBlockLocatorRequest, opts ...grpc.CallOption) (*GetBlockLocatorResponse, error) {
	out := new(GetBlockLocatorResponse)
	err := c.cc.Invoke(ctx, BlockchainAPI_GetBlockLocator_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blockchainAPIClient) LocateBlockHeaders(ctx context.Context, in *LocateBlockHeadersRequest, opts ...grpc.CallOption) (*LocateBlockHeadersResponse, error) {
	out := new(LocateBlockHeadersResponse)
	err := c.cc.Invoke(ctx, BlockchainAPI_LocateBlockHeaders_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blockchainAPIClient) GetBestHeightAndTime(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetBestHeightAndTimeResponse, error) {
	out := new(GetBestHeightAndTimeResponse)
	err := c.cc.Invoke(ctx, BlockchainAPI_GetBestHeightAndTime_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BlockchainAPIServer is the server API for BlockchainAPI service.
// All implementations must embed UnimplementedBlockchainAPIServer
// for forward compatibility
type BlockchainAPIServer interface {
	// Health returns the health of the API.
	HealthGRPC(context.Context, *emptypb.Empty) (*HealthResponse, error)
	// AddBlock adds a block to the blockchain.  This will be called by BlockValidator.
	AddBlock(context.Context, *AddBlockRequest) (*emptypb.Empty, error)
	GetBlock(context.Context, *GetBlockRequest) (*GetBlockResponse, error)
	GetBlocks(context.Context, *GetBlocksRequest) (*GetBlocksResponse, error)
	GetBlockByHeight(context.Context, *GetBlockByHeightRequest) (*GetBlockResponse, error)
	GetBlockStats(context.Context, *emptypb.Empty) (*model.BlockStats, error)
	GetBlockGraphData(context.Context, *GetBlockGraphDataRequest) (*model.BlockDataPoints, error)
	GetLastNBlocks(context.Context, *GetLastNBlocksRequest) (*GetLastNBlocksResponse, error)
	GetSuitableBlock(context.Context, *GetSuitableBlockRequest) (*GetSuitableBlockResponse, error)
	GetHashOfAncestorBlock(context.Context, *GetHashOfAncestorBlockRequest) (*GetHashOfAncestorBlockResponse, error)
	GetNextWorkRequired(context.Context, *GetNextWorkRequiredRequest) (*GetNextWorkRequiredResponse, error)
	GetBlockExists(context.Context, *GetBlockRequest) (*GetBlockExistsResponse, error)
	GetBlockHeaders(context.Context, *GetBlockHeadersRequest) (*GetBlockHeadersResponse, error)
	GetBlockHeadersFromHeight(context.Context, *GetBlockHeadersFromHeightRequest) (*GetBlockHeadersFromHeightResponse, error)
	GetBlockHeaderIDs(context.Context, *GetBlockHeadersRequest) (*GetBlockHeaderIDsResponse, error)
	GetBestBlockHeader(context.Context, *emptypb.Empty) (*GetBlockHeaderResponse, error)
	GetBlockHeader(context.Context, *GetBlockHeaderRequest) (*GetBlockHeaderResponse, error)
	InvalidateBlock(context.Context, *InvalidateBlockRequest) (*emptypb.Empty, error)
	RevalidateBlock(context.Context, *RevalidateBlockRequest) (*emptypb.Empty, error)
	Subscribe(*SubscribeRequest, BlockchainAPI_SubscribeServer) error
	SendNotification(context.Context, *Notification) (*emptypb.Empty, error)
	GetState(context.Context, *GetStateRequest) (*StateResponse, error)
	SetState(context.Context, *SetStateRequest) (*emptypb.Empty, error)
	SetBlockMinedSet(context.Context, *SetBlockMinedSetRequest) (*emptypb.Empty, error)
	GetBlocksMinedNotSet(context.Context, *emptypb.Empty) (*GetBlocksMinedNotSetResponse, error)
	SetBlockSubtreesSet(context.Context, *SetBlockSubtreesSetRequest) (*emptypb.Empty, error)
	GetBlocksSubtreesNotSet(context.Context, *emptypb.Empty) (*GetBlocksSubtreesNotSetResponse, error)
	SendFSMEvent(context.Context, *SendFSMEventRequest) (*GetFSMStateResponse, error)
	GetFSMCurrentState(context.Context, *emptypb.Empty) (*GetFSMStateResponse, error)
	Run(context.Context, *emptypb.Empty) (*emptypb.Empty, error)
	Mine(context.Context, *emptypb.Empty) (*emptypb.Empty, error)
	CatchUpTransactions(context.Context, *emptypb.Empty) (*emptypb.Empty, error)
	CatchUpBlocks(context.Context, *emptypb.Empty) (*emptypb.Empty, error)
	GetBlockLocator(context.Context, *GetBlockLocatorRequest) (*GetBlockLocatorResponse, error)
	LocateBlockHeaders(context.Context, *LocateBlockHeadersRequest) (*LocateBlockHeadersResponse, error)
	GetBestHeightAndTime(context.Context, *emptypb.Empty) (*GetBestHeightAndTimeResponse, error)
	mustEmbedUnimplementedBlockchainAPIServer()
}

// UnimplementedBlockchainAPIServer must be embedded to have forward compatible implementations.
type UnimplementedBlockchainAPIServer struct {
}

func (UnimplementedBlockchainAPIServer) HealthGRPC(context.Context, *emptypb.Empty) (*HealthResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HealthGRPC not implemented")
}
func (UnimplementedBlockchainAPIServer) AddBlock(context.Context, *AddBlockRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddBlock not implemented")
}
func (UnimplementedBlockchainAPIServer) GetBlock(context.Context, *GetBlockRequest) (*GetBlockResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBlock not implemented")
}
func (UnimplementedBlockchainAPIServer) GetBlocks(context.Context, *GetBlocksRequest) (*GetBlocksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBlocks not implemented")
}
func (UnimplementedBlockchainAPIServer) GetBlockByHeight(context.Context, *GetBlockByHeightRequest) (*GetBlockResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBlockByHeight not implemented")
}
func (UnimplementedBlockchainAPIServer) GetBlockStats(context.Context, *emptypb.Empty) (*model.BlockStats, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBlockStats not implemented")
}
func (UnimplementedBlockchainAPIServer) GetBlockGraphData(context.Context, *GetBlockGraphDataRequest) (*model.BlockDataPoints, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBlockGraphData not implemented")
}
func (UnimplementedBlockchainAPIServer) GetLastNBlocks(context.Context, *GetLastNBlocksRequest) (*GetLastNBlocksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLastNBlocks not implemented")
}
func (UnimplementedBlockchainAPIServer) GetSuitableBlock(context.Context, *GetSuitableBlockRequest) (*GetSuitableBlockResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSuitableBlock not implemented")
}
func (UnimplementedBlockchainAPIServer) GetHashOfAncestorBlock(context.Context, *GetHashOfAncestorBlockRequest) (*GetHashOfAncestorBlockResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHashOfAncestorBlock not implemented")
}
func (UnimplementedBlockchainAPIServer) GetNextWorkRequired(context.Context, *GetNextWorkRequiredRequest) (*GetNextWorkRequiredResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNextWorkRequired not implemented")
}
func (UnimplementedBlockchainAPIServer) GetBlockExists(context.Context, *GetBlockRequest) (*GetBlockExistsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBlockExists not implemented")
}
func (UnimplementedBlockchainAPIServer) GetBlockHeaders(context.Context, *GetBlockHeadersRequest) (*GetBlockHeadersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBlockHeaders not implemented")
}
func (UnimplementedBlockchainAPIServer) GetBlockHeadersFromHeight(context.Context, *GetBlockHeadersFromHeightRequest) (*GetBlockHeadersFromHeightResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBlockHeadersFromHeight not implemented")
}
func (UnimplementedBlockchainAPIServer) GetBlockHeaderIDs(context.Context, *GetBlockHeadersRequest) (*GetBlockHeaderIDsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBlockHeaderIDs not implemented")
}
func (UnimplementedBlockchainAPIServer) GetBestBlockHeader(context.Context, *emptypb.Empty) (*GetBlockHeaderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBestBlockHeader not implemented")
}
func (UnimplementedBlockchainAPIServer) GetBlockHeader(context.Context, *GetBlockHeaderRequest) (*GetBlockHeaderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBlockHeader not implemented")
}
func (UnimplementedBlockchainAPIServer) InvalidateBlock(context.Context, *InvalidateBlockRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InvalidateBlock not implemented")
}
func (UnimplementedBlockchainAPIServer) RevalidateBlock(context.Context, *RevalidateBlockRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RevalidateBlock not implemented")
}
func (UnimplementedBlockchainAPIServer) Subscribe(*SubscribeRequest, BlockchainAPI_SubscribeServer) error {
	return status.Errorf(codes.Unimplemented, "method Subscribe not implemented")
}
func (UnimplementedBlockchainAPIServer) SendNotification(context.Context, *Notification) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendNotification not implemented")
}
func (UnimplementedBlockchainAPIServer) GetState(context.Context, *GetStateRequest) (*StateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetState not implemented")
}
func (UnimplementedBlockchainAPIServer) SetState(context.Context, *SetStateRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetState not implemented")
}
func (UnimplementedBlockchainAPIServer) SetBlockMinedSet(context.Context, *SetBlockMinedSetRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetBlockMinedSet not implemented")
}
func (UnimplementedBlockchainAPIServer) GetBlocksMinedNotSet(context.Context, *emptypb.Empty) (*GetBlocksMinedNotSetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBlocksMinedNotSet not implemented")
}
func (UnimplementedBlockchainAPIServer) SetBlockSubtreesSet(context.Context, *SetBlockSubtreesSetRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetBlockSubtreesSet not implemented")
}
func (UnimplementedBlockchainAPIServer) GetBlocksSubtreesNotSet(context.Context, *emptypb.Empty) (*GetBlocksSubtreesNotSetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBlocksSubtreesNotSet not implemented")
}
func (UnimplementedBlockchainAPIServer) SendFSMEvent(context.Context, *SendFSMEventRequest) (*GetFSMStateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendFSMEvent not implemented")
}
func (UnimplementedBlockchainAPIServer) GetFSMCurrentState(context.Context, *emptypb.Empty) (*GetFSMStateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFSMCurrentState not implemented")
}
func (UnimplementedBlockchainAPIServer) Run(context.Context, *emptypb.Empty) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Run not implemented")
}
func (UnimplementedBlockchainAPIServer) Mine(context.Context, *emptypb.Empty) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Mine not implemented")
}
func (UnimplementedBlockchainAPIServer) CatchUpTransactions(context.Context, *emptypb.Empty) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CatchUpTransactions not implemented")
}
func (UnimplementedBlockchainAPIServer) CatchUpBlocks(context.Context, *emptypb.Empty) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CatchUpBlocks not implemented")
}
func (UnimplementedBlockchainAPIServer) GetBlockLocator(context.Context, *GetBlockLocatorRequest) (*GetBlockLocatorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBlockLocator not implemented")
}
func (UnimplementedBlockchainAPIServer) LocateBlockHeaders(context.Context, *LocateBlockHeadersRequest) (*LocateBlockHeadersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LocateBlockHeaders not implemented")
}
func (UnimplementedBlockchainAPIServer) GetBestHeightAndTime(context.Context, *emptypb.Empty) (*GetBestHeightAndTimeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBestHeightAndTime not implemented")
}
func (UnimplementedBlockchainAPIServer) mustEmbedUnimplementedBlockchainAPIServer() {}

// UnsafeBlockchainAPIServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BlockchainAPIServer will
// result in compilation errors.
type UnsafeBlockchainAPIServer interface {
	mustEmbedUnimplementedBlockchainAPIServer()
}

func RegisterBlockchainAPIServer(s grpc.ServiceRegistrar, srv BlockchainAPIServer) {
	s.RegisterService(&BlockchainAPI_ServiceDesc, srv)
}

func _BlockchainAPI_HealthGRPC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlockchainAPIServer).HealthGRPC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BlockchainAPI_HealthGRPC_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlockchainAPIServer).HealthGRPC(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlockchainAPI_AddBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddBlockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlockchainAPIServer).AddBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BlockchainAPI_AddBlock_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlockchainAPIServer).AddBlock(ctx, req.(*AddBlockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlockchainAPI_GetBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBlockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlockchainAPIServer).GetBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BlockchainAPI_GetBlock_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlockchainAPIServer).GetBlock(ctx, req.(*GetBlockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlockchainAPI_GetBlocks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBlocksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlockchainAPIServer).GetBlocks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BlockchainAPI_GetBlocks_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlockchainAPIServer).GetBlocks(ctx, req.(*GetBlocksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlockchainAPI_GetBlockByHeight_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBlockByHeightRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlockchainAPIServer).GetBlockByHeight(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BlockchainAPI_GetBlockByHeight_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlockchainAPIServer).GetBlockByHeight(ctx, req.(*GetBlockByHeightRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlockchainAPI_GetBlockStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlockchainAPIServer).GetBlockStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BlockchainAPI_GetBlockStats_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlockchainAPIServer).GetBlockStats(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlockchainAPI_GetBlockGraphData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBlockGraphDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlockchainAPIServer).GetBlockGraphData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BlockchainAPI_GetBlockGraphData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlockchainAPIServer).GetBlockGraphData(ctx, req.(*GetBlockGraphDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlockchainAPI_GetLastNBlocks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLastNBlocksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlockchainAPIServer).GetLastNBlocks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BlockchainAPI_GetLastNBlocks_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlockchainAPIServer).GetLastNBlocks(ctx, req.(*GetLastNBlocksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlockchainAPI_GetSuitableBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSuitableBlockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlockchainAPIServer).GetSuitableBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BlockchainAPI_GetSuitableBlock_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlockchainAPIServer).GetSuitableBlock(ctx, req.(*GetSuitableBlockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlockchainAPI_GetHashOfAncestorBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetHashOfAncestorBlockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlockchainAPIServer).GetHashOfAncestorBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BlockchainAPI_GetHashOfAncestorBlock_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlockchainAPIServer).GetHashOfAncestorBlock(ctx, req.(*GetHashOfAncestorBlockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlockchainAPI_GetNextWorkRequired_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNextWorkRequiredRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlockchainAPIServer).GetNextWorkRequired(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BlockchainAPI_GetNextWorkRequired_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlockchainAPIServer).GetNextWorkRequired(ctx, req.(*GetNextWorkRequiredRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlockchainAPI_GetBlockExists_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBlockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlockchainAPIServer).GetBlockExists(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BlockchainAPI_GetBlockExists_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlockchainAPIServer).GetBlockExists(ctx, req.(*GetBlockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlockchainAPI_GetBlockHeaders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBlockHeadersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlockchainAPIServer).GetBlockHeaders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BlockchainAPI_GetBlockHeaders_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlockchainAPIServer).GetBlockHeaders(ctx, req.(*GetBlockHeadersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlockchainAPI_GetBlockHeadersFromHeight_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBlockHeadersFromHeightRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlockchainAPIServer).GetBlockHeadersFromHeight(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BlockchainAPI_GetBlockHeadersFromHeight_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlockchainAPIServer).GetBlockHeadersFromHeight(ctx, req.(*GetBlockHeadersFromHeightRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlockchainAPI_GetBlockHeaderIDs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBlockHeadersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlockchainAPIServer).GetBlockHeaderIDs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BlockchainAPI_GetBlockHeaderIDs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlockchainAPIServer).GetBlockHeaderIDs(ctx, req.(*GetBlockHeadersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlockchainAPI_GetBestBlockHeader_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlockchainAPIServer).GetBestBlockHeader(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BlockchainAPI_GetBestBlockHeader_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlockchainAPIServer).GetBestBlockHeader(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlockchainAPI_GetBlockHeader_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBlockHeaderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlockchainAPIServer).GetBlockHeader(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BlockchainAPI_GetBlockHeader_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlockchainAPIServer).GetBlockHeader(ctx, req.(*GetBlockHeaderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlockchainAPI_InvalidateBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InvalidateBlockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlockchainAPIServer).InvalidateBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BlockchainAPI_InvalidateBlock_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlockchainAPIServer).InvalidateBlock(ctx, req.(*InvalidateBlockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlockchainAPI_RevalidateBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RevalidateBlockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlockchainAPIServer).RevalidateBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BlockchainAPI_RevalidateBlock_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlockchainAPIServer).RevalidateBlock(ctx, req.(*RevalidateBlockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlockchainAPI_Subscribe_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(BlockchainAPIServer).Subscribe(m, &blockchainAPISubscribeServer{stream})
}

type BlockchainAPI_SubscribeServer interface {
	Send(*Notification) error
	grpc.ServerStream
}

type blockchainAPISubscribeServer struct {
	grpc.ServerStream
}

func (x *blockchainAPISubscribeServer) Send(m *Notification) error {
	return x.ServerStream.SendMsg(m)
}

func _BlockchainAPI_SendNotification_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Notification)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlockchainAPIServer).SendNotification(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BlockchainAPI_SendNotification_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlockchainAPIServer).SendNotification(ctx, req.(*Notification))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlockchainAPI_GetState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlockchainAPIServer).GetState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BlockchainAPI_GetState_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlockchainAPIServer).GetState(ctx, req.(*GetStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlockchainAPI_SetState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlockchainAPIServer).SetState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BlockchainAPI_SetState_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlockchainAPIServer).SetState(ctx, req.(*SetStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlockchainAPI_SetBlockMinedSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetBlockMinedSetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlockchainAPIServer).SetBlockMinedSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BlockchainAPI_SetBlockMinedSet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlockchainAPIServer).SetBlockMinedSet(ctx, req.(*SetBlockMinedSetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlockchainAPI_GetBlocksMinedNotSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlockchainAPIServer).GetBlocksMinedNotSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BlockchainAPI_GetBlocksMinedNotSet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlockchainAPIServer).GetBlocksMinedNotSet(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlockchainAPI_SetBlockSubtreesSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetBlockSubtreesSetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlockchainAPIServer).SetBlockSubtreesSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BlockchainAPI_SetBlockSubtreesSet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlockchainAPIServer).SetBlockSubtreesSet(ctx, req.(*SetBlockSubtreesSetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlockchainAPI_GetBlocksSubtreesNotSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlockchainAPIServer).GetBlocksSubtreesNotSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BlockchainAPI_GetBlocksSubtreesNotSet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlockchainAPIServer).GetBlocksSubtreesNotSet(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlockchainAPI_SendFSMEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendFSMEventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlockchainAPIServer).SendFSMEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BlockchainAPI_SendFSMEvent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlockchainAPIServer).SendFSMEvent(ctx, req.(*SendFSMEventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlockchainAPI_GetFSMCurrentState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlockchainAPIServer).GetFSMCurrentState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BlockchainAPI_GetFSMCurrentState_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlockchainAPIServer).GetFSMCurrentState(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlockchainAPI_Run_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlockchainAPIServer).Run(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BlockchainAPI_Run_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlockchainAPIServer).Run(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlockchainAPI_Mine_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlockchainAPIServer).Mine(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BlockchainAPI_Mine_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlockchainAPIServer).Mine(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlockchainAPI_CatchUpTransactions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlockchainAPIServer).CatchUpTransactions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BlockchainAPI_CatchUpTransactions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlockchainAPIServer).CatchUpTransactions(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlockchainAPI_CatchUpBlocks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlockchainAPIServer).CatchUpBlocks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BlockchainAPI_CatchUpBlocks_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlockchainAPIServer).CatchUpBlocks(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlockchainAPI_GetBlockLocator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBlockLocatorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlockchainAPIServer).GetBlockLocator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BlockchainAPI_GetBlockLocator_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlockchainAPIServer).GetBlockLocator(ctx, req.(*GetBlockLocatorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlockchainAPI_LocateBlockHeaders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LocateBlockHeadersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlockchainAPIServer).LocateBlockHeaders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BlockchainAPI_LocateBlockHeaders_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlockchainAPIServer).LocateBlockHeaders(ctx, req.(*LocateBlockHeadersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlockchainAPI_GetBestHeightAndTime_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlockchainAPIServer).GetBestHeightAndTime(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BlockchainAPI_GetBestHeightAndTime_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlockchainAPIServer).GetBestHeightAndTime(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// BlockchainAPI_ServiceDesc is the grpc.ServiceDesc for BlockchainAPI service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BlockchainAPI_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "blockchain_api.BlockchainAPI",
	HandlerType: (*BlockchainAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "HealthGRPC",
			Handler:    _BlockchainAPI_HealthGRPC_Handler,
		},
		{
			MethodName: "AddBlock",
			Handler:    _BlockchainAPI_AddBlock_Handler,
		},
		{
			MethodName: "GetBlock",
			Handler:    _BlockchainAPI_GetBlock_Handler,
		},
		{
			MethodName: "GetBlocks",
			Handler:    _BlockchainAPI_GetBlocks_Handler,
		},
		{
			MethodName: "GetBlockByHeight",
			Handler:    _BlockchainAPI_GetBlockByHeight_Handler,
		},
		{
			MethodName: "GetBlockStats",
			Handler:    _BlockchainAPI_GetBlockStats_Handler,
		},
		{
			MethodName: "GetBlockGraphData",
			Handler:    _BlockchainAPI_GetBlockGraphData_Handler,
		},
		{
			MethodName: "GetLastNBlocks",
			Handler:    _BlockchainAPI_GetLastNBlocks_Handler,
		},
		{
			MethodName: "GetSuitableBlock",
			Handler:    _BlockchainAPI_GetSuitableBlock_Handler,
		},
		{
			MethodName: "GetHashOfAncestorBlock",
			Handler:    _BlockchainAPI_GetHashOfAncestorBlock_Handler,
		},
		{
			MethodName: "GetNextWorkRequired",
			Handler:    _BlockchainAPI_GetNextWorkRequired_Handler,
		},
		{
			MethodName: "GetBlockExists",
			Handler:    _BlockchainAPI_GetBlockExists_Handler,
		},
		{
			MethodName: "GetBlockHeaders",
			Handler:    _BlockchainAPI_GetBlockHeaders_Handler,
		},
		{
			MethodName: "GetBlockHeadersFromHeight",
			Handler:    _BlockchainAPI_GetBlockHeadersFromHeight_Handler,
		},
		{
			MethodName: "GetBlockHeaderIDs",
			Handler:    _BlockchainAPI_GetBlockHeaderIDs_Handler,
		},
		{
			MethodName: "GetBestBlockHeader",
			Handler:    _BlockchainAPI_GetBestBlockHeader_Handler,
		},
		{
			MethodName: "GetBlockHeader",
			Handler:    _BlockchainAPI_GetBlockHeader_Handler,
		},
		{
			MethodName: "InvalidateBlock",
			Handler:    _BlockchainAPI_InvalidateBlock_Handler,
		},
		{
			MethodName: "RevalidateBlock",
			Handler:    _BlockchainAPI_RevalidateBlock_Handler,
		},
		{
			MethodName: "SendNotification",
			Handler:    _BlockchainAPI_SendNotification_Handler,
		},
		{
			MethodName: "GetState",
			Handler:    _BlockchainAPI_GetState_Handler,
		},
		{
			MethodName: "SetState",
			Handler:    _BlockchainAPI_SetState_Handler,
		},
		{
			MethodName: "SetBlockMinedSet",
			Handler:    _BlockchainAPI_SetBlockMinedSet_Handler,
		},
		{
			MethodName: "GetBlocksMinedNotSet",
			Handler:    _BlockchainAPI_GetBlocksMinedNotSet_Handler,
		},
		{
			MethodName: "SetBlockSubtreesSet",
			Handler:    _BlockchainAPI_SetBlockSubtreesSet_Handler,
		},
		{
			MethodName: "GetBlocksSubtreesNotSet",
			Handler:    _BlockchainAPI_GetBlocksSubtreesNotSet_Handler,
		},
		{
			MethodName: "SendFSMEvent",
			Handler:    _BlockchainAPI_SendFSMEvent_Handler,
		},
		{
			MethodName: "GetFSMCurrentState",
			Handler:    _BlockchainAPI_GetFSMCurrentState_Handler,
		},
		{
			MethodName: "Run",
			Handler:    _BlockchainAPI_Run_Handler,
		},
		{
			MethodName: "Mine",
			Handler:    _BlockchainAPI_Mine_Handler,
		},
		{
			MethodName: "CatchUpTransactions",
			Handler:    _BlockchainAPI_CatchUpTransactions_Handler,
		},
		{
			MethodName: "CatchUpBlocks",
			Handler:    _BlockchainAPI_CatchUpBlocks_Handler,
		},
		{
			MethodName: "GetBlockLocator",
			Handler:    _BlockchainAPI_GetBlockLocator_Handler,
		},
		{
			MethodName: "LocateBlockHeaders",
			Handler:    _BlockchainAPI_LocateBlockHeaders_Handler,
		},
		{
			MethodName: "GetBestHeightAndTime",
			Handler:    _BlockchainAPI_GetBestHeightAndTime_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Subscribe",
			Handler:       _BlockchainAPI_Subscribe_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "services/blockchain/blockchain_api/blockchain_api.proto",
}
