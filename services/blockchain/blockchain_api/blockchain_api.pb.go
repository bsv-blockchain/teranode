// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.2
// 	protoc        v5.29.2
// source: services/blockchain/blockchain_api/blockchain_api.proto

package blockchain_api

import (
	model "github.com/bitcoin-sv/teranode/model"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// swagger:enum FSMEventType
type FSMEventType int32

const (
	FSMEventType_STOP          FSMEventType = 0
	FSMEventType_RUN           FSMEventType = 1
	FSMEventType_CATCHUPBLOCKS FSMEventType = 2
	FSMEventType_LEGACYSYNC    FSMEventType = 3
)

// Enum value maps for FSMEventType.
var (
	FSMEventType_name = map[int32]string{
		0: "STOP",
		1: "RUN",
		2: "CATCHUPBLOCKS",
		3: "LEGACYSYNC",
	}
	FSMEventType_value = map[string]int32{
		"STOP":          0,
		"RUN":           1,
		"CATCHUPBLOCKS": 2,
		"LEGACYSYNC":    3,
	}
)

func (x FSMEventType) Enum() *FSMEventType {
	p := new(FSMEventType)
	*p = x
	return p
}

func (x FSMEventType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FSMEventType) Descriptor() protoreflect.EnumDescriptor {
	return file_services_blockchain_blockchain_api_blockchain_api_proto_enumTypes[0].Descriptor()
}

func (FSMEventType) Type() protoreflect.EnumType {
	return &file_services_blockchain_blockchain_api_blockchain_api_proto_enumTypes[0]
}

func (x FSMEventType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FSMEventType.Descriptor instead.
func (FSMEventType) EnumDescriptor() ([]byte, []int) {
	return file_services_blockchain_blockchain_api_blockchain_api_proto_rawDescGZIP(), []int{0}
}

// swagger:enum FSMStateType
type FSMStateType int32

const (
	FSMStateType_IDLE           FSMStateType = 0
	FSMStateType_RUNNING        FSMStateType = 1
	FSMStateType_CATCHINGBLOCKS FSMStateType = 2
	FSMStateType_LEGACYSYNCING  FSMStateType = 3
)

// Enum value maps for FSMStateType.
var (
	FSMStateType_name = map[int32]string{
		0: "IDLE",
		1: "RUNNING",
		2: "CATCHINGBLOCKS",
		3: "LEGACYSYNCING",
	}
	FSMStateType_value = map[string]int32{
		"IDLE":           0,
		"RUNNING":        1,
		"CATCHINGBLOCKS": 2,
		"LEGACYSYNCING":  3,
	}
)

func (x FSMStateType) Enum() *FSMStateType {
	p := new(FSMStateType)
	*p = x
	return p
}

func (x FSMStateType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FSMStateType) Descriptor() protoreflect.EnumDescriptor {
	return file_services_blockchain_blockchain_api_blockchain_api_proto_enumTypes[1].Descriptor()
}

func (FSMStateType) Type() protoreflect.EnumType {
	return &file_services_blockchain_blockchain_api_blockchain_api_proto_enumTypes[1]
}

func (x FSMStateType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FSMStateType.Descriptor instead.
func (FSMStateType) EnumDescriptor() ([]byte, []int) {
	return file_services_blockchain_blockchain_api_blockchain_api_proto_rawDescGZIP(), []int{1}
}

// swagger:model HealthResponse
type HealthResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Ok            bool                   `protobuf:"varint,1,opt,name=ok,proto3" json:"ok,omitempty"`
	Details       string                 `protobuf:"bytes,2,opt,name=details,proto3" json:"details,omitempty"`
	Timestamp     *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HealthResponse) Reset() {
	*x = HealthResponse{}
	mi := &file_services_blockchain_blockchain_api_blockchain_api_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HealthResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HealthResponse) ProtoMessage() {}

func (x *HealthResponse) ProtoReflect() protoreflect.Message {
	mi := &file_services_blockchain_blockchain_api_blockchain_api_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HealthResponse.ProtoReflect.Descriptor instead.
func (*HealthResponse) Descriptor() ([]byte, []int) {
	return file_services_blockchain_blockchain_api_blockchain_api_proto_rawDescGZIP(), []int{0}
}

func (x *HealthResponse) GetOk() bool {
	if x != nil {
		return x.Ok
	}
	return false
}

func (x *HealthResponse) GetDetails() string {
	if x != nil {
		return x.Details
	}
	return ""
}

func (x *HealthResponse) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

// swagger:model AddBlockRequest
type AddBlockRequest struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	Header           []byte                 `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	SubtreeHashes    [][]byte               `protobuf:"bytes,2,rep,name=subtree_hashes,json=subtreeHashes,proto3" json:"subtree_hashes,omitempty"` // The fist subtree will contain the coinbase txid (not the placeholder)
	CoinbaseTx       []byte                 `protobuf:"bytes,3,opt,name=coinbase_tx,json=coinbaseTx,proto3" json:"coinbase_tx,omitempty"`
	TransactionCount uint64                 `protobuf:"varint,4,opt,name=transaction_count,json=transactionCount,proto3" json:"transaction_count,omitempty"`
	SizeInBytes      uint64                 `protobuf:"varint,5,opt,name=size_in_bytes,json=sizeInBytes,proto3" json:"size_in_bytes,omitempty"`
	External         bool                   `protobuf:"varint,6,opt,name=external,proto3" json:"external,omitempty"`
	PeerId           string                 `protobuf:"bytes,7,opt,name=peer_id,json=peerId,proto3" json:"peer_id,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *AddBlockRequest) Reset() {
	*x = AddBlockRequest{}
	mi := &file_services_blockchain_blockchain_api_blockchain_api_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddBlockRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddBlockRequest) ProtoMessage() {}

func (x *AddBlockRequest) ProtoReflect() protoreflect.Message {
	mi := &file_services_blockchain_blockchain_api_blockchain_api_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddBlockRequest.ProtoReflect.Descriptor instead.
func (*AddBlockRequest) Descriptor() ([]byte, []int) {
	return file_services_blockchain_blockchain_api_blockchain_api_proto_rawDescGZIP(), []int{1}
}

func (x *AddBlockRequest) GetHeader() []byte {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *AddBlockRequest) GetSubtreeHashes() [][]byte {
	if x != nil {
		return x.SubtreeHashes
	}
	return nil
}

func (x *AddBlockRequest) GetCoinbaseTx() []byte {
	if x != nil {
		return x.CoinbaseTx
	}
	return nil
}

func (x *AddBlockRequest) GetTransactionCount() uint64 {
	if x != nil {
		return x.TransactionCount
	}
	return 0
}

func (x *AddBlockRequest) GetSizeInBytes() uint64 {
	if x != nil {
		return x.SizeInBytes
	}
	return 0
}

func (x *AddBlockRequest) GetExternal() bool {
	if x != nil {
		return x.External
	}
	return false
}

func (x *AddBlockRequest) GetPeerId() string {
	if x != nil {
		return x.PeerId
	}
	return ""
}

// swagger:model GetBlockRequest
type GetBlockRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Hash          []byte                 `protobuf:"bytes,1,opt,name=hash,proto3" json:"hash,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetBlockRequest) Reset() {
	*x = GetBlockRequest{}
	mi := &file_services_blockchain_blockchain_api_blockchain_api_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetBlockRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBlockRequest) ProtoMessage() {}

func (x *GetBlockRequest) ProtoReflect() protoreflect.Message {
	mi := &file_services_blockchain_blockchain_api_blockchain_api_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBlockRequest.ProtoReflect.Descriptor instead.
func (*GetBlockRequest) Descriptor() ([]byte, []int) {
	return file_services_blockchain_blockchain_api_blockchain_api_proto_rawDescGZIP(), []int{2}
}

func (x *GetBlockRequest) GetHash() []byte {
	if x != nil {
		return x.Hash
	}
	return nil
}

// swagger:model GetBlocksRequest
type GetBlocksRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Hash          []byte                 `protobuf:"bytes,1,opt,name=hash,proto3" json:"hash,omitempty"`
	Count         uint32                 `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetBlocksRequest) Reset() {
	*x = GetBlocksRequest{}
	mi := &file_services_blockchain_blockchain_api_blockchain_api_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetBlocksRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBlocksRequest) ProtoMessage() {}

func (x *GetBlocksRequest) ProtoReflect() protoreflect.Message {
	mi := &file_services_blockchain_blockchain_api_blockchain_api_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBlocksRequest.ProtoReflect.Descriptor instead.
func (*GetBlocksRequest) Descriptor() ([]byte, []int) {
	return file_services_blockchain_blockchain_api_blockchain_api_proto_rawDescGZIP(), []int{3}
}

func (x *GetBlocksRequest) GetHash() []byte {
	if x != nil {
		return x.Hash
	}
	return nil
}

func (x *GetBlocksRequest) GetCount() uint32 {
	if x != nil {
		return x.Count
	}
	return 0
}

// swagger:model GetBlocksResponse
type GetBlocksResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Blocks        [][]byte               `protobuf:"bytes,1,rep,name=blocks,proto3" json:"blocks,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetBlocksResponse) Reset() {
	*x = GetBlocksResponse{}
	mi := &file_services_blockchain_blockchain_api_blockchain_api_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetBlocksResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBlocksResponse) ProtoMessage() {}

func (x *GetBlocksResponse) ProtoReflect() protoreflect.Message {
	mi := &file_services_blockchain_blockchain_api_blockchain_api_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBlocksResponse.ProtoReflect.Descriptor instead.
func (*GetBlocksResponse) Descriptor() ([]byte, []int) {
	return file_services_blockchain_blockchain_api_blockchain_api_proto_rawDescGZIP(), []int{4}
}

func (x *GetBlocksResponse) GetBlocks() [][]byte {
	if x != nil {
		return x.Blocks
	}
	return nil
}

// swagger:model GetBlockByHeightRequest
type GetBlockByHeightRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Height        uint32                 `protobuf:"varint,1,opt,name=height,proto3" json:"height,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetBlockByHeightRequest) Reset() {
	*x = GetBlockByHeightRequest{}
	mi := &file_services_blockchain_blockchain_api_blockchain_api_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetBlockByHeightRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBlockByHeightRequest) ProtoMessage() {}

func (x *GetBlockByHeightRequest) ProtoReflect() protoreflect.Message {
	mi := &file_services_blockchain_blockchain_api_blockchain_api_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBlockByHeightRequest.ProtoReflect.Descriptor instead.
func (*GetBlockByHeightRequest) Descriptor() ([]byte, []int) {
	return file_services_blockchain_blockchain_api_blockchain_api_proto_rawDescGZIP(), []int{5}
}

func (x *GetBlockByHeightRequest) GetHeight() uint32 {
	if x != nil {
		return x.Height
	}
	return 0
}

// swagger:model GetBlockInChainByHeightHashRequest
type GetBlockInChainByHeightHashRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Height        uint32                 `protobuf:"varint,1,opt,name=height,proto3" json:"height,omitempty"`
	StartHash     []byte                 `protobuf:"bytes,2,opt,name=start_hash,json=startHash,proto3" json:"start_hash,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetBlockInChainByHeightHashRequest) Reset() {
	*x = GetBlockInChainByHeightHashRequest{}
	mi := &file_services_blockchain_blockchain_api_blockchain_api_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetBlockInChainByHeightHashRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBlockInChainByHeightHashRequest) ProtoMessage() {}

func (x *GetBlockInChainByHeightHashRequest) ProtoReflect() protoreflect.Message {
	mi := &file_services_blockchain_blockchain_api_blockchain_api_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBlockInChainByHeightHashRequest.ProtoReflect.Descriptor instead.
func (*GetBlockInChainByHeightHashRequest) Descriptor() ([]byte, []int) {
	return file_services_blockchain_blockchain_api_blockchain_api_proto_rawDescGZIP(), []int{6}
}

func (x *GetBlockInChainByHeightHashRequest) GetHeight() uint32 {
	if x != nil {
		return x.Height
	}
	return 0
}

func (x *GetBlockInChainByHeightHashRequest) GetStartHash() []byte {
	if x != nil {
		return x.StartHash
	}
	return nil
}

// swagger:model GetBlockResponse
type GetBlockResponse struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	Header           []byte                 `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	Height           uint32                 `protobuf:"varint,2,opt,name=height,proto3" json:"height,omitempty"`
	CoinbaseTx       []byte                 `protobuf:"bytes,3,opt,name=coinbase_tx,json=coinbaseTx,proto3" json:"coinbase_tx,omitempty"`
	TransactionCount uint64                 `protobuf:"varint,4,opt,name=transaction_count,json=transactionCount,proto3" json:"transaction_count,omitempty"`
	SubtreeHashes    [][]byte               `protobuf:"bytes,5,rep,name=subtree_hashes,json=subtreeHashes,proto3" json:"subtree_hashes,omitempty"`
	SizeInBytes      uint64                 `protobuf:"varint,6,opt,name=size_in_bytes,json=sizeInBytes,proto3" json:"size_in_bytes,omitempty"`
	Id               uint32                 `protobuf:"varint,7,opt,name=id,proto3" json:"id,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *GetBlockResponse) Reset() {
	*x = GetBlockResponse{}
	mi := &file_services_blockchain_blockchain_api_blockchain_api_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetBlockResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBlockResponse) ProtoMessage() {}

func (x *GetBlockResponse) ProtoReflect() protoreflect.Message {
	mi := &file_services_blockchain_blockchain_api_blockchain_api_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBlockResponse.ProtoReflect.Descriptor instead.
func (*GetBlockResponse) Descriptor() ([]byte, []int) {
	return file_services_blockchain_blockchain_api_blockchain_api_proto_rawDescGZIP(), []int{7}
}

func (x *GetBlockResponse) GetHeader() []byte {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *GetBlockResponse) GetHeight() uint32 {
	if x != nil {
		return x.Height
	}
	return 0
}

func (x *GetBlockResponse) GetCoinbaseTx() []byte {
	if x != nil {
		return x.CoinbaseTx
	}
	return nil
}

func (x *GetBlockResponse) GetTransactionCount() uint64 {
	if x != nil {
		return x.TransactionCount
	}
	return 0
}

func (x *GetBlockResponse) GetSubtreeHashes() [][]byte {
	if x != nil {
		return x.SubtreeHashes
	}
	return nil
}

func (x *GetBlockResponse) GetSizeInBytes() uint64 {
	if x != nil {
		return x.SizeInBytes
	}
	return 0
}

func (x *GetBlockResponse) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

// swagger:model GetBlockInChainByHeightHashResponse
type GetFullBlockResponse struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	FullBlockBytes []byte                 `protobuf:"bytes,1,opt,name=full_block_bytes,json=fullBlockBytes,proto3" json:"full_block_bytes,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *GetFullBlockResponse) Reset() {
	*x = GetFullBlockResponse{}
	mi := &file_services_blockchain_blockchain_api_blockchain_api_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetFullBlockResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFullBlockResponse) ProtoMessage() {}

func (x *GetFullBlockResponse) ProtoReflect() protoreflect.Message {
	mi := &file_services_blockchain_blockchain_api_blockchain_api_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFullBlockResponse.ProtoReflect.Descriptor instead.
func (*GetFullBlockResponse) Descriptor() ([]byte, []int) {
	return file_services_blockchain_blockchain_api_blockchain_api_proto_rawDescGZIP(), []int{8}
}

func (x *GetFullBlockResponse) GetFullBlockBytes() []byte {
	if x != nil {
		return x.FullBlockBytes
	}
	return nil
}

// swagger:model GetBlockGraphDataRequest
type GetBlockGraphDataRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PeriodMillis  uint64                 `protobuf:"varint,1,opt,name=period_millis,json=periodMillis,proto3" json:"period_millis,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetBlockGraphDataRequest) Reset() {
	*x = GetBlockGraphDataRequest{}
	mi := &file_services_blockchain_blockchain_api_blockchain_api_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetBlockGraphDataRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBlockGraphDataRequest) ProtoMessage() {}

func (x *GetBlockGraphDataRequest) ProtoReflect() protoreflect.Message {
	mi := &file_services_blockchain_blockchain_api_blockchain_api_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBlockGraphDataRequest.ProtoReflect.Descriptor instead.
func (*GetBlockGraphDataRequest) Descriptor() ([]byte, []int) {
	return file_services_blockchain_blockchain_api_blockchain_api_proto_rawDescGZIP(), []int{9}
}

func (x *GetBlockGraphDataRequest) GetPeriodMillis() uint64 {
	if x != nil {
		return x.PeriodMillis
	}
	return 0
}

// swagger:model GetBlockResponse
type GetBlockExistsResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Exists        bool                   `protobuf:"varint,1,opt,name=exists,proto3" json:"exists,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetBlockExistsResponse) Reset() {
	*x = GetBlockExistsResponse{}
	mi := &file_services_blockchain_blockchain_api_blockchain_api_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetBlockExistsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBlockExistsResponse) ProtoMessage() {}

func (x *GetBlockExistsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_services_blockchain_blockchain_api_blockchain_api_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBlockExistsResponse.ProtoReflect.Descriptor instead.
func (*GetBlockExistsResponse) Descriptor() ([]byte, []int) {
	return file_services_blockchain_blockchain_api_blockchain_api_proto_rawDescGZIP(), []int{10}
}

func (x *GetBlockExistsResponse) GetExists() bool {
	if x != nil {
		return x.Exists
	}
	return false
}

// swagger:model GetMedianTimeRequest
type GetMedianTimeRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	BlockHash     []byte                 `protobuf:"bytes,1,opt,name=blockHash,proto3" json:"blockHash,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetMedianTimeRequest) Reset() {
	*x = GetMedianTimeRequest{}
	mi := &file_services_blockchain_blockchain_api_blockchain_api_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetMedianTimeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMedianTimeRequest) ProtoMessage() {}

func (x *GetMedianTimeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_services_blockchain_blockchain_api_blockchain_api_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMedianTimeRequest.ProtoReflect.Descriptor instead.
func (*GetMedianTimeRequest) Descriptor() ([]byte, []int) {
	return file_services_blockchain_blockchain_api_blockchain_api_proto_rawDescGZIP(), []int{11}
}

func (x *GetMedianTimeRequest) GetBlockHash() []byte {
	if x != nil {
		return x.BlockHash
	}
	return nil
}

// swagger:model GetBlockHeadersRequest
type GetBlockHeadersRequest struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	StartHash       []byte                 `protobuf:"bytes,1,opt,name=startHash,proto3" json:"startHash,omitempty"`
	NumberOfHeaders uint64                 `protobuf:"varint,2,opt,name=numberOfHeaders,proto3" json:"numberOfHeaders,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *GetBlockHeadersRequest) Reset() {
	*x = GetBlockHeadersRequest{}
	mi := &file_services_blockchain_blockchain_api_blockchain_api_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetBlockHeadersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBlockHeadersRequest) ProtoMessage() {}

func (x *GetBlockHeadersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_services_blockchain_blockchain_api_blockchain_api_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBlockHeadersRequest.ProtoReflect.Descriptor instead.
func (*GetBlockHeadersRequest) Descriptor() ([]byte, []int) {
	return file_services_blockchain_blockchain_api_blockchain_api_proto_rawDescGZIP(), []int{12}
}

func (x *GetBlockHeadersRequest) GetStartHash() []byte {
	if x != nil {
		return x.StartHash
	}
	return nil
}

func (x *GetBlockHeadersRequest) GetNumberOfHeaders() uint64 {
	if x != nil {
		return x.NumberOfHeaders
	}
	return 0
}

// swagger:model GetBlockHeadersResponse
type GetBlockHeadersResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	BlockHeaders  [][]byte               `protobuf:"bytes,1,rep,name=blockHeaders,proto3" json:"blockHeaders,omitempty"`
	Metas         [][]byte               `protobuf:"bytes,2,rep,name=metas,proto3" json:"metas,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetBlockHeadersResponse) Reset() {
	*x = GetBlockHeadersResponse{}
	mi := &file_services_blockchain_blockchain_api_blockchain_api_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetBlockHeadersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBlockHeadersResponse) ProtoMessage() {}

func (x *GetBlockHeadersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_services_blockchain_blockchain_api_blockchain_api_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBlockHeadersResponse.ProtoReflect.Descriptor instead.
func (*GetBlockHeadersResponse) Descriptor() ([]byte, []int) {
	return file_services_blockchain_blockchain_api_blockchain_api_proto_rawDescGZIP(), []int{13}
}

func (x *GetBlockHeadersResponse) GetBlockHeaders() [][]byte {
	if x != nil {
		return x.BlockHeaders
	}
	return nil
}

func (x *GetBlockHeadersResponse) GetMetas() [][]byte {
	if x != nil {
		return x.Metas
	}
	return nil
}

// swagger:model GetBlockHeadersFromTillRequest
type GetBlockHeadersFromTillRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	StartHash     []byte                 `protobuf:"bytes,1,opt,name=startHash,proto3" json:"startHash,omitempty"`
	EndHash       []byte                 `protobuf:"bytes,2,opt,name=endHash,proto3" json:"endHash,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetBlockHeadersFromTillRequest) Reset() {
	*x = GetBlockHeadersFromTillRequest{}
	mi := &file_services_blockchain_blockchain_api_blockchain_api_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetBlockHeadersFromTillRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBlockHeadersFromTillRequest) ProtoMessage() {}

func (x *GetBlockHeadersFromTillRequest) ProtoReflect() protoreflect.Message {
	mi := &file_services_blockchain_blockchain_api_blockchain_api_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBlockHeadersFromTillRequest.ProtoReflect.Descriptor instead.
func (*GetBlockHeadersFromTillRequest) Descriptor() ([]byte, []int) {
	return file_services_blockchain_blockchain_api_blockchain_api_proto_rawDescGZIP(), []int{14}
}

func (x *GetBlockHeadersFromTillRequest) GetStartHash() []byte {
	if x != nil {
		return x.StartHash
	}
	return nil
}

func (x *GetBlockHeadersFromTillRequest) GetEndHash() []byte {
	if x != nil {
		return x.EndHash
	}
	return nil
}

// swagger:model GetBlockHeadersFromHeightRequest
type GetBlockHeadersFromHeightRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	StartHeight   uint32                 `protobuf:"varint,1,opt,name=startHeight,proto3" json:"startHeight,omitempty"`
	Limit         uint32                 `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetBlockHeadersFromHeightRequest) Reset() {
	*x = GetBlockHeadersFromHeightRequest{}
	mi := &file_services_blockchain_blockchain_api_blockchain_api_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetBlockHeadersFromHeightRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBlockHeadersFromHeightRequest) ProtoMessage() {}

func (x *GetBlockHeadersFromHeightRequest) ProtoReflect() protoreflect.Message {
	mi := &file_services_blockchain_blockchain_api_blockchain_api_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBlockHeadersFromHeightRequest.ProtoReflect.Descriptor instead.
func (*GetBlockHeadersFromHeightRequest) Descriptor() ([]byte, []int) {
	return file_services_blockchain_blockchain_api_blockchain_api_proto_rawDescGZIP(), []int{15}
}

func (x *GetBlockHeadersFromHeightRequest) GetStartHeight() uint32 {
	if x != nil {
		return x.StartHeight
	}
	return 0
}

func (x *GetBlockHeadersFromHeightRequest) GetLimit() uint32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

// swagger:model GetBlockHeadersFromHeightResponse
type GetBlockHeadersFromHeightResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	BlockHeaders  [][]byte               `protobuf:"bytes,1,rep,name=blockHeaders,proto3" json:"blockHeaders,omitempty"`
	Metas         [][]byte               `protobuf:"bytes,2,rep,name=metas,proto3" json:"metas,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetBlockHeadersFromHeightResponse) Reset() {
	*x = GetBlockHeadersFromHeightResponse{}
	mi := &file_services_blockchain_blockchain_api_blockchain_api_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetBlockHeadersFromHeightResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBlockHeadersFromHeightResponse) ProtoMessage() {}

func (x *GetBlockHeadersFromHeightResponse) ProtoReflect() protoreflect.Message {
	mi := &file_services_blockchain_blockchain_api_blockchain_api_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBlockHeadersFromHeightResponse.ProtoReflect.Descriptor instead.
func (*GetBlockHeadersFromHeightResponse) Descriptor() ([]byte, []int) {
	return file_services_blockchain_blockchain_api_blockchain_api_proto_rawDescGZIP(), []int{16}
}

func (x *GetBlockHeadersFromHeightResponse) GetBlockHeaders() [][]byte {
	if x != nil {
		return x.BlockHeaders
	}
	return nil
}

func (x *GetBlockHeadersFromHeightResponse) GetMetas() [][]byte {
	if x != nil {
		return x.Metas
	}
	return nil
}

// swagger:model GetBlockHeadersByHeightRequest
type GetBlockHeadersByHeightRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	StartHeight   uint32                 `protobuf:"varint,1,opt,name=startHeight,proto3" json:"startHeight,omitempty"`
	EndHeight     uint32                 `protobuf:"varint,2,opt,name=endHeight,proto3" json:"endHeight,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetBlockHeadersByHeightRequest) Reset() {
	*x = GetBlockHeadersByHeightRequest{}
	mi := &file_services_blockchain_blockchain_api_blockchain_api_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetBlockHeadersByHeightRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBlockHeadersByHeightRequest) ProtoMessage() {}

func (x *GetBlockHeadersByHeightRequest) ProtoReflect() protoreflect.Message {
	mi := &file_services_blockchain_blockchain_api_blockchain_api_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBlockHeadersByHeightRequest.ProtoReflect.Descriptor instead.
func (*GetBlockHeadersByHeightRequest) Descriptor() ([]byte, []int) {
	return file_services_blockchain_blockchain_api_blockchain_api_proto_rawDescGZIP(), []int{17}
}

func (x *GetBlockHeadersByHeightRequest) GetStartHeight() uint32 {
	if x != nil {
		return x.StartHeight
	}
	return 0
}

func (x *GetBlockHeadersByHeightRequest) GetEndHeight() uint32 {
	if x != nil {
		return x.EndHeight
	}
	return 0
}

// swagger:model GetBlockHeadersByHeightResponse
type GetBlockHeadersByHeightResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	BlockHeaders  [][]byte               `protobuf:"bytes,1,rep,name=blockHeaders,proto3" json:"blockHeaders,omitempty"`
	Metas         [][]byte               `protobuf:"bytes,2,rep,name=metas,proto3" json:"metas,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetBlockHeadersByHeightResponse) Reset() {
	*x = GetBlockHeadersByHeightResponse{}
	mi := &file_services_blockchain_blockchain_api_blockchain_api_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetBlockHeadersByHeightResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBlockHeadersByHeightResponse) ProtoMessage() {}

func (x *GetBlockHeadersByHeightResponse) ProtoReflect() protoreflect.Message {
	mi := &file_services_blockchain_blockchain_api_blockchain_api_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBlockHeadersByHeightResponse.ProtoReflect.Descriptor instead.
func (*GetBlockHeadersByHeightResponse) Descriptor() ([]byte, []int) {
	return file_services_blockchain_blockchain_api_blockchain_api_proto_rawDescGZIP(), []int{18}
}

func (x *GetBlockHeadersByHeightResponse) GetBlockHeaders() [][]byte {
	if x != nil {
		return x.BlockHeaders
	}
	return nil
}

func (x *GetBlockHeadersByHeightResponse) GetMetas() [][]byte {
	if x != nil {
		return x.Metas
	}
	return nil
}

// swagger:model GetBlockHeaderIDsResponse
type GetBlockHeaderIDsResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Ids           []uint32               `protobuf:"varint,1,rep,packed,name=ids,proto3" json:"ids,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetBlockHeaderIDsResponse) Reset() {
	*x = GetBlockHeaderIDsResponse{}
	mi := &file_services_blockchain_blockchain_api_blockchain_api_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetBlockHeaderIDsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBlockHeaderIDsResponse) ProtoMessage() {}

func (x *GetBlockHeaderIDsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_services_blockchain_blockchain_api_blockchain_api_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBlockHeaderIDsResponse.ProtoReflect.Descriptor instead.
func (*GetBlockHeaderIDsResponse) Descriptor() ([]byte, []int) {
	return file_services_blockchain_blockchain_api_blockchain_api_proto_rawDescGZIP(), []int{19}
}

func (x *GetBlockHeaderIDsResponse) GetIds() []uint32 {
	if x != nil {
		return x.Ids
	}
	return nil
}

// swagger:model GetMedianTimeResponse
type GetMedianTimeResponse struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	BlockHeaderTime []uint32               `protobuf:"varint,1,rep,packed,name=block_header_time,json=blockHeaderTime,proto3" json:"block_header_time,omitempty"` // This will return the nTimes of the last 11 (+1) blocks
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *GetMedianTimeResponse) Reset() {
	*x = GetMedianTimeResponse{}
	mi := &file_services_blockchain_blockchain_api_blockchain_api_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetMedianTimeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMedianTimeResponse) ProtoMessage() {}

func (x *GetMedianTimeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_services_blockchain_blockchain_api_blockchain_api_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMedianTimeResponse.ProtoReflect.Descriptor instead.
func (*GetMedianTimeResponse) Descriptor() ([]byte, []int) {
	return file_services_blockchain_blockchain_api_blockchain_api_proto_rawDescGZIP(), []int{20}
}

func (x *GetMedianTimeResponse) GetBlockHeaderTime() []uint32 {
	if x != nil {
		return x.BlockHeaderTime
	}
	return nil
}

// swagger:model GetBlockHeaderRequest
type GetBlockHeaderRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	BlockHash     []byte                 `protobuf:"bytes,1,opt,name=blockHash,proto3" json:"blockHash,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetBlockHeaderRequest) Reset() {
	*x = GetBlockHeaderRequest{}
	mi := &file_services_blockchain_blockchain_api_blockchain_api_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetBlockHeaderRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBlockHeaderRequest) ProtoMessage() {}

func (x *GetBlockHeaderRequest) ProtoReflect() protoreflect.Message {
	mi := &file_services_blockchain_blockchain_api_blockchain_api_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBlockHeaderRequest.ProtoReflect.Descriptor instead.
func (*GetBlockHeaderRequest) Descriptor() ([]byte, []int) {
	return file_services_blockchain_blockchain_api_blockchain_api_proto_rawDescGZIP(), []int{21}
}

func (x *GetBlockHeaderRequest) GetBlockHash() []byte {
	if x != nil {
		return x.BlockHash
	}
	return nil
}

// swagger:model CheckBlockIsCurrentChainRequest
type CheckBlockIsCurrentChainRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	BlockIDs      []uint32               `protobuf:"varint,1,rep,packed,name=blockIDs,proto3" json:"blockIDs,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CheckBlockIsCurrentChainRequest) Reset() {
	*x = CheckBlockIsCurrentChainRequest{}
	mi := &file_services_blockchain_blockchain_api_blockchain_api_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CheckBlockIsCurrentChainRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckBlockIsCurrentChainRequest) ProtoMessage() {}

func (x *CheckBlockIsCurrentChainRequest) ProtoReflect() protoreflect.Message {
	mi := &file_services_blockchain_blockchain_api_blockchain_api_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckBlockIsCurrentChainRequest.ProtoReflect.Descriptor instead.
func (*CheckBlockIsCurrentChainRequest) Descriptor() ([]byte, []int) {
	return file_services_blockchain_blockchain_api_blockchain_api_proto_rawDescGZIP(), []int{22}
}

func (x *CheckBlockIsCurrentChainRequest) GetBlockIDs() []uint32 {
	if x != nil {
		return x.BlockIDs
	}
	return nil
}

// swagger:model InvalidateBlockRequest
type InvalidateBlockRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	BlockHash     []byte                 `protobuf:"bytes,1,opt,name=blockHash,proto3" json:"blockHash,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *InvalidateBlockRequest) Reset() {
	*x = InvalidateBlockRequest{}
	mi := &file_services_blockchain_blockchain_api_blockchain_api_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *InvalidateBlockRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InvalidateBlockRequest) ProtoMessage() {}

func (x *InvalidateBlockRequest) ProtoReflect() protoreflect.Message {
	mi := &file_services_blockchain_blockchain_api_blockchain_api_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InvalidateBlockRequest.ProtoReflect.Descriptor instead.
func (*InvalidateBlockRequest) Descriptor() ([]byte, []int) {
	return file_services_blockchain_blockchain_api_blockchain_api_proto_rawDescGZIP(), []int{23}
}

func (x *InvalidateBlockRequest) GetBlockHash() []byte {
	if x != nil {
		return x.BlockHash
	}
	return nil
}

// swagger:model RevalidateBlockRequest
type RevalidateBlockRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	BlockHash     []byte                 `protobuf:"bytes,1,opt,name=blockHash,proto3" json:"blockHash,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RevalidateBlockRequest) Reset() {
	*x = RevalidateBlockRequest{}
	mi := &file_services_blockchain_blockchain_api_blockchain_api_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RevalidateBlockRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RevalidateBlockRequest) ProtoMessage() {}

func (x *RevalidateBlockRequest) ProtoReflect() protoreflect.Message {
	mi := &file_services_blockchain_blockchain_api_blockchain_api_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RevalidateBlockRequest.ProtoReflect.Descriptor instead.
func (*RevalidateBlockRequest) Descriptor() ([]byte, []int) {
	return file_services_blockchain_blockchain_api_blockchain_api_proto_rawDescGZIP(), []int{24}
}

func (x *RevalidateBlockRequest) GetBlockHash() []byte {
	if x != nil {
		return x.BlockHash
	}
	return nil
}

// swagger:model GetBlockHeaderResponse
type GetBlockHeaderResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	BlockHeader   []byte                 `protobuf:"bytes,1,opt,name=blockHeader,proto3" json:"blockHeader,omitempty"`
	Height        uint32                 `protobuf:"varint,2,opt,name=height,proto3" json:"height,omitempty"`
	TxCount       uint64                 `protobuf:"varint,3,opt,name=tx_count,json=txCount,proto3" json:"tx_count,omitempty"`
	SizeInBytes   uint64                 `protobuf:"varint,4,opt,name=size_in_bytes,json=sizeInBytes,proto3" json:"size_in_bytes,omitempty"`
	Miner         string                 `protobuf:"bytes,5,opt,name=miner,proto3" json:"miner,omitempty"`
	BlockTime     uint32                 `protobuf:"varint,6,opt,name=block_time,json=blockTime,proto3" json:"block_time,omitempty"`
	Timestamp     uint32                 `protobuf:"varint,7,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	ChainWork     []byte                 `protobuf:"bytes,8,opt,name=chain_work,json=chainWork,proto3" json:"chain_work,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetBlockHeaderResponse) Reset() {
	*x = GetBlockHeaderResponse{}
	mi := &file_services_blockchain_blockchain_api_blockchain_api_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetBlockHeaderResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBlockHeaderResponse) ProtoMessage() {}

func (x *GetBlockHeaderResponse) ProtoReflect() protoreflect.Message {
	mi := &file_services_blockchain_blockchain_api_blockchain_api_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBlockHeaderResponse.ProtoReflect.Descriptor instead.
func (*GetBlockHeaderResponse) Descriptor() ([]byte, []int) {
	return file_services_blockchain_blockchain_api_blockchain_api_proto_rawDescGZIP(), []int{25}
}

func (x *GetBlockHeaderResponse) GetBlockHeader() []byte {
	if x != nil {
		return x.BlockHeader
	}
	return nil
}

func (x *GetBlockHeaderResponse) GetHeight() uint32 {
	if x != nil {
		return x.Height
	}
	return 0
}

func (x *GetBlockHeaderResponse) GetTxCount() uint64 {
	if x != nil {
		return x.TxCount
	}
	return 0
}

func (x *GetBlockHeaderResponse) GetSizeInBytes() uint64 {
	if x != nil {
		return x.SizeInBytes
	}
	return 0
}

func (x *GetBlockHeaderResponse) GetMiner() string {
	if x != nil {
		return x.Miner
	}
	return ""
}

func (x *GetBlockHeaderResponse) GetBlockTime() uint32 {
	if x != nil {
		return x.BlockTime
	}
	return 0
}

func (x *GetBlockHeaderResponse) GetTimestamp() uint32 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *GetBlockHeaderResponse) GetChainWork() []byte {
	if x != nil {
		return x.ChainWork
	}
	return nil
}

// swagger:model CheckBlockIsCurrentChainResponse
type CheckBlockIsCurrentChainResponse struct {
	state                protoimpl.MessageState `protogen:"open.v1"`
	IsPartOfCurrentChain bool                   `protobuf:"varint,1,opt,name=isPartOfCurrentChain,proto3" json:"isPartOfCurrentChain,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *CheckBlockIsCurrentChainResponse) Reset() {
	*x = CheckBlockIsCurrentChainResponse{}
	mi := &file_services_blockchain_blockchain_api_blockchain_api_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CheckBlockIsCurrentChainResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckBlockIsCurrentChainResponse) ProtoMessage() {}

func (x *CheckBlockIsCurrentChainResponse) ProtoReflect() protoreflect.Message {
	mi := &file_services_blockchain_blockchain_api_blockchain_api_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckBlockIsCurrentChainResponse.ProtoReflect.Descriptor instead.
func (*CheckBlockIsCurrentChainResponse) Descriptor() ([]byte, []int) {
	return file_services_blockchain_blockchain_api_blockchain_api_proto_rawDescGZIP(), []int{26}
}

func (x *CheckBlockIsCurrentChainResponse) GetIsPartOfCurrentChain() bool {
	if x != nil {
		return x.IsPartOfCurrentChain
	}
	return false
}

// swagger:model SubscribeRequest
type SubscribeRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Source        string                 `protobuf:"bytes,1,opt,name=source,proto3" json:"source,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SubscribeRequest) Reset() {
	*x = SubscribeRequest{}
	mi := &file_services_blockchain_blockchain_api_blockchain_api_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SubscribeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscribeRequest) ProtoMessage() {}

func (x *SubscribeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_services_blockchain_blockchain_api_blockchain_api_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscribeRequest.ProtoReflect.Descriptor instead.
func (*SubscribeRequest) Descriptor() ([]byte, []int) {
	return file_services_blockchain_blockchain_api_blockchain_api_proto_rawDescGZIP(), []int{27}
}

func (x *SubscribeRequest) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

// swagger:model Notification
type Notification struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Type          model.NotificationType `protobuf:"varint,1,opt,name=type,proto3,enum=model.NotificationType" json:"type,omitempty"`
	Hash          []byte                 `protobuf:"bytes,2,opt,name=hash,proto3" json:"hash,omitempty"`
	Base_URL      string                 `protobuf:"bytes,3,opt,name=base_URL,json=baseURL,proto3" json:"base_URL,omitempty"`
	Metadata      *NotificationMetadata  `protobuf:"bytes,4,opt,name=metadata,proto3" json:"metadata,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Notification) Reset() {
	*x = Notification{}
	mi := &file_services_blockchain_blockchain_api_blockchain_api_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Notification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Notification) ProtoMessage() {}

func (x *Notification) ProtoReflect() protoreflect.Message {
	mi := &file_services_blockchain_blockchain_api_blockchain_api_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Notification.ProtoReflect.Descriptor instead.
func (*Notification) Descriptor() ([]byte, []int) {
	return file_services_blockchain_blockchain_api_blockchain_api_proto_rawDescGZIP(), []int{28}
}

func (x *Notification) GetType() model.NotificationType {
	if x != nil {
		return x.Type
	}
	return model.NotificationType(0)
}

func (x *Notification) GetHash() []byte {
	if x != nil {
		return x.Hash
	}
	return nil
}

func (x *Notification) GetBase_URL() string {
	if x != nil {
		return x.Base_URL
	}
	return ""
}

func (x *Notification) GetMetadata() *NotificationMetadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

// swagger:model NotificationMetadata
type NotificationMetadata struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// define a map of string to string
	Metadata      map[string]string `protobuf:"bytes,1,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NotificationMetadata) Reset() {
	*x = NotificationMetadata{}
	mi := &file_services_blockchain_blockchain_api_blockchain_api_proto_msgTypes[29]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NotificationMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NotificationMetadata) ProtoMessage() {}

func (x *NotificationMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_services_blockchain_blockchain_api_blockchain_api_proto_msgTypes[29]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NotificationMetadata.ProtoReflect.Descriptor instead.
func (*NotificationMetadata) Descriptor() ([]byte, []int) {
	return file_services_blockchain_blockchain_api_blockchain_api_proto_rawDescGZIP(), []int{29}
}

func (x *NotificationMetadata) GetMetadata() map[string]string {
	if x != nil {
		return x.Metadata
	}
	return nil
}

// swagger:model StateRequest
type GetStateRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Key           string                 `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetStateRequest) Reset() {
	*x = GetStateRequest{}
	mi := &file_services_blockchain_blockchain_api_blockchain_api_proto_msgTypes[30]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetStateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetStateRequest) ProtoMessage() {}

func (x *GetStateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_services_blockchain_blockchain_api_blockchain_api_proto_msgTypes[30]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetStateRequest.ProtoReflect.Descriptor instead.
func (*GetStateRequest) Descriptor() ([]byte, []int) {
	return file_services_blockchain_blockchain_api_blockchain_api_proto_rawDescGZIP(), []int{30}
}

func (x *GetStateRequest) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

// swagger:model StateResponse
type StateResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Data          []byte                 `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StateResponse) Reset() {
	*x = StateResponse{}
	mi := &file_services_blockchain_blockchain_api_blockchain_api_proto_msgTypes[31]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StateResponse) ProtoMessage() {}

func (x *StateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_services_blockchain_blockchain_api_blockchain_api_proto_msgTypes[31]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StateResponse.ProtoReflect.Descriptor instead.
func (*StateResponse) Descriptor() ([]byte, []int) {
	return file_services_blockchain_blockchain_api_blockchain_api_proto_rawDescGZIP(), []int{31}
}

func (x *StateResponse) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

// swagger:model SetStateRequest
type SetStateRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Key           string                 `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Data          []byte                 `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SetStateRequest) Reset() {
	*x = SetStateRequest{}
	mi := &file_services_blockchain_blockchain_api_blockchain_api_proto_msgTypes[32]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetStateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetStateRequest) ProtoMessage() {}

func (x *SetStateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_services_blockchain_blockchain_api_blockchain_api_proto_msgTypes[32]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetStateRequest.ProtoReflect.Descriptor instead.
func (*SetStateRequest) Descriptor() ([]byte, []int) {
	return file_services_blockchain_blockchain_api_blockchain_api_proto_rawDescGZIP(), []int{32}
}

func (x *SetStateRequest) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *SetStateRequest) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

// swagger:model GetLastNBlocksRequest
type GetLastNBlocksRequest struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	NumberOfBlocks int64                  `protobuf:"varint,1,opt,name=numberOfBlocks,proto3" json:"numberOfBlocks,omitempty"`
	IncludeOrphans bool                   `protobuf:"varint,2,opt,name=includeOrphans,proto3" json:"includeOrphans,omitempty"`
	FromHeight     uint32                 `protobuf:"varint,3,opt,name=fromHeight,proto3" json:"fromHeight,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *GetLastNBlocksRequest) Reset() {
	*x = GetLastNBlocksRequest{}
	mi := &file_services_blockchain_blockchain_api_blockchain_api_proto_msgTypes[33]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetLastNBlocksRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLastNBlocksRequest) ProtoMessage() {}

func (x *GetLastNBlocksRequest) ProtoReflect() protoreflect.Message {
	mi := &file_services_blockchain_blockchain_api_blockchain_api_proto_msgTypes[33]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLastNBlocksRequest.ProtoReflect.Descriptor instead.
func (*GetLastNBlocksRequest) Descriptor() ([]byte, []int) {
	return file_services_blockchain_blockchain_api_blockchain_api_proto_rawDescGZIP(), []int{33}
}

func (x *GetLastNBlocksRequest) GetNumberOfBlocks() int64 {
	if x != nil {
		return x.NumberOfBlocks
	}
	return 0
}

func (x *GetLastNBlocksRequest) GetIncludeOrphans() bool {
	if x != nil {
		return x.IncludeOrphans
	}
	return false
}

func (x *GetLastNBlocksRequest) GetFromHeight() uint32 {
	if x != nil {
		return x.FromHeight
	}
	return 0
}

// swagger:model GetLastNBlocksResponse
type GetLastNBlocksResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Blocks        []*model.BlockInfo     `protobuf:"bytes,1,rep,name=blocks,proto3" json:"blocks,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetLastNBlocksResponse) Reset() {
	*x = GetLastNBlocksResponse{}
	mi := &file_services_blockchain_blockchain_api_blockchain_api_proto_msgTypes[34]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetLastNBlocksResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLastNBlocksResponse) ProtoMessage() {}

func (x *GetLastNBlocksResponse) ProtoReflect() protoreflect.Message {
	mi := &file_services_blockchain_blockchain_api_blockchain_api_proto_msgTypes[34]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLastNBlocksResponse.ProtoReflect.Descriptor instead.
func (*GetLastNBlocksResponse) Descriptor() ([]byte, []int) {
	return file_services_blockchain_blockchain_api_blockchain_api_proto_rawDescGZIP(), []int{34}
}

func (x *GetLastNBlocksResponse) GetBlocks() []*model.BlockInfo {
	if x != nil {
		return x.Blocks
	}
	return nil
}

// swagger:model GetSuitableBlockRequest
type GetSuitableBlockRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Hash          []byte                 `protobuf:"bytes,1,opt,name=hash,proto3" json:"hash,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetSuitableBlockRequest) Reset() {
	*x = GetSuitableBlockRequest{}
	mi := &file_services_blockchain_blockchain_api_blockchain_api_proto_msgTypes[35]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetSuitableBlockRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSuitableBlockRequest) ProtoMessage() {}

func (x *GetSuitableBlockRequest) ProtoReflect() protoreflect.Message {
	mi := &file_services_blockchain_blockchain_api_blockchain_api_proto_msgTypes[35]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSuitableBlockRequest.ProtoReflect.Descriptor instead.
func (*GetSuitableBlockRequest) Descriptor() ([]byte, []int) {
	return file_services_blockchain_blockchain_api_blockchain_api_proto_rawDescGZIP(), []int{35}
}

func (x *GetSuitableBlockRequest) GetHash() []byte {
	if x != nil {
		return x.Hash
	}
	return nil
}

// swagger:model GetSuitableBlockResponse
type GetSuitableBlockResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Block         *model.SuitableBlock   `protobuf:"bytes,1,opt,name=block,proto3" json:"block,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetSuitableBlockResponse) Reset() {
	*x = GetSuitableBlockResponse{}
	mi := &file_services_blockchain_blockchain_api_blockchain_api_proto_msgTypes[36]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetSuitableBlockResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSuitableBlockResponse) ProtoMessage() {}

func (x *GetSuitableBlockResponse) ProtoReflect() protoreflect.Message {
	mi := &file_services_blockchain_blockchain_api_blockchain_api_proto_msgTypes[36]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSuitableBlockResponse.ProtoReflect.Descriptor instead.
func (*GetSuitableBlockResponse) Descriptor() ([]byte, []int) {
	return file_services_blockchain_blockchain_api_blockchain_api_proto_rawDescGZIP(), []int{36}
}

func (x *GetSuitableBlockResponse) GetBlock() *model.SuitableBlock {
	if x != nil {
		return x.Block
	}
	return nil
}

// swagger:model GetHashOfAncestorBlockRequest
type GetHashOfAncestorBlockRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Hash          []byte                 `protobuf:"bytes,1,opt,name=hash,proto3" json:"hash,omitempty"`
	Depth         uint32                 `protobuf:"varint,2,opt,name=depth,proto3" json:"depth,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetHashOfAncestorBlockRequest) Reset() {
	*x = GetHashOfAncestorBlockRequest{}
	mi := &file_services_blockchain_blockchain_api_blockchain_api_proto_msgTypes[37]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetHashOfAncestorBlockRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetHashOfAncestorBlockRequest) ProtoMessage() {}

func (x *GetHashOfAncestorBlockRequest) ProtoReflect() protoreflect.Message {
	mi := &file_services_blockchain_blockchain_api_blockchain_api_proto_msgTypes[37]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetHashOfAncestorBlockRequest.ProtoReflect.Descriptor instead.
func (*GetHashOfAncestorBlockRequest) Descriptor() ([]byte, []int) {
	return file_services_blockchain_blockchain_api_blockchain_api_proto_rawDescGZIP(), []int{37}
}

func (x *GetHashOfAncestorBlockRequest) GetHash() []byte {
	if x != nil {
		return x.Hash
	}
	return nil
}

func (x *GetHashOfAncestorBlockRequest) GetDepth() uint32 {
	if x != nil {
		return x.Depth
	}
	return 0
}

// swagger:model GetHashOfAncestorBlockResponse
type GetHashOfAncestorBlockResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Hash          []byte                 `protobuf:"bytes,1,opt,name=hash,proto3" json:"hash,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetHashOfAncestorBlockResponse) Reset() {
	*x = GetHashOfAncestorBlockResponse{}
	mi := &file_services_blockchain_blockchain_api_blockchain_api_proto_msgTypes[38]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetHashOfAncestorBlockResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetHashOfAncestorBlockResponse) ProtoMessage() {}

func (x *GetHashOfAncestorBlockResponse) ProtoReflect() protoreflect.Message {
	mi := &file_services_blockchain_blockchain_api_blockchain_api_proto_msgTypes[38]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetHashOfAncestorBlockResponse.ProtoReflect.Descriptor instead.
func (*GetHashOfAncestorBlockResponse) Descriptor() ([]byte, []int) {
	return file_services_blockchain_blockchain_api_blockchain_api_proto_rawDescGZIP(), []int{38}
}

func (x *GetHashOfAncestorBlockResponse) GetHash() []byte {
	if x != nil {
		return x.Hash
	}
	return nil
}

// swagger:model GGetNextWorkRequiredRequest
type GetNextWorkRequiredRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	BlockHash     []byte                 `protobuf:"bytes,1,opt,name=blockHash,proto3" json:"blockHash,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetNextWorkRequiredRequest) Reset() {
	*x = GetNextWorkRequiredRequest{}
	mi := &file_services_blockchain_blockchain_api_blockchain_api_proto_msgTypes[39]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetNextWorkRequiredRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNextWorkRequiredRequest) ProtoMessage() {}

func (x *GetNextWorkRequiredRequest) ProtoReflect() protoreflect.Message {
	mi := &file_services_blockchain_blockchain_api_blockchain_api_proto_msgTypes[39]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNextWorkRequiredRequest.ProtoReflect.Descriptor instead.
func (*GetNextWorkRequiredRequest) Descriptor() ([]byte, []int) {
	return file_services_blockchain_blockchain_api_blockchain_api_proto_rawDescGZIP(), []int{39}
}

func (x *GetNextWorkRequiredRequest) GetBlockHash() []byte {
	if x != nil {
		return x.BlockHash
	}
	return nil
}

// swagger:model GGetNextWorkRequiredResponse
type GetNextWorkRequiredResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Bits          []byte                 `protobuf:"bytes,1,opt,name=bits,proto3" json:"bits,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetNextWorkRequiredResponse) Reset() {
	*x = GetNextWorkRequiredResponse{}
	mi := &file_services_blockchain_blockchain_api_blockchain_api_proto_msgTypes[40]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetNextWorkRequiredResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNextWorkRequiredResponse) ProtoMessage() {}

func (x *GetNextWorkRequiredResponse) ProtoReflect() protoreflect.Message {
	mi := &file_services_blockchain_blockchain_api_blockchain_api_proto_msgTypes[40]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNextWorkRequiredResponse.ProtoReflect.Descriptor instead.
func (*GetNextWorkRequiredResponse) Descriptor() ([]byte, []int) {
	return file_services_blockchain_blockchain_api_blockchain_api_proto_rawDescGZIP(), []int{40}
}

func (x *GetNextWorkRequiredResponse) GetBits() []byte {
	if x != nil {
		return x.Bits
	}
	return nil
}

// swagger:model SetBlockMinedSetRequest
type SetBlockMinedSetRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	BlockHash     []byte                 `protobuf:"bytes,1,opt,name=blockHash,proto3" json:"blockHash,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SetBlockMinedSetRequest) Reset() {
	*x = SetBlockMinedSetRequest{}
	mi := &file_services_blockchain_blockchain_api_blockchain_api_proto_msgTypes[41]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetBlockMinedSetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetBlockMinedSetRequest) ProtoMessage() {}

func (x *SetBlockMinedSetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_services_blockchain_blockchain_api_blockchain_api_proto_msgTypes[41]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetBlockMinedSetRequest.ProtoReflect.Descriptor instead.
func (*SetBlockMinedSetRequest) Descriptor() ([]byte, []int) {
	return file_services_blockchain_blockchain_api_blockchain_api_proto_rawDescGZIP(), []int{41}
}

func (x *SetBlockMinedSetRequest) GetBlockHash() []byte {
	if x != nil {
		return x.BlockHash
	}
	return nil
}

// swagger:model GetBlocksMinedNotSetResponse
type GetBlocksMinedNotSetResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	BlockBytes    [][]byte               `protobuf:"bytes,1,rep,name=blockBytes,proto3" json:"blockBytes,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetBlocksMinedNotSetResponse) Reset() {
	*x = GetBlocksMinedNotSetResponse{}
	mi := &file_services_blockchain_blockchain_api_blockchain_api_proto_msgTypes[42]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetBlocksMinedNotSetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBlocksMinedNotSetResponse) ProtoMessage() {}

func (x *GetBlocksMinedNotSetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_services_blockchain_blockchain_api_blockchain_api_proto_msgTypes[42]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBlocksMinedNotSetResponse.ProtoReflect.Descriptor instead.
func (*GetBlocksMinedNotSetResponse) Descriptor() ([]byte, []int) {
	return file_services_blockchain_blockchain_api_blockchain_api_proto_rawDescGZIP(), []int{42}
}

func (x *GetBlocksMinedNotSetResponse) GetBlockBytes() [][]byte {
	if x != nil {
		return x.BlockBytes
	}
	return nil
}

// swagger:model SetBlockSubtreesSetRequest
type SetBlockSubtreesSetRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	BlockHash     []byte                 `protobuf:"bytes,1,opt,name=blockHash,proto3" json:"blockHash,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SetBlockSubtreesSetRequest) Reset() {
	*x = SetBlockSubtreesSetRequest{}
	mi := &file_services_blockchain_blockchain_api_blockchain_api_proto_msgTypes[43]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetBlockSubtreesSetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetBlockSubtreesSetRequest) ProtoMessage() {}

func (x *SetBlockSubtreesSetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_services_blockchain_blockchain_api_blockchain_api_proto_msgTypes[43]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetBlockSubtreesSetRequest.ProtoReflect.Descriptor instead.
func (*SetBlockSubtreesSetRequest) Descriptor() ([]byte, []int) {
	return file_services_blockchain_blockchain_api_blockchain_api_proto_rawDescGZIP(), []int{43}
}

func (x *SetBlockSubtreesSetRequest) GetBlockHash() []byte {
	if x != nil {
		return x.BlockHash
	}
	return nil
}

// swagger:model GetBlocksSubtreesNotSetResponse
type GetBlocksSubtreesNotSetResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	BlockBytes    [][]byte               `protobuf:"bytes,1,rep,name=blockBytes,proto3" json:"blockBytes,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetBlocksSubtreesNotSetResponse) Reset() {
	*x = GetBlocksSubtreesNotSetResponse{}
	mi := &file_services_blockchain_blockchain_api_blockchain_api_proto_msgTypes[44]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetBlocksSubtreesNotSetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBlocksSubtreesNotSetResponse) ProtoMessage() {}

func (x *GetBlocksSubtreesNotSetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_services_blockchain_blockchain_api_blockchain_api_proto_msgTypes[44]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBlocksSubtreesNotSetResponse.ProtoReflect.Descriptor instead.
func (*GetBlocksSubtreesNotSetResponse) Descriptor() ([]byte, []int) {
	return file_services_blockchain_blockchain_api_blockchain_api_proto_rawDescGZIP(), []int{44}
}

func (x *GetBlocksSubtreesNotSetResponse) GetBlockBytes() [][]byte {
	if x != nil {
		return x.BlockBytes
	}
	return nil
}

// swagger:model GetFSMStateResponse
type GetFSMStateResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	State         FSMStateType           `protobuf:"varint,1,opt,name=state,proto3,enum=blockchain_api.FSMStateType" json:"state,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetFSMStateResponse) Reset() {
	*x = GetFSMStateResponse{}
	mi := &file_services_blockchain_blockchain_api_blockchain_api_proto_msgTypes[45]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetFSMStateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFSMStateResponse) ProtoMessage() {}

func (x *GetFSMStateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_services_blockchain_blockchain_api_blockchain_api_proto_msgTypes[45]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFSMStateResponse.ProtoReflect.Descriptor instead.
func (*GetFSMStateResponse) Descriptor() ([]byte, []int) {
	return file_services_blockchain_blockchain_api_blockchain_api_proto_rawDescGZIP(), []int{45}
}

func (x *GetFSMStateResponse) GetState() FSMStateType {
	if x != nil {
		return x.State
	}
	return FSMStateType_IDLE
}

// swagger:model WaitFSMToTransitionRequest
type WaitFSMToTransitionRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	State         FSMStateType           `protobuf:"varint,1,opt,name=state,proto3,enum=blockchain_api.FSMStateType" json:"state,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *WaitFSMToTransitionRequest) Reset() {
	*x = WaitFSMToTransitionRequest{}
	mi := &file_services_blockchain_blockchain_api_blockchain_api_proto_msgTypes[46]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WaitFSMToTransitionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WaitFSMToTransitionRequest) ProtoMessage() {}

func (x *WaitFSMToTransitionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_services_blockchain_blockchain_api_blockchain_api_proto_msgTypes[46]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WaitFSMToTransitionRequest.ProtoReflect.Descriptor instead.
func (*WaitFSMToTransitionRequest) Descriptor() ([]byte, []int) {
	return file_services_blockchain_blockchain_api_blockchain_api_proto_rawDescGZIP(), []int{46}
}

func (x *WaitFSMToTransitionRequest) GetState() FSMStateType {
	if x != nil {
		return x.State
	}
	return FSMStateType_IDLE
}

// swagger:model SendFSMEventRequest
type SendFSMEventRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Event         FSMEventType           `protobuf:"varint,1,opt,name=event,proto3,enum=blockchain_api.FSMEventType" json:"event,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SendFSMEventRequest) Reset() {
	*x = SendFSMEventRequest{}
	mi := &file_services_blockchain_blockchain_api_blockchain_api_proto_msgTypes[47]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SendFSMEventRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendFSMEventRequest) ProtoMessage() {}

func (x *SendFSMEventRequest) ProtoReflect() protoreflect.Message {
	mi := &file_services_blockchain_blockchain_api_blockchain_api_proto_msgTypes[47]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendFSMEventRequest.ProtoReflect.Descriptor instead.
func (*SendFSMEventRequest) Descriptor() ([]byte, []int) {
	return file_services_blockchain_blockchain_api_blockchain_api_proto_rawDescGZIP(), []int{47}
}

func (x *SendFSMEventRequest) GetEvent() FSMEventType {
	if x != nil {
		return x.Event
	}
	return FSMEventType_STOP
}

type GetBlockLocatorRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Hash          []byte                 `protobuf:"bytes,1,opt,name=hash,proto3" json:"hash,omitempty"`
	Height        uint32                 `protobuf:"varint,2,opt,name=height,proto3" json:"height,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetBlockLocatorRequest) Reset() {
	*x = GetBlockLocatorRequest{}
	mi := &file_services_blockchain_blockchain_api_blockchain_api_proto_msgTypes[48]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetBlockLocatorRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBlockLocatorRequest) ProtoMessage() {}

func (x *GetBlockLocatorRequest) ProtoReflect() protoreflect.Message {
	mi := &file_services_blockchain_blockchain_api_blockchain_api_proto_msgTypes[48]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBlockLocatorRequest.ProtoReflect.Descriptor instead.
func (*GetBlockLocatorRequest) Descriptor() ([]byte, []int) {
	return file_services_blockchain_blockchain_api_blockchain_api_proto_rawDescGZIP(), []int{48}
}

func (x *GetBlockLocatorRequest) GetHash() []byte {
	if x != nil {
		return x.Hash
	}
	return nil
}

func (x *GetBlockLocatorRequest) GetHeight() uint32 {
	if x != nil {
		return x.Height
	}
	return 0
}

type GetBlockLocatorResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Locator       [][]byte               `protobuf:"bytes,1,rep,name=locator,proto3" json:"locator,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetBlockLocatorResponse) Reset() {
	*x = GetBlockLocatorResponse{}
	mi := &file_services_blockchain_blockchain_api_blockchain_api_proto_msgTypes[49]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetBlockLocatorResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBlockLocatorResponse) ProtoMessage() {}

func (x *GetBlockLocatorResponse) ProtoReflect() protoreflect.Message {
	mi := &file_services_blockchain_blockchain_api_blockchain_api_proto_msgTypes[49]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBlockLocatorResponse.ProtoReflect.Descriptor instead.
func (*GetBlockLocatorResponse) Descriptor() ([]byte, []int) {
	return file_services_blockchain_blockchain_api_blockchain_api_proto_rawDescGZIP(), []int{49}
}

func (x *GetBlockLocatorResponse) GetLocator() [][]byte {
	if x != nil {
		return x.Locator
	}
	return nil
}

type LocateBlockHeadersRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Locator       [][]byte               `protobuf:"bytes,1,rep,name=locator,proto3" json:"locator,omitempty"`
	HashStop      []byte                 `protobuf:"bytes,2,opt,name=hash_stop,json=hashStop,proto3" json:"hash_stop,omitempty"`
	MaxHashes     uint32                 `protobuf:"varint,3,opt,name=max_hashes,json=maxHashes,proto3" json:"max_hashes,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LocateBlockHeadersRequest) Reset() {
	*x = LocateBlockHeadersRequest{}
	mi := &file_services_blockchain_blockchain_api_blockchain_api_proto_msgTypes[50]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LocateBlockHeadersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LocateBlockHeadersRequest) ProtoMessage() {}

func (x *LocateBlockHeadersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_services_blockchain_blockchain_api_blockchain_api_proto_msgTypes[50]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LocateBlockHeadersRequest.ProtoReflect.Descriptor instead.
func (*LocateBlockHeadersRequest) Descriptor() ([]byte, []int) {
	return file_services_blockchain_blockchain_api_blockchain_api_proto_rawDescGZIP(), []int{50}
}

func (x *LocateBlockHeadersRequest) GetLocator() [][]byte {
	if x != nil {
		return x.Locator
	}
	return nil
}

func (x *LocateBlockHeadersRequest) GetHashStop() []byte {
	if x != nil {
		return x.HashStop
	}
	return nil
}

func (x *LocateBlockHeadersRequest) GetMaxHashes() uint32 {
	if x != nil {
		return x.MaxHashes
	}
	return 0
}

type LocateBlockHeadersResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	BlockHeaders  [][]byte               `protobuf:"bytes,1,rep,name=block_headers,json=blockHeaders,proto3" json:"block_headers,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LocateBlockHeadersResponse) Reset() {
	*x = LocateBlockHeadersResponse{}
	mi := &file_services_blockchain_blockchain_api_blockchain_api_proto_msgTypes[51]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LocateBlockHeadersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LocateBlockHeadersResponse) ProtoMessage() {}

func (x *LocateBlockHeadersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_services_blockchain_blockchain_api_blockchain_api_proto_msgTypes[51]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LocateBlockHeadersResponse.ProtoReflect.Descriptor instead.
func (*LocateBlockHeadersResponse) Descriptor() ([]byte, []int) {
	return file_services_blockchain_blockchain_api_blockchain_api_proto_rawDescGZIP(), []int{51}
}

func (x *LocateBlockHeadersResponse) GetBlockHeaders() [][]byte {
	if x != nil {
		return x.BlockHeaders
	}
	return nil
}

// swagger:model GetBestHeightAndTimeResponse
type GetBestHeightAndTimeResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Height        uint32                 `protobuf:"varint,1,opt,name=height,proto3" json:"height,omitempty"`
	Time          uint32                 `protobuf:"varint,2,opt,name=time,proto3" json:"time,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetBestHeightAndTimeResponse) Reset() {
	*x = GetBestHeightAndTimeResponse{}
	mi := &file_services_blockchain_blockchain_api_blockchain_api_proto_msgTypes[52]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetBestHeightAndTimeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBestHeightAndTimeResponse) ProtoMessage() {}

func (x *GetBestHeightAndTimeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_services_blockchain_blockchain_api_blockchain_api_proto_msgTypes[52]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBestHeightAndTimeResponse.ProtoReflect.Descriptor instead.
func (*GetBestHeightAndTimeResponse) Descriptor() ([]byte, []int) {
	return file_services_blockchain_blockchain_api_blockchain_api_proto_rawDescGZIP(), []int{52}
}

func (x *GetBestHeightAndTimeResponse) GetHeight() uint32 {
	if x != nil {
		return x.Height
	}
	return 0
}

func (x *GetBestHeightAndTimeResponse) GetTime() uint32 {
	if x != nil {
		return x.Time
	}
	return 0
}

var File_services_blockchain_blockchain_api_blockchain_api_proto protoreflect.FileDescriptor

var file_services_blockchain_blockchain_api_blockchain_api_proto_rawDesc = []byte{
	0x0a, 0x37, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2f, 0x62, 0x6c, 0x6f, 0x63, 0x6b,
	0x63, 0x68, 0x61, 0x69, 0x6e, 0x2f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e,
	0x5f, 0x61, 0x70, 0x69, 0x2f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f,
	0x61, 0x70, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0e, 0x62, 0x6c, 0x6f, 0x63, 0x6b,
	0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x61, 0x70, 0x69, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74,
	0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x11, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2f, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x74, 0x0a, 0x0e, 0x48, 0x65,
	0x61, 0x6c, 0x74, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02,
	0x6f, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x02, 0x6f, 0x6b, 0x12, 0x18, 0x0a, 0x07,
	0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x64,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x38, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x22, 0xf7, 0x01, 0x0a, 0x0f, 0x41, 0x64, 0x64, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x25, 0x0a, 0x0e,
	0x73, 0x75, 0x62, 0x74, 0x72, 0x65, 0x65, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x65, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0c, 0x52, 0x0d, 0x73, 0x75, 0x62, 0x74, 0x72, 0x65, 0x65, 0x48, 0x61, 0x73,
	0x68, 0x65, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73, 0x65, 0x5f,
	0x74, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x63, 0x6f, 0x69, 0x6e, 0x62, 0x61,
	0x73, 0x65, 0x54, 0x78, 0x12, 0x2b, 0x0a, 0x11, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x10, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x22, 0x0a, 0x0d, 0x73, 0x69, 0x7a, 0x65, 0x5f, 0x69, 0x6e, 0x5f, 0x62, 0x79, 0x74,
	0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x73, 0x69, 0x7a, 0x65, 0x49, 0x6e,
	0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x70, 0x65, 0x65, 0x72, 0x49, 0x64, 0x22, 0x25, 0x0a, 0x0f, 0x47, 0x65,
	0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a,
	0x04, 0x68, 0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x68, 0x61, 0x73,
	0x68, 0x22, 0x3c, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x61, 0x73, 0x68, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x04, 0x68, 0x61, 0x73, 0x68, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22,
	0x2b, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0c, 0x52, 0x06, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x22, 0x31, 0x0a, 0x17,
	0x47, 0x65, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x42, 0x79, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x22,
	0x5b, 0x0a, 0x22, 0x47, 0x65, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x49, 0x6e, 0x43, 0x68, 0x61,
	0x69, 0x6e, 0x42, 0x79, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x48, 0x61, 0x73, 0x68, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x1d, 0x0a,
	0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x48, 0x61, 0x73, 0x68, 0x22, 0xeb, 0x01, 0x0a,
	0x10, 0x47, 0x65, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x65, 0x69,
	0x67, 0x68, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68,
	0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x74, 0x78,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x63, 0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73, 0x65,
	0x54, 0x78, 0x12, 0x2b, 0x0a, 0x11, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x10, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x25, 0x0a, 0x0e, 0x73, 0x75, 0x62, 0x74, 0x72, 0x65, 0x65, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x65,
	0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x0d, 0x73, 0x75, 0x62, 0x74, 0x72, 0x65, 0x65,
	0x48, 0x61, 0x73, 0x68, 0x65, 0x73, 0x12, 0x22, 0x0a, 0x0d, 0x73, 0x69, 0x7a, 0x65, 0x5f, 0x69,
	0x6e, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x73,
	0x69, 0x7a, 0x65, 0x49, 0x6e, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x22, 0x40, 0x0a, 0x14, 0x47, 0x65,
	0x74, 0x46, 0x75, 0x6c, 0x6c, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x66, 0x75, 0x6c, 0x6c, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b,
	0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0e, 0x66, 0x75,
	0x6c, 0x6c, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x42, 0x79, 0x74, 0x65, 0x73, 0x22, 0x3f, 0x0a, 0x18,
	0x47, 0x65, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x47, 0x72, 0x61, 0x70, 0x68, 0x44, 0x61, 0x74,
	0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x65, 0x72, 0x69,
	0x6f, 0x64, 0x5f, 0x6d, 0x69, 0x6c, 0x6c, 0x69, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x0c, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x4d, 0x69, 0x6c, 0x6c, 0x69, 0x73, 0x22, 0x30, 0x0a,
	0x16, 0x47, 0x65, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x45, 0x78, 0x69, 0x73, 0x74, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x78, 0x69, 0x73, 0x74,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x22,
	0x34, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x6e, 0x54, 0x69, 0x6d, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x62, 0x6c, 0x6f, 0x63, 0x6b,
	0x48, 0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x62, 0x6c, 0x6f, 0x63,
	0x6b, 0x48, 0x61, 0x73, 0x68, 0x22, 0x60, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1c, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x48, 0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x48, 0x61, 0x73, 0x68, 0x12, 0x28, 0x0a,
	0x0f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66,
	0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x22, 0x53, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x0c, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x48,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x65, 0x74, 0x61, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x05, 0x6d, 0x65, 0x74, 0x61, 0x73, 0x22, 0x58, 0x0a, 0x1e,
	0x47, 0x65, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x46,
	0x72, 0x6f, 0x6d, 0x54, 0x69, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c,
	0x0a, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x48, 0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x48, 0x61, 0x73, 0x68, 0x12, 0x18, 0x0a, 0x07,
	0x65, 0x6e, 0x64, 0x48, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x65,
	0x6e, 0x64, 0x48, 0x61, 0x73, 0x68, 0x22, 0x5a, 0x0a, 0x20, 0x47, 0x65, 0x74, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x46, 0x72, 0x6f, 0x6d, 0x48, 0x65, 0x69,
	0x67, 0x68, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0b, 0x73, 0x74, 0x61, 0x72, 0x74, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x14, 0x0a, 0x05,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x22, 0x5d, 0x0a, 0x21, 0x47, 0x65, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x73, 0x46, 0x72, 0x6f, 0x6d, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x62, 0x6c, 0x6f, 0x63, 0x6b,
	0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x0c, 0x62,
	0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x6d,
	0x65, 0x74, 0x61, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x05, 0x6d, 0x65, 0x74, 0x61,
	0x73, 0x22, 0x60, 0x0a, 0x1e, 0x47, 0x65, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x73, 0x42, 0x79, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x74, 0x61, 0x72, 0x74, 0x48, 0x65, 0x69, 0x67,
	0x68, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x73, 0x74, 0x61, 0x72, 0x74, 0x48,
	0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x65, 0x6e, 0x64, 0x48, 0x65, 0x69, 0x67,
	0x68, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x65, 0x6e, 0x64, 0x48, 0x65, 0x69,
	0x67, 0x68, 0x74, 0x22, 0x5b, 0x0a, 0x1f, 0x47, 0x65, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x42, 0x79, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x48,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x0c, 0x62, 0x6c,
	0x6f, 0x63, 0x6b, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x65,
	0x74, 0x61, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x05, 0x6d, 0x65, 0x74, 0x61, 0x73,
	0x22, 0x2d, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x49, 0x44, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x10, 0x0a,
	0x03, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x03, 0x69, 0x64, 0x73, 0x22,
	0x43, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x6e, 0x54, 0x69, 0x6d, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x62, 0x6c, 0x6f, 0x63,
	0x6b, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0d, 0x52, 0x0f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x54, 0x69, 0x6d, 0x65, 0x22, 0x35, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a,
	0x09, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x09, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x61, 0x73, 0x68, 0x22, 0x3d, 0x0a, 0x1f, 0x43,
	0x68, 0x65, 0x63, 0x6b, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x49, 0x73, 0x43, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x74, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a,
	0x0a, 0x08, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x49, 0x44, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0d,
	0x52, 0x08, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x49, 0x44, 0x73, 0x22, 0x36, 0x0a, 0x16, 0x49, 0x6e,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x61, 0x73,
	0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x61,
	0x73, 0x68, 0x22, 0x36, 0x0a, 0x16, 0x52, 0x65, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x09, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x61, 0x73, 0x68, 0x22, 0x83, 0x02, 0x0a, 0x16, 0x47,
	0x65, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x62, 0x6c, 0x6f, 0x63,
	0x6b, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12,
	0x19, 0x0a, 0x08, 0x74, 0x78, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x07, 0x74, 0x78, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x22, 0x0a, 0x0d, 0x73, 0x69,
	0x7a, 0x65, 0x5f, 0x69, 0x6e, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x0b, 0x73, 0x69, 0x7a, 0x65, 0x49, 0x6e, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x14,
	0x0a, 0x05, 0x6d, 0x69, 0x6e, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6d,
	0x69, 0x6e, 0x65, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x57, 0x6f, 0x72, 0x6b,
	0x22, 0x56, 0x0a, 0x20, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x49, 0x73,
	0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x32, 0x0a, 0x14, 0x69, 0x73, 0x50, 0x61, 0x72, 0x74, 0x4f, 0x66,
	0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x14, 0x69, 0x73, 0x50, 0x61, 0x72, 0x74, 0x4f, 0x66, 0x43, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x74, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x22, 0x2a, 0x0a, 0x10, 0x53, 0x75, 0x62, 0x73,
	0x63, 0x72, 0x69, 0x62, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x22, 0xac, 0x01, 0x0a, 0x0c, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2b, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x4e, 0x6f, 0x74, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x04, 0x68, 0x61, 0x73, 0x68, 0x12, 0x19, 0x0a, 0x08, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x55,
	0x52, 0x4c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x62, 0x61, 0x73, 0x65, 0x55, 0x52,
	0x4c, 0x12, 0x40, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e,
	0x5f, 0x61, 0x70, 0x69, 0x2e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x22, 0xa3, 0x01, 0x0a, 0x14, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x4e, 0x0a, 0x08,
	0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x32,
	0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x61, 0x70, 0x69, 0x2e,
	0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x1a, 0x3b, 0x0a, 0x0d,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x23, 0x0a, 0x0f, 0x47, 0x65, 0x74,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x22, 0x23,
	0x0a, 0x0d, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x22, 0x37, 0x0a, 0x0f, 0x53, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x87, 0x01, 0x0a,
	0x15, 0x47, 0x65, 0x74, 0x4c, 0x61, 0x73, 0x74, 0x4e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x4f, 0x66, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e,
	0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x12, 0x26,
	0x0a, 0x0e, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x4f, 0x72, 0x70, 0x68, 0x61, 0x6e, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x4f,
	0x72, 0x70, 0x68, 0x61, 0x6e, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x66, 0x72, 0x6f, 0x6d, 0x48, 0x65,
	0x69, 0x67, 0x68, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x66, 0x72, 0x6f, 0x6d,
	0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x22, 0x42, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x4c, 0x61, 0x73,
	0x74, 0x4e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x28, 0x0a, 0x06, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x10, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x06, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x22, 0x2d, 0x0a, 0x17, 0x47, 0x65,
	0x74, 0x53, 0x75, 0x69, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x61, 0x73, 0x68, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x04, 0x68, 0x61, 0x73, 0x68, 0x22, 0x46, 0x0a, 0x18, 0x47, 0x65, 0x74,
	0x53, 0x75, 0x69, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2a, 0x0a, 0x05, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x53, 0x75, 0x69,
	0x74, 0x61, 0x62, 0x6c, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x05, 0x62, 0x6c, 0x6f, 0x63,
	0x6b, 0x22, 0x49, 0x0a, 0x1d, 0x47, 0x65, 0x74, 0x48, 0x61, 0x73, 0x68, 0x4f, 0x66, 0x41, 0x6e,
	0x63, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x04, 0x68, 0x61, 0x73, 0x68, 0x12, 0x14, 0x0a, 0x05, 0x64, 0x65, 0x70, 0x74, 0x68, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x64, 0x65, 0x70, 0x74, 0x68, 0x22, 0x34, 0x0a, 0x1e,
	0x47, 0x65, 0x74, 0x48, 0x61, 0x73, 0x68, 0x4f, 0x66, 0x41, 0x6e, 0x63, 0x65, 0x73, 0x74, 0x6f,
	0x72, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x68, 0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x68, 0x61,
	0x73, 0x68, 0x22, 0x3a, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x4e, 0x65, 0x78, 0x74, 0x57, 0x6f, 0x72,
	0x6b, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1c, 0x0a, 0x09, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x61, 0x73, 0x68, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x09, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x61, 0x73, 0x68, 0x22, 0x31,
	0x0a, 0x1b, 0x47, 0x65, 0x74, 0x4e, 0x65, 0x78, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x52, 0x65, 0x71,
	0x75, 0x69, 0x72, 0x65, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x62, 0x69, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x62, 0x69, 0x74,
	0x73, 0x22, 0x37, 0x0a, 0x17, 0x53, 0x65, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x4d, 0x69, 0x6e,
	0x65, 0x64, 0x53, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x09, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x61, 0x73, 0x68, 0x22, 0x3e, 0x0a, 0x1c, 0x47, 0x65,
	0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x4d, 0x69, 0x6e, 0x65, 0x64, 0x4e, 0x6f, 0x74, 0x53,
	0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x62, 0x6c,
	0x6f, 0x63, 0x6b, 0x42, 0x79, 0x74, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x0a,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x42, 0x79, 0x74, 0x65, 0x73, 0x22, 0x3a, 0x0a, 0x1a, 0x53, 0x65,
	0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x75, 0x62, 0x74, 0x72, 0x65, 0x65, 0x73, 0x53, 0x65,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x62, 0x6c, 0x6f, 0x63,
	0x6b, 0x48, 0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x62, 0x6c, 0x6f,
	0x63, 0x6b, 0x48, 0x61, 0x73, 0x68, 0x22, 0x41, 0x0a, 0x1f, 0x47, 0x65, 0x74, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x73, 0x53, 0x75, 0x62, 0x74, 0x72, 0x65, 0x65, 0x73, 0x4e, 0x6f, 0x74, 0x53, 0x65,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x62, 0x6c, 0x6f,
	0x63, 0x6b, 0x42, 0x79, 0x74, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x0a, 0x62,
	0x6c, 0x6f, 0x63, 0x6b, 0x42, 0x79, 0x74, 0x65, 0x73, 0x22, 0x49, 0x0a, 0x13, 0x47, 0x65, 0x74,
	0x46, 0x53, 0x4d, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x32, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x1c, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x61, 0x70, 0x69,
	0x2e, 0x46, 0x53, 0x4d, 0x53, 0x74, 0x61, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x05, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x22, 0x50, 0x0a, 0x1a, 0x57, 0x61, 0x69, 0x74, 0x46, 0x53, 0x4d, 0x54,
	0x6f, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x32, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x1c, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x61,
	0x70, 0x69, 0x2e, 0x46, 0x53, 0x4d, 0x53, 0x74, 0x61, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x22, 0x49, 0x0a, 0x13, 0x53, 0x65, 0x6e, 0x64, 0x46, 0x53,
	0x4d, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x32, 0x0a,
	0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x62,
	0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x46, 0x53,
	0x4d, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x05, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x22, 0x44, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x4c, 0x6f, 0x63,
	0x61, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x68,
	0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x68, 0x61, 0x73, 0x68, 0x12,
	0x16, 0x0a, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x22, 0x33, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0c, 0x52, 0x07, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x22, 0x71, 0x0a, 0x19,
	0x4c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x6c, 0x6f, 0x63,
	0x61, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x07, 0x6c, 0x6f, 0x63, 0x61,
	0x74, 0x6f, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x68, 0x61, 0x73, 0x68, 0x5f, 0x73, 0x74, 0x6f, 0x70,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x68, 0x61, 0x73, 0x68, 0x53, 0x74, 0x6f, 0x70,
	0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x61, 0x78, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x65, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x6d, 0x61, 0x78, 0x48, 0x61, 0x73, 0x68, 0x65, 0x73, 0x22,
	0x41, 0x0a, 0x1a, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x23, 0x0a,
	0x0d, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0c, 0x52, 0x0c, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x73, 0x22, 0x4a, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x42, 0x65, 0x73, 0x74, 0x48, 0x65, 0x69,
	0x67, 0x68, 0x74, 0x41, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x2a, 0x44,
	0x0a, 0x0c, 0x46, 0x53, 0x4d, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x08,
	0x0a, 0x04, 0x53, 0x54, 0x4f, 0x50, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x52, 0x55, 0x4e, 0x10,
	0x01, 0x12, 0x11, 0x0a, 0x0d, 0x43, 0x41, 0x54, 0x43, 0x48, 0x55, 0x50, 0x42, 0x4c, 0x4f, 0x43,
	0x4b, 0x53, 0x10, 0x02, 0x12, 0x0e, 0x0a, 0x0a, 0x4c, 0x45, 0x47, 0x41, 0x43, 0x59, 0x53, 0x59,
	0x4e, 0x43, 0x10, 0x03, 0x2a, 0x4c, 0x0a, 0x0c, 0x46, 0x53, 0x4d, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x08, 0x0a, 0x04, 0x49, 0x44, 0x4c, 0x45, 0x10, 0x00, 0x12, 0x0b,
	0x0a, 0x07, 0x52, 0x55, 0x4e, 0x4e, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e, 0x43,
	0x41, 0x54, 0x43, 0x48, 0x49, 0x4e, 0x47, 0x42, 0x4c, 0x4f, 0x43, 0x4b, 0x53, 0x10, 0x02, 0x12,
	0x11, 0x0a, 0x0d, 0x4c, 0x45, 0x47, 0x41, 0x43, 0x59, 0x53, 0x59, 0x4e, 0x43, 0x49, 0x4e, 0x47,
	0x10, 0x03, 0x32, 0x81, 0x1e, 0x0a, 0x0d, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69,
	0x6e, 0x41, 0x50, 0x49, 0x12, 0x46, 0x0a, 0x0a, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x47, 0x52,
	0x50, 0x43, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x1e, 0x2e, 0x62, 0x6c, 0x6f,
	0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x48, 0x65, 0x61, 0x6c,
	0x74, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x45, 0x0a, 0x08,
	0x41, 0x64, 0x64, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x1f, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b,
	0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x41, 0x64, 0x64, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x22, 0x00, 0x12, 0x4f, 0x0a, 0x08, 0x47, 0x65, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12,
	0x1f, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x61, 0x70, 0x69,
	0x2e, 0x47, 0x65, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x20, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x61, 0x70,
	0x69, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x52, 0x0a, 0x09, 0x47, 0x65, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x73, 0x12, 0x20, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x61,
	0x70, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e,
	0x5f, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5f, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x42, 0x79, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x27, 0x2e, 0x62,
	0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x65,
	0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x42, 0x79, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61,
	0x69, 0x6e, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x3c, 0x0a, 0x0d, 0x47, 0x65, 0x74,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x1a, 0x11, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x53, 0x74, 0x61, 0x74, 0x73, 0x22, 0x00, 0x12, 0x57, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x47, 0x72, 0x61, 0x70, 0x68, 0x44, 0x61, 0x74, 0x61, 0x12, 0x28, 0x2e, 0x62,
	0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x65,
	0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x47, 0x72, 0x61, 0x70, 0x68, 0x44, 0x61, 0x74, 0x61, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x22, 0x00,
	0x12, 0x61, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x4c, 0x61, 0x73, 0x74, 0x4e, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x73, 0x12, 0x25, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f,
	0x61, 0x70, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x4c, 0x61, 0x73, 0x74, 0x4e, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x62, 0x6c, 0x6f, 0x63,
	0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x4c, 0x61,
	0x73, 0x74, 0x4e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x67, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x53, 0x75, 0x69, 0x74, 0x61, 0x62,
	0x6c, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x27, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x63,
	0x68, 0x61, 0x69, 0x6e, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x75, 0x69, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x28, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x61, 0x70,
	0x69, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x75, 0x69, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x79, 0x0a, 0x16,
	0x47, 0x65, 0x74, 0x48, 0x61, 0x73, 0x68, 0x4f, 0x66, 0x41, 0x6e, 0x63, 0x65, 0x73, 0x74, 0x6f,
	0x72, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x2d, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68,
	0x61, 0x69, 0x6e, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x48, 0x61, 0x73, 0x68, 0x4f,
	0x66, 0x41, 0x6e, 0x63, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61,
	0x69, 0x6e, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x48, 0x61, 0x73, 0x68, 0x4f, 0x66,
	0x41, 0x6e, 0x63, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x70, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x4e, 0x65,
	0x78, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x12, 0x2a,
	0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x61, 0x70, 0x69, 0x2e,
	0x47, 0x65, 0x74, 0x4e, 0x65, 0x78, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x69,
	0x72, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x62, 0x6c, 0x6f,
	0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x4e,
	0x65, 0x78, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5b, 0x0a, 0x0e, 0x47, 0x65, 0x74,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x45, 0x78, 0x69, 0x73, 0x74, 0x73, 0x12, 0x1f, 0x2e, 0x62, 0x6c,
	0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x65, 0x74,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x62,
	0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x65,
	0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x45, 0x78, 0x69, 0x73, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x64, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x12, 0x26, 0x2e, 0x62, 0x6c, 0x6f, 0x63,
	0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x27, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x61,
	0x70, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x74, 0x0a, 0x17,
	0x47, 0x65, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x46,
	0x72, 0x6f, 0x6d, 0x54, 0x69, 0x6c, 0x6c, 0x12, 0x2e, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x63,
	0x68, 0x61, 0x69, 0x6e, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x46, 0x72, 0x6f, 0x6d, 0x54, 0x69, 0x6c, 0x6c,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x63,
	0x68, 0x61, 0x69, 0x6e, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x82, 0x01, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x46, 0x72, 0x6f, 0x6d, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74,
	0x12, 0x30, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x61, 0x70,
	0x69, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x73, 0x46, 0x72, 0x6f, 0x6d, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x31, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f,
	0x61, 0x70, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x73, 0x46, 0x72, 0x6f, 0x6d, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x7c, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x42, 0x79, 0x48, 0x65, 0x69, 0x67,
	0x68, 0x74, 0x12, 0x2e, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f,
	0x61, 0x70, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x73, 0x42, 0x79, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f,
	0x61, 0x70, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x73, 0x42, 0x79, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x68, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x49, 0x44, 0x73, 0x12, 0x26, 0x2e, 0x62, 0x6c, 0x6f,
	0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x29, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f,
	0x61, 0x70, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x49, 0x44, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x56, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x42, 0x65, 0x73, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x26, 0x2e,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x47,
	0x65, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x81, 0x01, 0x0a, 0x1a, 0x43, 0x68, 0x65, 0x63,
	0x6b, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x49, 0x73, 0x49, 0x6e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x74, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x12, 0x2f, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68,
	0x61, 0x69, 0x6e, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x49, 0x73, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x43, 0x68, 0x61, 0x69, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x63,
	0x68, 0x61, 0x69, 0x6e, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x49, 0x73, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x43, 0x68, 0x61, 0x69,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x61, 0x0a, 0x0e, 0x47,
	0x65, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x25, 0x2e,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x47,
	0x65, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69,
	0x6e, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x53,
	0x0a, 0x0f, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x12, 0x26, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x61,
	0x70, 0x69, 0x2e, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x22, 0x00, 0x12, 0x53, 0x0a, 0x0f, 0x52, 0x65, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74,
	0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x26, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68,
	0x61, 0x69, 0x6e, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x52, 0x65, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61,
	0x74, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x4f, 0x0a, 0x09, 0x53, 0x75, 0x62, 0x73,
	0x63, 0x72, 0x69, 0x62, 0x65, 0x12, 0x20, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61,
	0x69, 0x6e, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x63,
	0x68, 0x61, 0x69, 0x6e, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x00, 0x30, 0x01, 0x12, 0x4a, 0x0a, 0x10, 0x53, 0x65, 0x6e,
	0x64, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x2e,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x4e,
	0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x16, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x4c, 0x0a, 0x08, 0x47, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x12, 0x1f, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x61,
	0x70, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f,
	0x61, 0x70, 0x69, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x45, 0x0a, 0x08, 0x53, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12,
	0x1f, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x61, 0x70, 0x69,
	0x2e, 0x53, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x55, 0x0a, 0x10, 0x53, 0x65,
	0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x4d, 0x69, 0x6e, 0x65, 0x64, 0x53, 0x65, 0x74, 0x12, 0x27,
	0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x61, 0x70, 0x69, 0x2e,
	0x53, 0x65, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x4d, 0x69, 0x6e, 0x65, 0x64, 0x53, 0x65, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22,
	0x00, 0x12, 0x5e, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x4d, 0x69,
	0x6e, 0x65, 0x64, 0x4e, 0x6f, 0x74, 0x53, 0x65, 0x74, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x1a, 0x2c, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x61,
	0x70, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x4d, 0x69, 0x6e, 0x65,
	0x64, 0x4e, 0x6f, 0x74, 0x53, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x5b, 0x0a, 0x13, 0x53, 0x65, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x75, 0x62,
	0x74, 0x72, 0x65, 0x65, 0x73, 0x53, 0x65, 0x74, 0x12, 0x2a, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b,
	0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x65, 0x74, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x53, 0x75, 0x62, 0x74, 0x72, 0x65, 0x65, 0x73, 0x53, 0x65, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x64,
	0x0a, 0x17, 0x47, 0x65, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x53, 0x75, 0x62, 0x74, 0x72,
	0x65, 0x65, 0x73, 0x4e, 0x6f, 0x74, 0x53, 0x65, 0x74, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x1a, 0x2f, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x61,
	0x70, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x53, 0x75, 0x62, 0x74,
	0x72, 0x65, 0x65, 0x73, 0x4e, 0x6f, 0x74, 0x53, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x5a, 0x0a, 0x0c, 0x53, 0x65, 0x6e, 0x64, 0x46, 0x53, 0x4d, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x12, 0x23, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69,
	0x6e, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x65, 0x6e, 0x64, 0x46, 0x53, 0x4d, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x62, 0x6c, 0x6f, 0x63,
	0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x46, 0x53,
	0x4d, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x53, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x46, 0x53, 0x4d, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x23,
	0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x61, 0x70, 0x69, 0x2e,
	0x47, 0x65, 0x74, 0x46, 0x53, 0x4d, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x67, 0x0a, 0x1f, 0x57, 0x61, 0x69, 0x74, 0x46, 0x53, 0x4d,
	0x54, 0x6f, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x47, 0x69,
	0x76, 0x65, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x2a, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b,
	0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x57, 0x61, 0x69, 0x74, 0x46, 0x53,
	0x4d, 0x54, 0x6f, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x37,
	0x0a, 0x03, 0x52, 0x75, 0x6e, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x16, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x47, 0x0a, 0x13, 0x43, 0x61, 0x74, 0x63, 0x68,
	0x55, 0x70, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x16,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00,
	0x12, 0x41, 0x0a, 0x0d, 0x43, 0x61, 0x74, 0x63, 0x68, 0x55, 0x70, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x73, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x22, 0x00, 0x12, 0x3b, 0x0a, 0x07, 0x52, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x12, 0x16,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00,
	0x12, 0x3e, 0x0a, 0x0a, 0x4c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x53, 0x79, 0x6e, 0x63, 0x12, 0x16,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00,
	0x12, 0x3f, 0x0a, 0x0b, 0x55, 0x6e, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x12,
	0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22,
	0x00, 0x12, 0x64, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x4c, 0x6f, 0x63,
	0x61, 0x74, 0x6f, 0x72, 0x12, 0x26, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69,
	0x6e, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x4c, 0x6f,
	0x63, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x62,
	0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x65,
	0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x6d, 0x0a, 0x12, 0x4c, 0x6f, 0x63, 0x61, 0x74,
	0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x12, 0x29, 0x2e,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x4c,
	0x6f, 0x63, 0x61, 0x74, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b,
	0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x65,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5e, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x42, 0x65, 0x73,
	0x74, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x41, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x16,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x2c, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68,
	0x61, 0x69, 0x6e, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x65, 0x73, 0x74, 0x48,
	0x65, 0x69, 0x67, 0x68, 0x74, 0x41, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x13, 0x5a, 0x11, 0x2e, 0x2f, 0x3b, 0x62, 0x6c, 0x6f,
	0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x61, 0x70, 0x69, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_services_blockchain_blockchain_api_blockchain_api_proto_rawDescOnce sync.Once
	file_services_blockchain_blockchain_api_blockchain_api_proto_rawDescData = file_services_blockchain_blockchain_api_blockchain_api_proto_rawDesc
)

func file_services_blockchain_blockchain_api_blockchain_api_proto_rawDescGZIP() []byte {
	file_services_blockchain_blockchain_api_blockchain_api_proto_rawDescOnce.Do(func() {
		file_services_blockchain_blockchain_api_blockchain_api_proto_rawDescData = protoimpl.X.CompressGZIP(file_services_blockchain_blockchain_api_blockchain_api_proto_rawDescData)
	})
	return file_services_blockchain_blockchain_api_blockchain_api_proto_rawDescData
}

var file_services_blockchain_blockchain_api_blockchain_api_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_services_blockchain_blockchain_api_blockchain_api_proto_msgTypes = make([]protoimpl.MessageInfo, 54)
var file_services_blockchain_blockchain_api_blockchain_api_proto_goTypes = []any{
	(FSMEventType)(0),                          // 0: blockchain_api.FSMEventType
	(FSMStateType)(0),                          // 1: blockchain_api.FSMStateType
	(*HealthResponse)(nil),                     // 2: blockchain_api.HealthResponse
	(*AddBlockRequest)(nil),                    // 3: blockchain_api.AddBlockRequest
	(*GetBlockRequest)(nil),                    // 4: blockchain_api.GetBlockRequest
	(*GetBlocksRequest)(nil),                   // 5: blockchain_api.GetBlocksRequest
	(*GetBlocksResponse)(nil),                  // 6: blockchain_api.GetBlocksResponse
	(*GetBlockByHeightRequest)(nil),            // 7: blockchain_api.GetBlockByHeightRequest
	(*GetBlockInChainByHeightHashRequest)(nil), // 8: blockchain_api.GetBlockInChainByHeightHashRequest
	(*GetBlockResponse)(nil),                   // 9: blockchain_api.GetBlockResponse
	(*GetFullBlockResponse)(nil),               // 10: blockchain_api.GetFullBlockResponse
	(*GetBlockGraphDataRequest)(nil),           // 11: blockchain_api.GetBlockGraphDataRequest
	(*GetBlockExistsResponse)(nil),             // 12: blockchain_api.GetBlockExistsResponse
	(*GetMedianTimeRequest)(nil),               // 13: blockchain_api.GetMedianTimeRequest
	(*GetBlockHeadersRequest)(nil),             // 14: blockchain_api.GetBlockHeadersRequest
	(*GetBlockHeadersResponse)(nil),            // 15: blockchain_api.GetBlockHeadersResponse
	(*GetBlockHeadersFromTillRequest)(nil),     // 16: blockchain_api.GetBlockHeadersFromTillRequest
	(*GetBlockHeadersFromHeightRequest)(nil),   // 17: blockchain_api.GetBlockHeadersFromHeightRequest
	(*GetBlockHeadersFromHeightResponse)(nil),  // 18: blockchain_api.GetBlockHeadersFromHeightResponse
	(*GetBlockHeadersByHeightRequest)(nil),     // 19: blockchain_api.GetBlockHeadersByHeightRequest
	(*GetBlockHeadersByHeightResponse)(nil),    // 20: blockchain_api.GetBlockHeadersByHeightResponse
	(*GetBlockHeaderIDsResponse)(nil),          // 21: blockchain_api.GetBlockHeaderIDsResponse
	(*GetMedianTimeResponse)(nil),              // 22: blockchain_api.GetMedianTimeResponse
	(*GetBlockHeaderRequest)(nil),              // 23: blockchain_api.GetBlockHeaderRequest
	(*CheckBlockIsCurrentChainRequest)(nil),    // 24: blockchain_api.CheckBlockIsCurrentChainRequest
	(*InvalidateBlockRequest)(nil),             // 25: blockchain_api.InvalidateBlockRequest
	(*RevalidateBlockRequest)(nil),             // 26: blockchain_api.RevalidateBlockRequest
	(*GetBlockHeaderResponse)(nil),             // 27: blockchain_api.GetBlockHeaderResponse
	(*CheckBlockIsCurrentChainResponse)(nil),   // 28: blockchain_api.CheckBlockIsCurrentChainResponse
	(*SubscribeRequest)(nil),                   // 29: blockchain_api.SubscribeRequest
	(*Notification)(nil),                       // 30: blockchain_api.Notification
	(*NotificationMetadata)(nil),               // 31: blockchain_api.NotificationMetadata
	(*GetStateRequest)(nil),                    // 32: blockchain_api.GetStateRequest
	(*StateResponse)(nil),                      // 33: blockchain_api.StateResponse
	(*SetStateRequest)(nil),                    // 34: blockchain_api.SetStateRequest
	(*GetLastNBlocksRequest)(nil),              // 35: blockchain_api.GetLastNBlocksRequest
	(*GetLastNBlocksResponse)(nil),             // 36: blockchain_api.GetLastNBlocksResponse
	(*GetSuitableBlockRequest)(nil),            // 37: blockchain_api.GetSuitableBlockRequest
	(*GetSuitableBlockResponse)(nil),           // 38: blockchain_api.GetSuitableBlockResponse
	(*GetHashOfAncestorBlockRequest)(nil),      // 39: blockchain_api.GetHashOfAncestorBlockRequest
	(*GetHashOfAncestorBlockResponse)(nil),     // 40: blockchain_api.GetHashOfAncestorBlockResponse
	(*GetNextWorkRequiredRequest)(nil),         // 41: blockchain_api.GetNextWorkRequiredRequest
	(*GetNextWorkRequiredResponse)(nil),        // 42: blockchain_api.GetNextWorkRequiredResponse
	(*SetBlockMinedSetRequest)(nil),            // 43: blockchain_api.SetBlockMinedSetRequest
	(*GetBlocksMinedNotSetResponse)(nil),       // 44: blockchain_api.GetBlocksMinedNotSetResponse
	(*SetBlockSubtreesSetRequest)(nil),         // 45: blockchain_api.SetBlockSubtreesSetRequest
	(*GetBlocksSubtreesNotSetResponse)(nil),    // 46: blockchain_api.GetBlocksSubtreesNotSetResponse
	(*GetFSMStateResponse)(nil),                // 47: blockchain_api.GetFSMStateResponse
	(*WaitFSMToTransitionRequest)(nil),         // 48: blockchain_api.WaitFSMToTransitionRequest
	(*SendFSMEventRequest)(nil),                // 49: blockchain_api.SendFSMEventRequest
	(*GetBlockLocatorRequest)(nil),             // 50: blockchain_api.GetBlockLocatorRequest
	(*GetBlockLocatorResponse)(nil),            // 51: blockchain_api.GetBlockLocatorResponse
	(*LocateBlockHeadersRequest)(nil),          // 52: blockchain_api.LocateBlockHeadersRequest
	(*LocateBlockHeadersResponse)(nil),         // 53: blockchain_api.LocateBlockHeadersResponse
	(*GetBestHeightAndTimeResponse)(nil),       // 54: blockchain_api.GetBestHeightAndTimeResponse
	nil,                                        // 55: blockchain_api.NotificationMetadata.MetadataEntry
	(*timestamppb.Timestamp)(nil),              // 56: google.protobuf.Timestamp
	(model.NotificationType)(0),                // 57: model.NotificationType
	(*model.BlockInfo)(nil),                    // 58: model.BlockInfo
	(*model.SuitableBlock)(nil),                // 59: model.SuitableBlock
	(*emptypb.Empty)(nil),                      // 60: google.protobuf.Empty
	(*model.BlockStats)(nil),                   // 61: model.BlockStats
	(*model.BlockDataPoints)(nil),              // 62: model.BlockDataPoints
}
var file_services_blockchain_blockchain_api_blockchain_api_proto_depIdxs = []int32{
	56, // 0: blockchain_api.HealthResponse.timestamp:type_name -> google.protobuf.Timestamp
	57, // 1: blockchain_api.Notification.type:type_name -> model.NotificationType
	31, // 2: blockchain_api.Notification.metadata:type_name -> blockchain_api.NotificationMetadata
	55, // 3: blockchain_api.NotificationMetadata.metadata:type_name -> blockchain_api.NotificationMetadata.MetadataEntry
	58, // 4: blockchain_api.GetLastNBlocksResponse.blocks:type_name -> model.BlockInfo
	59, // 5: blockchain_api.GetSuitableBlockResponse.block:type_name -> model.SuitableBlock
	1,  // 6: blockchain_api.GetFSMStateResponse.state:type_name -> blockchain_api.FSMStateType
	1,  // 7: blockchain_api.WaitFSMToTransitionRequest.state:type_name -> blockchain_api.FSMStateType
	0,  // 8: blockchain_api.SendFSMEventRequest.event:type_name -> blockchain_api.FSMEventType
	60, // 9: blockchain_api.BlockchainAPI.HealthGRPC:input_type -> google.protobuf.Empty
	3,  // 10: blockchain_api.BlockchainAPI.AddBlock:input_type -> blockchain_api.AddBlockRequest
	4,  // 11: blockchain_api.BlockchainAPI.GetBlock:input_type -> blockchain_api.GetBlockRequest
	5,  // 12: blockchain_api.BlockchainAPI.GetBlocks:input_type -> blockchain_api.GetBlocksRequest
	7,  // 13: blockchain_api.BlockchainAPI.GetBlockByHeight:input_type -> blockchain_api.GetBlockByHeightRequest
	60, // 14: blockchain_api.BlockchainAPI.GetBlockStats:input_type -> google.protobuf.Empty
	11, // 15: blockchain_api.BlockchainAPI.GetBlockGraphData:input_type -> blockchain_api.GetBlockGraphDataRequest
	35, // 16: blockchain_api.BlockchainAPI.GetLastNBlocks:input_type -> blockchain_api.GetLastNBlocksRequest
	37, // 17: blockchain_api.BlockchainAPI.GetSuitableBlock:input_type -> blockchain_api.GetSuitableBlockRequest
	39, // 18: blockchain_api.BlockchainAPI.GetHashOfAncestorBlock:input_type -> blockchain_api.GetHashOfAncestorBlockRequest
	41, // 19: blockchain_api.BlockchainAPI.GetNextWorkRequired:input_type -> blockchain_api.GetNextWorkRequiredRequest
	4,  // 20: blockchain_api.BlockchainAPI.GetBlockExists:input_type -> blockchain_api.GetBlockRequest
	14, // 21: blockchain_api.BlockchainAPI.GetBlockHeaders:input_type -> blockchain_api.GetBlockHeadersRequest
	16, // 22: blockchain_api.BlockchainAPI.GetBlockHeadersFromTill:input_type -> blockchain_api.GetBlockHeadersFromTillRequest
	17, // 23: blockchain_api.BlockchainAPI.GetBlockHeadersFromHeight:input_type -> blockchain_api.GetBlockHeadersFromHeightRequest
	19, // 24: blockchain_api.BlockchainAPI.GetBlockHeadersByHeight:input_type -> blockchain_api.GetBlockHeadersByHeightRequest
	14, // 25: blockchain_api.BlockchainAPI.GetBlockHeaderIDs:input_type -> blockchain_api.GetBlockHeadersRequest
	60, // 26: blockchain_api.BlockchainAPI.GetBestBlockHeader:input_type -> google.protobuf.Empty
	24, // 27: blockchain_api.BlockchainAPI.CheckBlockIsInCurrentChain:input_type -> blockchain_api.CheckBlockIsCurrentChainRequest
	23, // 28: blockchain_api.BlockchainAPI.GetBlockHeader:input_type -> blockchain_api.GetBlockHeaderRequest
	25, // 29: blockchain_api.BlockchainAPI.InvalidateBlock:input_type -> blockchain_api.InvalidateBlockRequest
	26, // 30: blockchain_api.BlockchainAPI.RevalidateBlock:input_type -> blockchain_api.RevalidateBlockRequest
	29, // 31: blockchain_api.BlockchainAPI.Subscribe:input_type -> blockchain_api.SubscribeRequest
	30, // 32: blockchain_api.BlockchainAPI.SendNotification:input_type -> blockchain_api.Notification
	32, // 33: blockchain_api.BlockchainAPI.GetState:input_type -> blockchain_api.GetStateRequest
	34, // 34: blockchain_api.BlockchainAPI.SetState:input_type -> blockchain_api.SetStateRequest
	43, // 35: blockchain_api.BlockchainAPI.SetBlockMinedSet:input_type -> blockchain_api.SetBlockMinedSetRequest
	60, // 36: blockchain_api.BlockchainAPI.GetBlocksMinedNotSet:input_type -> google.protobuf.Empty
	45, // 37: blockchain_api.BlockchainAPI.SetBlockSubtreesSet:input_type -> blockchain_api.SetBlockSubtreesSetRequest
	60, // 38: blockchain_api.BlockchainAPI.GetBlocksSubtreesNotSet:input_type -> google.protobuf.Empty
	49, // 39: blockchain_api.BlockchainAPI.SendFSMEvent:input_type -> blockchain_api.SendFSMEventRequest
	60, // 40: blockchain_api.BlockchainAPI.GetFSMCurrentState:input_type -> google.protobuf.Empty
	48, // 41: blockchain_api.BlockchainAPI.WaitFSMToTransitionToGivenState:input_type -> blockchain_api.WaitFSMToTransitionRequest
	60, // 42: blockchain_api.BlockchainAPI.Run:input_type -> google.protobuf.Empty
	60, // 43: blockchain_api.BlockchainAPI.CatchUpTransactions:input_type -> google.protobuf.Empty
	60, // 44: blockchain_api.BlockchainAPI.CatchUpBlocks:input_type -> google.protobuf.Empty
	60, // 45: blockchain_api.BlockchainAPI.Restore:input_type -> google.protobuf.Empty
	60, // 46: blockchain_api.BlockchainAPI.LegacySync:input_type -> google.protobuf.Empty
	60, // 47: blockchain_api.BlockchainAPI.Unavailable:input_type -> google.protobuf.Empty
	50, // 48: blockchain_api.BlockchainAPI.GetBlockLocator:input_type -> blockchain_api.GetBlockLocatorRequest
	52, // 49: blockchain_api.BlockchainAPI.LocateBlockHeaders:input_type -> blockchain_api.LocateBlockHeadersRequest
	60, // 50: blockchain_api.BlockchainAPI.GetBestHeightAndTime:input_type -> google.protobuf.Empty
	2,  // 51: blockchain_api.BlockchainAPI.HealthGRPC:output_type -> blockchain_api.HealthResponse
	60, // 52: blockchain_api.BlockchainAPI.AddBlock:output_type -> google.protobuf.Empty
	9,  // 53: blockchain_api.BlockchainAPI.GetBlock:output_type -> blockchain_api.GetBlockResponse
	6,  // 54: blockchain_api.BlockchainAPI.GetBlocks:output_type -> blockchain_api.GetBlocksResponse
	9,  // 55: blockchain_api.BlockchainAPI.GetBlockByHeight:output_type -> blockchain_api.GetBlockResponse
	61, // 56: blockchain_api.BlockchainAPI.GetBlockStats:output_type -> model.BlockStats
	62, // 57: blockchain_api.BlockchainAPI.GetBlockGraphData:output_type -> model.BlockDataPoints
	36, // 58: blockchain_api.BlockchainAPI.GetLastNBlocks:output_type -> blockchain_api.GetLastNBlocksResponse
	38, // 59: blockchain_api.BlockchainAPI.GetSuitableBlock:output_type -> blockchain_api.GetSuitableBlockResponse
	40, // 60: blockchain_api.BlockchainAPI.GetHashOfAncestorBlock:output_type -> blockchain_api.GetHashOfAncestorBlockResponse
	42, // 61: blockchain_api.BlockchainAPI.GetNextWorkRequired:output_type -> blockchain_api.GetNextWorkRequiredResponse
	12, // 62: blockchain_api.BlockchainAPI.GetBlockExists:output_type -> blockchain_api.GetBlockExistsResponse
	15, // 63: blockchain_api.BlockchainAPI.GetBlockHeaders:output_type -> blockchain_api.GetBlockHeadersResponse
	15, // 64: blockchain_api.BlockchainAPI.GetBlockHeadersFromTill:output_type -> blockchain_api.GetBlockHeadersResponse
	18, // 65: blockchain_api.BlockchainAPI.GetBlockHeadersFromHeight:output_type -> blockchain_api.GetBlockHeadersFromHeightResponse
	20, // 66: blockchain_api.BlockchainAPI.GetBlockHeadersByHeight:output_type -> blockchain_api.GetBlockHeadersByHeightResponse
	21, // 67: blockchain_api.BlockchainAPI.GetBlockHeaderIDs:output_type -> blockchain_api.GetBlockHeaderIDsResponse
	27, // 68: blockchain_api.BlockchainAPI.GetBestBlockHeader:output_type -> blockchain_api.GetBlockHeaderResponse
	28, // 69: blockchain_api.BlockchainAPI.CheckBlockIsInCurrentChain:output_type -> blockchain_api.CheckBlockIsCurrentChainResponse
	27, // 70: blockchain_api.BlockchainAPI.GetBlockHeader:output_type -> blockchain_api.GetBlockHeaderResponse
	60, // 71: blockchain_api.BlockchainAPI.InvalidateBlock:output_type -> google.protobuf.Empty
	60, // 72: blockchain_api.BlockchainAPI.RevalidateBlock:output_type -> google.protobuf.Empty
	30, // 73: blockchain_api.BlockchainAPI.Subscribe:output_type -> blockchain_api.Notification
	60, // 74: blockchain_api.BlockchainAPI.SendNotification:output_type -> google.protobuf.Empty
	33, // 75: blockchain_api.BlockchainAPI.GetState:output_type -> blockchain_api.StateResponse
	60, // 76: blockchain_api.BlockchainAPI.SetState:output_type -> google.protobuf.Empty
	60, // 77: blockchain_api.BlockchainAPI.SetBlockMinedSet:output_type -> google.protobuf.Empty
	44, // 78: blockchain_api.BlockchainAPI.GetBlocksMinedNotSet:output_type -> blockchain_api.GetBlocksMinedNotSetResponse
	60, // 79: blockchain_api.BlockchainAPI.SetBlockSubtreesSet:output_type -> google.protobuf.Empty
	46, // 80: blockchain_api.BlockchainAPI.GetBlocksSubtreesNotSet:output_type -> blockchain_api.GetBlocksSubtreesNotSetResponse
	47, // 81: blockchain_api.BlockchainAPI.SendFSMEvent:output_type -> blockchain_api.GetFSMStateResponse
	47, // 82: blockchain_api.BlockchainAPI.GetFSMCurrentState:output_type -> blockchain_api.GetFSMStateResponse
	60, // 83: blockchain_api.BlockchainAPI.WaitFSMToTransitionToGivenState:output_type -> google.protobuf.Empty
	60, // 84: blockchain_api.BlockchainAPI.Run:output_type -> google.protobuf.Empty
	60, // 85: blockchain_api.BlockchainAPI.CatchUpTransactions:output_type -> google.protobuf.Empty
	60, // 86: blockchain_api.BlockchainAPI.CatchUpBlocks:output_type -> google.protobuf.Empty
	60, // 87: blockchain_api.BlockchainAPI.Restore:output_type -> google.protobuf.Empty
	60, // 88: blockchain_api.BlockchainAPI.LegacySync:output_type -> google.protobuf.Empty
	60, // 89: blockchain_api.BlockchainAPI.Unavailable:output_type -> google.protobuf.Empty
	51, // 90: blockchain_api.BlockchainAPI.GetBlockLocator:output_type -> blockchain_api.GetBlockLocatorResponse
	53, // 91: blockchain_api.BlockchainAPI.LocateBlockHeaders:output_type -> blockchain_api.LocateBlockHeadersResponse
	54, // 92: blockchain_api.BlockchainAPI.GetBestHeightAndTime:output_type -> blockchain_api.GetBestHeightAndTimeResponse
	51, // [51:93] is the sub-list for method output_type
	9,  // [9:51] is the sub-list for method input_type
	9,  // [9:9] is the sub-list for extension type_name
	9,  // [9:9] is the sub-list for extension extendee
	0,  // [0:9] is the sub-list for field type_name
}

func init() { file_services_blockchain_blockchain_api_blockchain_api_proto_init() }
func file_services_blockchain_blockchain_api_blockchain_api_proto_init() {
	if File_services_blockchain_blockchain_api_blockchain_api_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_services_blockchain_blockchain_api_blockchain_api_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   54,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_services_blockchain_blockchain_api_blockchain_api_proto_goTypes,
		DependencyIndexes: file_services_blockchain_blockchain_api_blockchain_api_proto_depIdxs,
		EnumInfos:         file_services_blockchain_blockchain_api_blockchain_api_proto_enumTypes,
		MessageInfos:      file_services_blockchain_blockchain_api_blockchain_api_proto_msgTypes,
	}.Build()
	File_services_blockchain_blockchain_api_blockchain_api_proto = out.File
	file_services_blockchain_blockchain_api_blockchain_api_proto_rawDesc = nil
	file_services_blockchain_blockchain_api_blockchain_api_proto_goTypes = nil
	file_services_blockchain_blockchain_api_blockchain_api_proto_depIdxs = nil
}
