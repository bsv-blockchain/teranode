// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: services/validator/validator_api/validator_api.proto

package validator_api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ValidatorAPI_Health_FullMethodName              = "/validator_api.ValidatorAPI/Health"
	ValidatorAPI_ValidateTransaction_FullMethodName = "/validator_api.ValidatorAPI/ValidateTransaction"
)

// ValidatorAPIClient is the client API for ValidatorAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ValidatorAPIClient interface {
	// Health returns the health of the API.
	Health(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*HealthResponse, error)
	ValidateTransaction(ctx context.Context, opts ...grpc.CallOption) (ValidatorAPI_ValidateTransactionClient, error)
}

type validatorAPIClient struct {
	cc grpc.ClientConnInterface
}

func NewValidatorAPIClient(cc grpc.ClientConnInterface) ValidatorAPIClient {
	return &validatorAPIClient{cc}
}

func (c *validatorAPIClient) Health(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*HealthResponse, error) {
	out := new(HealthResponse)
	err := c.cc.Invoke(ctx, ValidatorAPI_Health_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *validatorAPIClient) ValidateTransaction(ctx context.Context, opts ...grpc.CallOption) (ValidatorAPI_ValidateTransactionClient, error) {
	stream, err := c.cc.NewStream(ctx, &ValidatorAPI_ServiceDesc.Streams[0], ValidatorAPI_ValidateTransaction_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &validatorAPIValidateTransactionClient{stream}
	return x, nil
}

type ValidatorAPI_ValidateTransactionClient interface {
	Send(*ValidateTransactionRequest) error
	CloseAndRecv() (*ValidateTransactionResponse, error)
	grpc.ClientStream
}

type validatorAPIValidateTransactionClient struct {
	grpc.ClientStream
}

func (x *validatorAPIValidateTransactionClient) Send(m *ValidateTransactionRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *validatorAPIValidateTransactionClient) CloseAndRecv() (*ValidateTransactionResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(ValidateTransactionResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ValidatorAPIServer is the server API for ValidatorAPI service.
// All implementations must embed UnimplementedValidatorAPIServer
// for forward compatibility
type ValidatorAPIServer interface {
	// Health returns the health of the API.
	Health(context.Context, *emptypb.Empty) (*HealthResponse, error)
	ValidateTransaction(ValidatorAPI_ValidateTransactionServer) error
	mustEmbedUnimplementedValidatorAPIServer()
}

// UnimplementedValidatorAPIServer must be embedded to have forward compatible implementations.
type UnimplementedValidatorAPIServer struct {
}

func (UnimplementedValidatorAPIServer) Health(context.Context, *emptypb.Empty) (*HealthResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Health not implemented")
}
func (UnimplementedValidatorAPIServer) ValidateTransaction(ValidatorAPI_ValidateTransactionServer) error {
	return status.Errorf(codes.Unimplemented, "method ValidateTransaction not implemented")
}
func (UnimplementedValidatorAPIServer) mustEmbedUnimplementedValidatorAPIServer() {}

// UnsafeValidatorAPIServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ValidatorAPIServer will
// result in compilation errors.
type UnsafeValidatorAPIServer interface {
	mustEmbedUnimplementedValidatorAPIServer()
}

func RegisterValidatorAPIServer(s grpc.ServiceRegistrar, srv ValidatorAPIServer) {
	s.RegisterService(&ValidatorAPI_ServiceDesc, srv)
}

func _ValidatorAPI_Health_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ValidatorAPIServer).Health(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ValidatorAPI_Health_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ValidatorAPIServer).Health(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ValidatorAPI_ValidateTransaction_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ValidatorAPIServer).ValidateTransaction(&validatorAPIValidateTransactionServer{stream})
}

type ValidatorAPI_ValidateTransactionServer interface {
	SendAndClose(*ValidateTransactionResponse) error
	Recv() (*ValidateTransactionRequest, error)
	grpc.ServerStream
}

type validatorAPIValidateTransactionServer struct {
	grpc.ServerStream
}

func (x *validatorAPIValidateTransactionServer) SendAndClose(m *ValidateTransactionResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *validatorAPIValidateTransactionServer) Recv() (*ValidateTransactionRequest, error) {
	m := new(ValidateTransactionRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ValidatorAPI_ServiceDesc is the grpc.ServiceDesc for ValidatorAPI service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ValidatorAPI_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "validator_api.ValidatorAPI",
	HandlerType: (*ValidatorAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Health",
			Handler:    _ValidatorAPI_Health_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ValidateTransaction",
			Handler:       _ValidatorAPI_ValidateTransaction_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "services/validator/validator_api/validator_api.proto",
}
