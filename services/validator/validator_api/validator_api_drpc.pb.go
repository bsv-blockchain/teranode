// Code generated by protoc-gen-go-drpc. DO NOT EDIT.
// protoc-gen-go-drpc version: v0.0.33
// source: services/validator/validator_api/validator_api.proto

package validator_api

import (
	context "context"
	errors "errors"
	protojson "google.golang.org/protobuf/encoding/protojson"
	proto "google.golang.org/protobuf/proto"
	drpc "storj.io/drpc"
	drpcerr "storj.io/drpc/drpcerr"
)

type drpcEncoding_File_services_validator_validator_api_validator_api_proto struct{}

func (drpcEncoding_File_services_validator_validator_api_validator_api_proto) Marshal(msg drpc.Message) ([]byte, error) {
	return proto.Marshal(msg.(proto.Message))
}

func (drpcEncoding_File_services_validator_validator_api_validator_api_proto) MarshalAppend(buf []byte, msg drpc.Message) ([]byte, error) {
	return proto.MarshalOptions{}.MarshalAppend(buf, msg.(proto.Message))
}

func (drpcEncoding_File_services_validator_validator_api_validator_api_proto) Unmarshal(buf []byte, msg drpc.Message) error {
	return proto.Unmarshal(buf, msg.(proto.Message))
}

func (drpcEncoding_File_services_validator_validator_api_validator_api_proto) JSONMarshal(msg drpc.Message) ([]byte, error) {
	return protojson.Marshal(msg.(proto.Message))
}

func (drpcEncoding_File_services_validator_validator_api_validator_api_proto) JSONUnmarshal(buf []byte, msg drpc.Message) error {
	return protojson.Unmarshal(buf, msg.(proto.Message))
}

type DRPCValidatorAPIClient interface {
	DRPCConn() drpc.Conn

	Health(ctx context.Context, in *EmptyMessage) (*HealthResponse, error)
	ValidateTransaction(ctx context.Context, in *ValidateTransactionRequest) (*ValidateTransactionResponse, error)
	ValidateTransactionBatch(ctx context.Context, in *ValidateTransactionBatchRequest) (*ValidateTransactionBatchResponse, error)
	ValidateTransactionStream(ctx context.Context) (DRPCValidatorAPI_ValidateTransactionStreamClient, error)
}

type drpcValidatorAPIClient struct {
	cc drpc.Conn
}

func NewDRPCValidatorAPIClient(cc drpc.Conn) DRPCValidatorAPIClient {
	return &drpcValidatorAPIClient{cc}
}

func (c *drpcValidatorAPIClient) DRPCConn() drpc.Conn { return c.cc }

func (c *drpcValidatorAPIClient) Health(ctx context.Context, in *EmptyMessage) (*HealthResponse, error) {
	out := new(HealthResponse)
	err := c.cc.Invoke(ctx, "/validator_api.ValidatorAPI/Health", drpcEncoding_File_services_validator_validator_api_validator_api_proto{}, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *drpcValidatorAPIClient) ValidateTransaction(ctx context.Context, in *ValidateTransactionRequest) (*ValidateTransactionResponse, error) {
	out := new(ValidateTransactionResponse)
	err := c.cc.Invoke(ctx, "/validator_api.ValidatorAPI/ValidateTransaction", drpcEncoding_File_services_validator_validator_api_validator_api_proto{}, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *drpcValidatorAPIClient) ValidateTransactionBatch(ctx context.Context, in *ValidateTransactionBatchRequest) (*ValidateTransactionBatchResponse, error) {
	out := new(ValidateTransactionBatchResponse)
	err := c.cc.Invoke(ctx, "/validator_api.ValidatorAPI/ValidateTransactionBatch", drpcEncoding_File_services_validator_validator_api_validator_api_proto{}, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *drpcValidatorAPIClient) ValidateTransactionStream(ctx context.Context) (DRPCValidatorAPI_ValidateTransactionStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, "/validator_api.ValidatorAPI/ValidateTransactionStream", drpcEncoding_File_services_validator_validator_api_validator_api_proto{})
	if err != nil {
		return nil, err
	}
	x := &drpcValidatorAPI_ValidateTransactionStreamClient{stream}
	return x, nil
}

type DRPCValidatorAPI_ValidateTransactionStreamClient interface {
	drpc.Stream
	Send(*ValidateTransactionRequest) error
	CloseAndRecv() (*ValidateTransactionResponse, error)
}

type drpcValidatorAPI_ValidateTransactionStreamClient struct {
	drpc.Stream
}

func (x *drpcValidatorAPI_ValidateTransactionStreamClient) GetStream() drpc.Stream {
	return x.Stream
}

func (x *drpcValidatorAPI_ValidateTransactionStreamClient) Send(m *ValidateTransactionRequest) error {
	return x.MsgSend(m, drpcEncoding_File_services_validator_validator_api_validator_api_proto{})
}

func (x *drpcValidatorAPI_ValidateTransactionStreamClient) CloseAndRecv() (*ValidateTransactionResponse, error) {
	if err := x.CloseSend(); err != nil {
		return nil, err
	}
	m := new(ValidateTransactionResponse)
	if err := x.MsgRecv(m, drpcEncoding_File_services_validator_validator_api_validator_api_proto{}); err != nil {
		return nil, err
	}
	return m, nil
}

func (x *drpcValidatorAPI_ValidateTransactionStreamClient) CloseAndRecvMsg(m *ValidateTransactionResponse) error {
	if err := x.CloseSend(); err != nil {
		return err
	}
	return x.MsgRecv(m, drpcEncoding_File_services_validator_validator_api_validator_api_proto{})
}

type DRPCValidatorAPIServer interface {
	Health(context.Context, *EmptyMessage) (*HealthResponse, error)
	ValidateTransaction(context.Context, *ValidateTransactionRequest) (*ValidateTransactionResponse, error)
	ValidateTransactionBatch(context.Context, *ValidateTransactionBatchRequest) (*ValidateTransactionBatchResponse, error)
}

type DRPCValidatorAPIUnimplementedServer struct{}

func (s *DRPCValidatorAPIUnimplementedServer) Health(context.Context, *EmptyMessage) (*HealthResponse, error) {
	return nil, drpcerr.WithCode(errors.New("Unimplemented"), drpcerr.Unimplemented)
}

func (s *DRPCValidatorAPIUnimplementedServer) ValidateTransaction(context.Context, *ValidateTransactionRequest) (*ValidateTransactionResponse, error) {
	return nil, drpcerr.WithCode(errors.New("Unimplemented"), drpcerr.Unimplemented)
}

func (s *DRPCValidatorAPIUnimplementedServer) ValidateTransactionBatch(context.Context, *ValidateTransactionBatchRequest) (*ValidateTransactionBatchResponse, error) {
	return nil, drpcerr.WithCode(errors.New("Unimplemented"), drpcerr.Unimplemented)
}

func (s *DRPCValidatorAPIUnimplementedServer) ValidateTransactionStream(DRPCValidatorAPI_ValidateTransactionStreamStream) error {
	return drpcerr.WithCode(errors.New("Unimplemented"), drpcerr.Unimplemented)
}

type DRPCValidatorAPIDescription struct{}

func (DRPCValidatorAPIDescription) NumMethods() int { return 3 }

func (DRPCValidatorAPIDescription) Method(n int) (string, drpc.Encoding, drpc.Receiver, interface{}, bool) {
	switch n {
	case 0:
		return "/validator_api.ValidatorAPI/Health", drpcEncoding_File_services_validator_validator_api_validator_api_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return srv.(DRPCValidatorAPIServer).
					Health(
						ctx,
						in1.(*EmptyMessage),
					)
			}, DRPCValidatorAPIServer.Health, true
	case 1:
		return "/validator_api.ValidatorAPI/ValidateTransaction", drpcEncoding_File_services_validator_validator_api_validator_api_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return srv.(DRPCValidatorAPIServer).
					ValidateTransaction(
						ctx,
						in1.(*ValidateTransactionRequest),
					)
			}, DRPCValidatorAPIServer.ValidateTransaction, true
	case 2:
		return "/validator_api.ValidatorAPI/ValidateTransactionBatch", drpcEncoding_File_services_validator_validator_api_validator_api_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return srv.(DRPCValidatorAPIServer).
					ValidateTransactionBatch(
						ctx,
						in1.(*ValidateTransactionBatchRequest),
					)
			}, DRPCValidatorAPIServer.ValidateTransactionBatch, true
	default:
		return "", nil, nil, nil, false
	}
}

func DRPCRegisterValidatorAPI(mux drpc.Mux, impl DRPCValidatorAPIServer) error {
	return mux.Register(impl, DRPCValidatorAPIDescription{})
}

type DRPCValidatorAPI_HealthStream interface {
	drpc.Stream
	SendAndClose(*HealthResponse) error
}

type drpcValidatorAPI_HealthStream struct {
	drpc.Stream
}

func (x *drpcValidatorAPI_HealthStream) SendAndClose(m *HealthResponse) error {
	if err := x.MsgSend(m, drpcEncoding_File_services_validator_validator_api_validator_api_proto{}); err != nil {
		return err
	}
	return x.CloseSend()
}

type DRPCValidatorAPI_ValidateTransactionStream interface {
	drpc.Stream
	SendAndClose(*ValidateTransactionResponse) error
}

type drpcValidatorAPI_ValidateTransactionStream struct {
	drpc.Stream
}

func (x *drpcValidatorAPI_ValidateTransactionStream) SendAndClose(m *ValidateTransactionResponse) error {
	if err := x.MsgSend(m, drpcEncoding_File_services_validator_validator_api_validator_api_proto{}); err != nil {
		return err
	}
	return x.CloseSend()
}

type DRPCValidatorAPI_ValidateTransactionBatchStream interface {
	drpc.Stream
	SendAndClose(*ValidateTransactionBatchResponse) error
}

type drpcValidatorAPI_ValidateTransactionBatchStream struct {
	drpc.Stream
}

func (x *drpcValidatorAPI_ValidateTransactionBatchStream) SendAndClose(m *ValidateTransactionBatchResponse) error {
	if err := x.MsgSend(m, drpcEncoding_File_services_validator_validator_api_validator_api_proto{}); err != nil {
		return err
	}
	return x.CloseSend()
}

type DRPCValidatorAPI_ValidateTransactionStreamStream interface {
	drpc.Stream
	SendAndClose(*ValidateTransactionResponse) error
	Recv() (*ValidateTransactionRequest, error)
}

type drpcValidatorAPI_ValidateTransactionStreamStream struct {
	drpc.Stream
}

func (x *drpcValidatorAPI_ValidateTransactionStreamStream) SendAndClose(m *ValidateTransactionResponse) error {
	if err := x.MsgSend(m, drpcEncoding_File_services_validator_validator_api_validator_api_proto{}); err != nil {
		return err
	}
	return x.CloseSend()
}

func (x *drpcValidatorAPI_ValidateTransactionStreamStream) Recv() (*ValidateTransactionRequest, error) {
	m := new(ValidateTransactionRequest)
	if err := x.MsgRecv(m, drpcEncoding_File_services_validator_validator_api_validator_api_proto{}); err != nil {
		return nil, err
	}
	return m, nil
}

func (x *drpcValidatorAPI_ValidateTransactionStreamStream) RecvMsg(m *ValidateTransactionRequest) error {
	return x.MsgRecv(m, drpcEncoding_File_services_validator_validator_api_validator_api_proto{})
}
