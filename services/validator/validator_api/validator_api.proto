syntax = "proto3";

option go_package = ".;validator_api";

package validator_api;

service ValidatorAPI {
  // Health returns the health of the API.
  rpc Health (EmptyMessage) returns (HealthResponse) {}
  rpc ValidateTransaction(ValidateTransactionRequest) returns (ValidateTransactionResponse) {}
  rpc ValidateTransactionBatch(ValidateTransactionBatchRequest) returns (ValidateTransactionBatchResponse) {}
  rpc ValidateTransactionStream(stream ValidateTransactionRequest) returns (ValidateTransactionResponse) {}
  rpc Subscribe (SubscribeRequest) returns (stream RejectedTxNotification) {}

}

// swagger:model EmptyMessage
message EmptyMessage {}

// swagger:model HealthResponse
message HealthResponse {
  bool ok = 1;
  string details = 2;
  uint32 timestamp = 3;
}

// swagger:model ValidateTransactionRequest
message ValidateTransactionRequest {
  bytes transaction_data = 1;
}

// swagger:model ValidateTransactionResponse
message ValidateTransactionResponse {
  bool valid = 1;
  string reason = 2;
}

// swagger:model ValidateTransactionBatchRequest
message ValidateTransactionBatchRequest {
  repeated ValidateTransactionRequest transactions = 1;
}

// swagger:model ValidateTransactionError
message ValidateTransactionError {
  string txId = 1;
  string reason = 2;
}

// swagger:model ValidateTransactionBatchResponse
message ValidateTransactionBatchResponse {
  bool valid = 1;
  repeated ValidateTransactionError reasons = 2;
}

// swagger:model SubscribeRequest
message SubscribeRequest {
  string source = 1;
}

// swagger:model Notification
message RejectedTxNotification {
  string txId = 1;
  string reason = 2;
}