syntax = "proto3";

option go_package = ".;asset_api";

package asset_api;

import "google/protobuf/timestamp.proto";
import "google/protobuf/empty.proto";

service AssetAPI {
  // Health returns the health of the API.
  rpc HealthGRPC (google.protobuf.Empty) returns (HealthResponse) {}
  rpc GetBlock (GetBlockRequest) returns (GetBlockResponse) {}
  rpc GetBlockHeader(GetBlockHeaderRequest) returns (GetBlockHeaderResponse) {}
  rpc GetBlockHeaders(GetBlockHeadersRequest) returns (GetBlockHeadersResponse) {}
  rpc GetBestBlockHeader(google.protobuf.Empty) returns (GetBlockHeaderResponse) {}
  rpc GetNodes(google.protobuf.Empty) returns (GetNodesResponse) {}
  rpc Get(GetSubtreeRequest) returns (GetSubtreeResponse) {} // this is for block assembly to get a subtree, needs to adhere to the interface name
  rpc Set(SetSubtreeRequest) returns (google.protobuf.Empty) {} // this is for block assembly to get a subtree, needs to adhere to the interface name
  rpc SetTTL(SetSubtreeTTLRequest) returns (google.protobuf.Empty) {} // this is for block assembly to get a subtree, needs to adhere to the interface name
  rpc Subscribe (SubscribeRequest) returns (stream Notification) {}
}

// swagger:enum Type
enum Type {
  PING = 0;
  Subtree = 1;
  Block = 2;
  MiningOn = 3;
}

// swagger:model HealthResponse
message HealthResponse {
  bool ok = 1;
  string details = 2;
  google.protobuf.Timestamp timestamp = 3;
}

// swagger:model Notification
message Notification {
  Type type = 1;
  bytes hash = 2;
  string base_url = 3;
}

// swagger:model GetBlockRequest
message GetBlockRequest {
  bytes hash = 1;
}

// swagger:model GetBlockResponse
message GetBlockResponse {
  bytes header = 1;
  uint32 height = 2;
  bytes coinbase_tx = 3;
  uint64 transaction_count = 4;
  repeated bytes subtree_hashes = 5;
  uint64 size_in_bytes = 6;
}

// swagger:model GetBlockHeaderRequest
message GetBlockHeaderRequest {
  bytes blockHash = 1;
}

message GetBlockHeaderResponse {
  bytes blockHeader = 1;
  uint32 height = 2;
  uint64 tx_count = 3;
  uint64 size_in_bytes = 4;
  string miner = 5;
}

// swagger:model GetBlockHeadersRequest
message GetBlockHeadersRequest {
  bytes startHash = 1;
  uint64 numberOfHeaders = 2;
}

// swagger:model GetBlockHeadersResponse
message GetBlockHeadersResponse {
  repeated bytes blockHeaders = 1;
  repeated uint32 heights = 2;
}

// swagger:model GetNodesResponse
message GetNodesResponse {
  repeated string nodes = 1;
}

// swagger:model GetSubtreeRequest
message GetSubtreeRequest {
  bytes hash = 1;
}

// swagger:model GetSubtreeResponse
message GetSubtreeResponse {
  bytes subtree = 1;
}

// swagger:model SetSubtreeRequest
message SetSubtreeRequest {
  bytes hash = 1;
  bytes subtree = 2;
  uint32 ttl = 3;
}

// swagger:model SetSubtreeTTLRequest
message SetSubtreeTTLRequest {
  bytes hash = 1;
  uint32 ttl = 2;
}

// swagger:model SubscribeRequest
message SubscribeRequest {
  string source = 1;
}
