// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v5.27.1
// source: services/asset/asset_api/asset_api.proto

package asset_api

import (
	context "context"
	model "github.com/bitcoin-sv/ubsv/model"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	AssetAPI_HealthGRPC_FullMethodName         = "/asset_api.AssetAPI/HealthGRPC"
	AssetAPI_GetBlock_FullMethodName           = "/asset_api.AssetAPI/GetBlock"
	AssetAPI_GetBlockStats_FullMethodName      = "/asset_api.AssetAPI/GetBlockStats"
	AssetAPI_GetBlockGraphData_FullMethodName  = "/asset_api.AssetAPI/GetBlockGraphData"
	AssetAPI_GetBlockHeader_FullMethodName     = "/asset_api.AssetAPI/GetBlockHeader"
	AssetAPI_GetBlockHeaders_FullMethodName    = "/asset_api.AssetAPI/GetBlockHeaders"
	AssetAPI_GetBestBlockHeader_FullMethodName = "/asset_api.AssetAPI/GetBestBlockHeader"
	AssetAPI_GetNodes_FullMethodName           = "/asset_api.AssetAPI/GetNodes"
	AssetAPI_Get_FullMethodName                = "/asset_api.AssetAPI/Get"
	AssetAPI_Exists_FullMethodName             = "/asset_api.AssetAPI/Exists"
	AssetAPI_Set_FullMethodName                = "/asset_api.AssetAPI/Set"
	AssetAPI_SetTTL_FullMethodName             = "/asset_api.AssetAPI/SetTTL"
	AssetAPI_Subscribe_FullMethodName          = "/asset_api.AssetAPI/Subscribe"
)

// AssetAPIClient is the client API for AssetAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AssetAPIClient interface {
	// Health returns the health of the API.
	HealthGRPC(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*HealthResponse, error)
	GetBlock(ctx context.Context, in *GetBlockRequest, opts ...grpc.CallOption) (*GetBlockResponse, error)
	GetBlockStats(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*model.BlockStats, error)
	GetBlockGraphData(ctx context.Context, in *GetBlockGraphDataRequest, opts ...grpc.CallOption) (*model.BlockDataPoints, error)
	GetBlockHeader(ctx context.Context, in *GetBlockHeaderRequest, opts ...grpc.CallOption) (*GetBlockHeaderResponse, error)
	GetBlockHeaders(ctx context.Context, in *GetBlockHeadersRequest, opts ...grpc.CallOption) (*GetBlockHeadersResponse, error)
	GetBestBlockHeader(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetBlockHeaderResponse, error)
	GetNodes(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetNodesResponse, error)
	Get(ctx context.Context, in *GetSubtreeRequest, opts ...grpc.CallOption) (*GetSubtreeResponse, error)
	Exists(ctx context.Context, in *ExistsSubtreeRequest, opts ...grpc.CallOption) (*ExistsSubtreeResponse, error)
	Set(ctx context.Context, in *SetSubtreeRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	SetTTL(ctx context.Context, in *SetSubtreeTTLRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	Subscribe(ctx context.Context, in *SubscribeRequest, opts ...grpc.CallOption) (AssetAPI_SubscribeClient, error)
}

type assetAPIClient struct {
	cc grpc.ClientConnInterface
}

func NewAssetAPIClient(cc grpc.ClientConnInterface) AssetAPIClient {
	return &assetAPIClient{cc}
}

func (c *assetAPIClient) HealthGRPC(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*HealthResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HealthResponse)
	err := c.cc.Invoke(ctx, AssetAPI_HealthGRPC_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assetAPIClient) GetBlock(ctx context.Context, in *GetBlockRequest, opts ...grpc.CallOption) (*GetBlockResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetBlockResponse)
	err := c.cc.Invoke(ctx, AssetAPI_GetBlock_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assetAPIClient) GetBlockStats(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*model.BlockStats, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(model.BlockStats)
	err := c.cc.Invoke(ctx, AssetAPI_GetBlockStats_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assetAPIClient) GetBlockGraphData(ctx context.Context, in *GetBlockGraphDataRequest, opts ...grpc.CallOption) (*model.BlockDataPoints, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(model.BlockDataPoints)
	err := c.cc.Invoke(ctx, AssetAPI_GetBlockGraphData_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assetAPIClient) GetBlockHeader(ctx context.Context, in *GetBlockHeaderRequest, opts ...grpc.CallOption) (*GetBlockHeaderResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetBlockHeaderResponse)
	err := c.cc.Invoke(ctx, AssetAPI_GetBlockHeader_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assetAPIClient) GetBlockHeaders(ctx context.Context, in *GetBlockHeadersRequest, opts ...grpc.CallOption) (*GetBlockHeadersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetBlockHeadersResponse)
	err := c.cc.Invoke(ctx, AssetAPI_GetBlockHeaders_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assetAPIClient) GetBestBlockHeader(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetBlockHeaderResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetBlockHeaderResponse)
	err := c.cc.Invoke(ctx, AssetAPI_GetBestBlockHeader_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assetAPIClient) GetNodes(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetNodesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetNodesResponse)
	err := c.cc.Invoke(ctx, AssetAPI_GetNodes_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assetAPIClient) Get(ctx context.Context, in *GetSubtreeRequest, opts ...grpc.CallOption) (*GetSubtreeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetSubtreeResponse)
	err := c.cc.Invoke(ctx, AssetAPI_Get_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assetAPIClient) Exists(ctx context.Context, in *ExistsSubtreeRequest, opts ...grpc.CallOption) (*ExistsSubtreeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ExistsSubtreeResponse)
	err := c.cc.Invoke(ctx, AssetAPI_Exists_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assetAPIClient) Set(ctx context.Context, in *SetSubtreeRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, AssetAPI_Set_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assetAPIClient) SetTTL(ctx context.Context, in *SetSubtreeTTLRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, AssetAPI_SetTTL_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assetAPIClient) Subscribe(ctx context.Context, in *SubscribeRequest, opts ...grpc.CallOption) (AssetAPI_SubscribeClient, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &AssetAPI_ServiceDesc.Streams[0], AssetAPI_Subscribe_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &assetAPISubscribeClient{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type AssetAPI_SubscribeClient interface {
	Recv() (*Notification, error)
	grpc.ClientStream
}

type assetAPISubscribeClient struct {
	grpc.ClientStream
}

func (x *assetAPISubscribeClient) Recv() (*Notification, error) {
	m := new(Notification)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// AssetAPIServer is the server API for AssetAPI service.
// All implementations must embed UnimplementedAssetAPIServer
// for forward compatibility
type AssetAPIServer interface {
	// Health returns the health of the API.
	HealthGRPC(context.Context, *emptypb.Empty) (*HealthResponse, error)
	GetBlock(context.Context, *GetBlockRequest) (*GetBlockResponse, error)
	GetBlockStats(context.Context, *emptypb.Empty) (*model.BlockStats, error)
	GetBlockGraphData(context.Context, *GetBlockGraphDataRequest) (*model.BlockDataPoints, error)
	GetBlockHeader(context.Context, *GetBlockHeaderRequest) (*GetBlockHeaderResponse, error)
	GetBlockHeaders(context.Context, *GetBlockHeadersRequest) (*GetBlockHeadersResponse, error)
	GetBestBlockHeader(context.Context, *emptypb.Empty) (*GetBlockHeaderResponse, error)
	GetNodes(context.Context, *emptypb.Empty) (*GetNodesResponse, error)
	Get(context.Context, *GetSubtreeRequest) (*GetSubtreeResponse, error)
	Exists(context.Context, *ExistsSubtreeRequest) (*ExistsSubtreeResponse, error)
	Set(context.Context, *SetSubtreeRequest) (*emptypb.Empty, error)
	SetTTL(context.Context, *SetSubtreeTTLRequest) (*emptypb.Empty, error)
	Subscribe(*SubscribeRequest, AssetAPI_SubscribeServer) error
	mustEmbedUnimplementedAssetAPIServer()
}

// UnimplementedAssetAPIServer must be embedded to have forward compatible implementations.
type UnimplementedAssetAPIServer struct {
}

func (UnimplementedAssetAPIServer) HealthGRPC(context.Context, *emptypb.Empty) (*HealthResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HealthGRPC not implemented")
}
func (UnimplementedAssetAPIServer) GetBlock(context.Context, *GetBlockRequest) (*GetBlockResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBlock not implemented")
}
func (UnimplementedAssetAPIServer) GetBlockStats(context.Context, *emptypb.Empty) (*model.BlockStats, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBlockStats not implemented")
}
func (UnimplementedAssetAPIServer) GetBlockGraphData(context.Context, *GetBlockGraphDataRequest) (*model.BlockDataPoints, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBlockGraphData not implemented")
}
func (UnimplementedAssetAPIServer) GetBlockHeader(context.Context, *GetBlockHeaderRequest) (*GetBlockHeaderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBlockHeader not implemented")
}
func (UnimplementedAssetAPIServer) GetBlockHeaders(context.Context, *GetBlockHeadersRequest) (*GetBlockHeadersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBlockHeaders not implemented")
}
func (UnimplementedAssetAPIServer) GetBestBlockHeader(context.Context, *emptypb.Empty) (*GetBlockHeaderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBestBlockHeader not implemented")
}
func (UnimplementedAssetAPIServer) GetNodes(context.Context, *emptypb.Empty) (*GetNodesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNodes not implemented")
}
func (UnimplementedAssetAPIServer) Get(context.Context, *GetSubtreeRequest) (*GetSubtreeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedAssetAPIServer) Exists(context.Context, *ExistsSubtreeRequest) (*ExistsSubtreeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Exists not implemented")
}
func (UnimplementedAssetAPIServer) Set(context.Context, *SetSubtreeRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Set not implemented")
}
func (UnimplementedAssetAPIServer) SetTTL(context.Context, *SetSubtreeTTLRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetTTL not implemented")
}
func (UnimplementedAssetAPIServer) Subscribe(*SubscribeRequest, AssetAPI_SubscribeServer) error {
	return status.Errorf(codes.Unimplemented, "method Subscribe not implemented")
}
func (UnimplementedAssetAPIServer) mustEmbedUnimplementedAssetAPIServer() {}

// UnsafeAssetAPIServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AssetAPIServer will
// result in compilation errors.
type UnsafeAssetAPIServer interface {
	mustEmbedUnimplementedAssetAPIServer()
}

func RegisterAssetAPIServer(s grpc.ServiceRegistrar, srv AssetAPIServer) {
	s.RegisterService(&AssetAPI_ServiceDesc, srv)
}

func _AssetAPI_HealthGRPC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssetAPIServer).HealthGRPC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AssetAPI_HealthGRPC_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssetAPIServer).HealthGRPC(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _AssetAPI_GetBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBlockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssetAPIServer).GetBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AssetAPI_GetBlock_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssetAPIServer).GetBlock(ctx, req.(*GetBlockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AssetAPI_GetBlockStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssetAPIServer).GetBlockStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AssetAPI_GetBlockStats_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssetAPIServer).GetBlockStats(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _AssetAPI_GetBlockGraphData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBlockGraphDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssetAPIServer).GetBlockGraphData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AssetAPI_GetBlockGraphData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssetAPIServer).GetBlockGraphData(ctx, req.(*GetBlockGraphDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AssetAPI_GetBlockHeader_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBlockHeaderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssetAPIServer).GetBlockHeader(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AssetAPI_GetBlockHeader_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssetAPIServer).GetBlockHeader(ctx, req.(*GetBlockHeaderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AssetAPI_GetBlockHeaders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBlockHeadersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssetAPIServer).GetBlockHeaders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AssetAPI_GetBlockHeaders_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssetAPIServer).GetBlockHeaders(ctx, req.(*GetBlockHeadersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AssetAPI_GetBestBlockHeader_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssetAPIServer).GetBestBlockHeader(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AssetAPI_GetBestBlockHeader_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssetAPIServer).GetBestBlockHeader(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _AssetAPI_GetNodes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssetAPIServer).GetNodes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AssetAPI_GetNodes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssetAPIServer).GetNodes(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _AssetAPI_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSubtreeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssetAPIServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AssetAPI_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssetAPIServer).Get(ctx, req.(*GetSubtreeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AssetAPI_Exists_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExistsSubtreeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssetAPIServer).Exists(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AssetAPI_Exists_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssetAPIServer).Exists(ctx, req.(*ExistsSubtreeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AssetAPI_Set_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetSubtreeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssetAPIServer).Set(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AssetAPI_Set_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssetAPIServer).Set(ctx, req.(*SetSubtreeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AssetAPI_SetTTL_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetSubtreeTTLRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssetAPIServer).SetTTL(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AssetAPI_SetTTL_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssetAPIServer).SetTTL(ctx, req.(*SetSubtreeTTLRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AssetAPI_Subscribe_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(AssetAPIServer).Subscribe(m, &assetAPISubscribeServer{ServerStream: stream})
}

type AssetAPI_SubscribeServer interface {
	Send(*Notification) error
	grpc.ServerStream
}

type assetAPISubscribeServer struct {
	grpc.ServerStream
}

func (x *assetAPISubscribeServer) Send(m *Notification) error {
	return x.ServerStream.SendMsg(m)
}

// AssetAPI_ServiceDesc is the grpc.ServiceDesc for AssetAPI service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AssetAPI_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "asset_api.AssetAPI",
	HandlerType: (*AssetAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "HealthGRPC",
			Handler:    _AssetAPI_HealthGRPC_Handler,
		},
		{
			MethodName: "GetBlock",
			Handler:    _AssetAPI_GetBlock_Handler,
		},
		{
			MethodName: "GetBlockStats",
			Handler:    _AssetAPI_GetBlockStats_Handler,
		},
		{
			MethodName: "GetBlockGraphData",
			Handler:    _AssetAPI_GetBlockGraphData_Handler,
		},
		{
			MethodName: "GetBlockHeader",
			Handler:    _AssetAPI_GetBlockHeader_Handler,
		},
		{
			MethodName: "GetBlockHeaders",
			Handler:    _AssetAPI_GetBlockHeaders_Handler,
		},
		{
			MethodName: "GetBestBlockHeader",
			Handler:    _AssetAPI_GetBestBlockHeader_Handler,
		},
		{
			MethodName: "GetNodes",
			Handler:    _AssetAPI_GetNodes_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _AssetAPI_Get_Handler,
		},
		{
			MethodName: "Exists",
			Handler:    _AssetAPI_Exists_Handler,
		},
		{
			MethodName: "Set",
			Handler:    _AssetAPI_Set_Handler,
		},
		{
			MethodName: "SetTTL",
			Handler:    _AssetAPI_SetTTL_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Subscribe",
			Handler:       _AssetAPI_Subscribe_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "services/asset/asset_api/asset_api.proto",
}
