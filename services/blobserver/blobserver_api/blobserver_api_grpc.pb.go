// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.9
// source: services/blobserver/blobserver_api/blobserver_api.proto

package blobserver_api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	BlobServerAPI_Health_FullMethodName    = "/blobserver_api.BlobServerAPI/Health"
	BlobServerAPI_Subscribe_FullMethodName = "/blobserver_api.BlobServerAPI/Subscribe"
)

// BlobServerAPIClient is the client API for BlobServerAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BlobServerAPIClient interface {
	// Health returns the health of the API.
	Health(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*HealthResponse, error)
	Subscribe(ctx context.Context, in *SubscribeRequest, opts ...grpc.CallOption) (BlobServerAPI_SubscribeClient, error)
}

type blobServerAPIClient struct {
	cc grpc.ClientConnInterface
}

func NewBlobServerAPIClient(cc grpc.ClientConnInterface) BlobServerAPIClient {
	return &blobServerAPIClient{cc}
}

func (c *blobServerAPIClient) Health(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*HealthResponse, error) {
	out := new(HealthResponse)
	err := c.cc.Invoke(ctx, BlobServerAPI_Health_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blobServerAPIClient) Subscribe(ctx context.Context, in *SubscribeRequest, opts ...grpc.CallOption) (BlobServerAPI_SubscribeClient, error) {
	stream, err := c.cc.NewStream(ctx, &BlobServerAPI_ServiceDesc.Streams[0], BlobServerAPI_Subscribe_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &blobServerAPISubscribeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type BlobServerAPI_SubscribeClient interface {
	Recv() (*Notification, error)
	grpc.ClientStream
}

type blobServerAPISubscribeClient struct {
	grpc.ClientStream
}

func (x *blobServerAPISubscribeClient) Recv() (*Notification, error) {
	m := new(Notification)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// BlobServerAPIServer is the server API for BlobServerAPI service.
// All implementations must embed UnimplementedBlobServerAPIServer
// for forward compatibility
type BlobServerAPIServer interface {
	// Health returns the health of the API.
	Health(context.Context, *emptypb.Empty) (*HealthResponse, error)
	Subscribe(*SubscribeRequest, BlobServerAPI_SubscribeServer) error
	mustEmbedUnimplementedBlobServerAPIServer()
}

// UnimplementedBlobServerAPIServer must be embedded to have forward compatible implementations.
type UnimplementedBlobServerAPIServer struct {
}

func (UnimplementedBlobServerAPIServer) Health(context.Context, *emptypb.Empty) (*HealthResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Health not implemented")
}
func (UnimplementedBlobServerAPIServer) Subscribe(*SubscribeRequest, BlobServerAPI_SubscribeServer) error {
	return status.Errorf(codes.Unimplemented, "method Subscribe not implemented")
}
func (UnimplementedBlobServerAPIServer) mustEmbedUnimplementedBlobServerAPIServer() {}

// UnsafeBlobServerAPIServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BlobServerAPIServer will
// result in compilation errors.
type UnsafeBlobServerAPIServer interface {
	mustEmbedUnimplementedBlobServerAPIServer()
}

func RegisterBlobServerAPIServer(s grpc.ServiceRegistrar, srv BlobServerAPIServer) {
	s.RegisterService(&BlobServerAPI_ServiceDesc, srv)
}

func _BlobServerAPI_Health_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlobServerAPIServer).Health(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BlobServerAPI_Health_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlobServerAPIServer).Health(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlobServerAPI_Subscribe_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(BlobServerAPIServer).Subscribe(m, &blobServerAPISubscribeServer{stream})
}

type BlobServerAPI_SubscribeServer interface {
	Send(*Notification) error
	grpc.ServerStream
}

type blobServerAPISubscribeServer struct {
	grpc.ServerStream
}

func (x *blobServerAPISubscribeServer) Send(m *Notification) error {
	return x.ServerStream.SendMsg(m)
}

// BlobServerAPI_ServiceDesc is the grpc.ServiceDesc for BlobServerAPI service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BlobServerAPI_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "blobserver_api.BlobServerAPI",
	HandlerType: (*BlobServerAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Health",
			Handler:    _BlobServerAPI_Health_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Subscribe",
			Handler:       _BlobServerAPI_Subscribe_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "services/blobserver/blobserver_api/blobserver_api.proto",
}
