// Code generated by protoc-gen-go-drpc. DO NOT EDIT.
// protoc-gen-go-drpc version: v0.0.33
// source: services/blockassembly/blockassembly_api/blockassembly_api.proto

package blockassembly_api

import (
	context "context"
	errors "errors"
	model "github.com/bitcoin-sv/ubsv/model"
	protojson "google.golang.org/protobuf/encoding/protojson"
	proto "google.golang.org/protobuf/proto"
	drpc "storj.io/drpc"
	drpcerr "storj.io/drpc/drpcerr"
)

type drpcEncoding_File_services_blockassembly_blockassembly_api_blockassembly_api_proto struct{}

func (drpcEncoding_File_services_blockassembly_blockassembly_api_blockassembly_api_proto) Marshal(msg drpc.Message) ([]byte, error) {
	return proto.Marshal(msg.(proto.Message))
}

func (drpcEncoding_File_services_blockassembly_blockassembly_api_blockassembly_api_proto) MarshalAppend(buf []byte, msg drpc.Message) ([]byte, error) {
	return proto.MarshalOptions{}.MarshalAppend(buf, msg.(proto.Message))
}

func (drpcEncoding_File_services_blockassembly_blockassembly_api_blockassembly_api_proto) Unmarshal(buf []byte, msg drpc.Message) error {
	return proto.Unmarshal(buf, msg.(proto.Message))
}

func (drpcEncoding_File_services_blockassembly_blockassembly_api_blockassembly_api_proto) JSONMarshal(msg drpc.Message) ([]byte, error) {
	return protojson.Marshal(msg.(proto.Message))
}

func (drpcEncoding_File_services_blockassembly_blockassembly_api_blockassembly_api_proto) JSONUnmarshal(buf []byte, msg drpc.Message) error {
	return protojson.Unmarshal(buf, msg.(proto.Message))
}

type DRPCBlockAssemblyAPIClient interface {
	DRPCConn() drpc.Conn

	HealthGRPC(ctx context.Context, in *EmptyMessage) (*HealthResponse, error)
	NewChaintipAndHeight(ctx context.Context, in *NewChaintipAndHeightRequest) (*EmptyMessage, error)
	AddTx(ctx context.Context, in *AddTxRequest) (*AddTxResponse, error)
	RemoveTx(ctx context.Context, in *RemoveTxRequest) (*EmptyMessage, error)
	AddTxBatch(ctx context.Context, in *AddTxBatchRequest) (*AddTxBatchResponse, error)
	GetMiningCandidate(ctx context.Context, in *EmptyMessage) (*model.MiningCandidate, error)
	SubmitMiningSolution(ctx context.Context, in *SubmitMiningSolutionRequest) (*SubmitMiningSolutionResponse, error)
}

type drpcBlockAssemblyAPIClient struct {
	cc drpc.Conn
}

func NewDRPCBlockAssemblyAPIClient(cc drpc.Conn) DRPCBlockAssemblyAPIClient {
	return &drpcBlockAssemblyAPIClient{cc}
}

func (c *drpcBlockAssemblyAPIClient) DRPCConn() drpc.Conn { return c.cc }

func (c *drpcBlockAssemblyAPIClient) HealthGRPC(ctx context.Context, in *EmptyMessage) (*HealthResponse, error) {
	out := new(HealthResponse)
	err := c.cc.Invoke(ctx, "/blockassembly_api.BlockAssemblyAPI/HealthGRPC", drpcEncoding_File_services_blockassembly_blockassembly_api_blockassembly_api_proto{}, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *drpcBlockAssemblyAPIClient) NewChaintipAndHeight(ctx context.Context, in *NewChaintipAndHeightRequest) (*EmptyMessage, error) {
	out := new(EmptyMessage)
	err := c.cc.Invoke(ctx, "/blockassembly_api.BlockAssemblyAPI/NewChaintipAndHeight", drpcEncoding_File_services_blockassembly_blockassembly_api_blockassembly_api_proto{}, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *drpcBlockAssemblyAPIClient) AddTx(ctx context.Context, in *AddTxRequest) (*AddTxResponse, error) {
	out := new(AddTxResponse)
	err := c.cc.Invoke(ctx, "/blockassembly_api.BlockAssemblyAPI/AddTx", drpcEncoding_File_services_blockassembly_blockassembly_api_blockassembly_api_proto{}, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *drpcBlockAssemblyAPIClient) RemoveTx(ctx context.Context, in *RemoveTxRequest) (*EmptyMessage, error) {
	out := new(EmptyMessage)
	err := c.cc.Invoke(ctx, "/blockassembly_api.BlockAssemblyAPI/RemoveTx", drpcEncoding_File_services_blockassembly_blockassembly_api_blockassembly_api_proto{}, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *drpcBlockAssemblyAPIClient) AddTxBatch(ctx context.Context, in *AddTxBatchRequest) (*AddTxBatchResponse, error) {
	out := new(AddTxBatchResponse)
	err := c.cc.Invoke(ctx, "/blockassembly_api.BlockAssemblyAPI/AddTxBatch", drpcEncoding_File_services_blockassembly_blockassembly_api_blockassembly_api_proto{}, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *drpcBlockAssemblyAPIClient) GetMiningCandidate(ctx context.Context, in *EmptyMessage) (*model.MiningCandidate, error) {
	out := new(model.MiningCandidate)
	err := c.cc.Invoke(ctx, "/blockassembly_api.BlockAssemblyAPI/GetMiningCandidate", drpcEncoding_File_services_blockassembly_blockassembly_api_blockassembly_api_proto{}, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *drpcBlockAssemblyAPIClient) SubmitMiningSolution(ctx context.Context, in *SubmitMiningSolutionRequest) (*SubmitMiningSolutionResponse, error) {
	out := new(SubmitMiningSolutionResponse)
	err := c.cc.Invoke(ctx, "/blockassembly_api.BlockAssemblyAPI/SubmitMiningSolution", drpcEncoding_File_services_blockassembly_blockassembly_api_blockassembly_api_proto{}, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

type DRPCBlockAssemblyAPIServer interface {
	HealthGRPC(context.Context, *EmptyMessage) (*HealthResponse, error)
	NewChaintipAndHeight(context.Context, *NewChaintipAndHeightRequest) (*EmptyMessage, error)
	AddTx(context.Context, *AddTxRequest) (*AddTxResponse, error)
	RemoveTx(context.Context, *RemoveTxRequest) (*EmptyMessage, error)
	AddTxBatch(context.Context, *AddTxBatchRequest) (*AddTxBatchResponse, error)
	GetMiningCandidate(context.Context, *EmptyMessage) (*model.MiningCandidate, error)
	SubmitMiningSolution(context.Context, *SubmitMiningSolutionRequest) (*SubmitMiningSolutionResponse, error)
}

type DRPCBlockAssemblyAPIUnimplementedServer struct{}

func (s *DRPCBlockAssemblyAPIUnimplementedServer) HealthGRPC(context.Context, *EmptyMessage) (*HealthResponse, error) {
	return nil, drpcerr.WithCode(errors.New("Unimplemented"), drpcerr.Unimplemented)
}

func (s *DRPCBlockAssemblyAPIUnimplementedServer) NewChaintipAndHeight(context.Context, *NewChaintipAndHeightRequest) (*EmptyMessage, error) {
	return nil, drpcerr.WithCode(errors.New("Unimplemented"), drpcerr.Unimplemented)
}

func (s *DRPCBlockAssemblyAPIUnimplementedServer) AddTx(context.Context, *AddTxRequest) (*AddTxResponse, error) {
	return nil, drpcerr.WithCode(errors.New("Unimplemented"), drpcerr.Unimplemented)
}

func (s *DRPCBlockAssemblyAPIUnimplementedServer) RemoveTx(context.Context, *RemoveTxRequest) (*EmptyMessage, error) {
	return nil, drpcerr.WithCode(errors.New("Unimplemented"), drpcerr.Unimplemented)
}

func (s *DRPCBlockAssemblyAPIUnimplementedServer) AddTxBatch(context.Context, *AddTxBatchRequest) (*AddTxBatchResponse, error) {
	return nil, drpcerr.WithCode(errors.New("Unimplemented"), drpcerr.Unimplemented)
}

func (s *DRPCBlockAssemblyAPIUnimplementedServer) GetMiningCandidate(context.Context, *EmptyMessage) (*model.MiningCandidate, error) {
	return nil, drpcerr.WithCode(errors.New("Unimplemented"), drpcerr.Unimplemented)
}

func (s *DRPCBlockAssemblyAPIUnimplementedServer) SubmitMiningSolution(context.Context, *SubmitMiningSolutionRequest) (*SubmitMiningSolutionResponse, error) {
	return nil, drpcerr.WithCode(errors.New("Unimplemented"), drpcerr.Unimplemented)
}

type DRPCBlockAssemblyAPIDescription struct{}

func (DRPCBlockAssemblyAPIDescription) NumMethods() int { return 7 }

func (DRPCBlockAssemblyAPIDescription) Method(n int) (string, drpc.Encoding, drpc.Receiver, interface{}, bool) {
	switch n {
	case 0:
		return "/blockassembly_api.BlockAssemblyAPI/HealthGRPC", drpcEncoding_File_services_blockassembly_blockassembly_api_blockassembly_api_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return srv.(DRPCBlockAssemblyAPIServer).
					HealthGRPC(
						ctx,
						in1.(*EmptyMessage),
					)
			}, DRPCBlockAssemblyAPIServer.HealthGRPC, true
	case 1:
		return "/blockassembly_api.BlockAssemblyAPI/NewChaintipAndHeight", drpcEncoding_File_services_blockassembly_blockassembly_api_blockassembly_api_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return srv.(DRPCBlockAssemblyAPIServer).
					NewChaintipAndHeight(
						ctx,
						in1.(*NewChaintipAndHeightRequest),
					)
			}, DRPCBlockAssemblyAPIServer.NewChaintipAndHeight, true
	case 2:
		return "/blockassembly_api.BlockAssemblyAPI/AddTx", drpcEncoding_File_services_blockassembly_blockassembly_api_blockassembly_api_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return srv.(DRPCBlockAssemblyAPIServer).
					AddTx(
						ctx,
						in1.(*AddTxRequest),
					)
			}, DRPCBlockAssemblyAPIServer.AddTx, true
	case 3:
		return "/blockassembly_api.BlockAssemblyAPI/RemoveTx", drpcEncoding_File_services_blockassembly_blockassembly_api_blockassembly_api_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return srv.(DRPCBlockAssemblyAPIServer).
					RemoveTx(
						ctx,
						in1.(*RemoveTxRequest),
					)
			}, DRPCBlockAssemblyAPIServer.RemoveTx, true
	case 4:
		return "/blockassembly_api.BlockAssemblyAPI/AddTxBatch", drpcEncoding_File_services_blockassembly_blockassembly_api_blockassembly_api_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return srv.(DRPCBlockAssemblyAPIServer).
					AddTxBatch(
						ctx,
						in1.(*AddTxBatchRequest),
					)
			}, DRPCBlockAssemblyAPIServer.AddTxBatch, true
	case 5:
		return "/blockassembly_api.BlockAssemblyAPI/GetMiningCandidate", drpcEncoding_File_services_blockassembly_blockassembly_api_blockassembly_api_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return srv.(DRPCBlockAssemblyAPIServer).
					GetMiningCandidate(
						ctx,
						in1.(*EmptyMessage),
					)
			}, DRPCBlockAssemblyAPIServer.GetMiningCandidate, true
	case 6:
		return "/blockassembly_api.BlockAssemblyAPI/SubmitMiningSolution", drpcEncoding_File_services_blockassembly_blockassembly_api_blockassembly_api_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return srv.(DRPCBlockAssemblyAPIServer).
					SubmitMiningSolution(
						ctx,
						in1.(*SubmitMiningSolutionRequest),
					)
			}, DRPCBlockAssemblyAPIServer.SubmitMiningSolution, true
	default:
		return "", nil, nil, nil, false
	}
}

func DRPCRegisterBlockAssemblyAPI(mux drpc.Mux, impl DRPCBlockAssemblyAPIServer) error {
	return mux.Register(impl, DRPCBlockAssemblyAPIDescription{})
}

type DRPCBlockAssemblyAPI_HealthGRPCStream interface {
	drpc.Stream
	SendAndClose(*HealthResponse) error
}

type drpcBlockAssemblyAPI_HealthGRPCStream struct {
	drpc.Stream
}

func (x *drpcBlockAssemblyAPI_HealthGRPCStream) SendAndClose(m *HealthResponse) error {
	if err := x.MsgSend(m, drpcEncoding_File_services_blockassembly_blockassembly_api_blockassembly_api_proto{}); err != nil {
		return err
	}
	return x.CloseSend()
}

type DRPCBlockAssemblyAPI_NewChaintipAndHeightStream interface {
	drpc.Stream
	SendAndClose(*EmptyMessage) error
}

type drpcBlockAssemblyAPI_NewChaintipAndHeightStream struct {
	drpc.Stream
}

func (x *drpcBlockAssemblyAPI_NewChaintipAndHeightStream) SendAndClose(m *EmptyMessage) error {
	if err := x.MsgSend(m, drpcEncoding_File_services_blockassembly_blockassembly_api_blockassembly_api_proto{}); err != nil {
		return err
	}
	return x.CloseSend()
}

type DRPCBlockAssemblyAPI_AddTxStream interface {
	drpc.Stream
	SendAndClose(*AddTxResponse) error
}

type drpcBlockAssemblyAPI_AddTxStream struct {
	drpc.Stream
}

func (x *drpcBlockAssemblyAPI_AddTxStream) SendAndClose(m *AddTxResponse) error {
	if err := x.MsgSend(m, drpcEncoding_File_services_blockassembly_blockassembly_api_blockassembly_api_proto{}); err != nil {
		return err
	}
	return x.CloseSend()
}

type DRPCBlockAssemblyAPI_RemoveTxStream interface {
	drpc.Stream
	SendAndClose(*EmptyMessage) error
}

type drpcBlockAssemblyAPI_RemoveTxStream struct {
	drpc.Stream
}

func (x *drpcBlockAssemblyAPI_RemoveTxStream) SendAndClose(m *EmptyMessage) error {
	if err := x.MsgSend(m, drpcEncoding_File_services_blockassembly_blockassembly_api_blockassembly_api_proto{}); err != nil {
		return err
	}
	return x.CloseSend()
}

type DRPCBlockAssemblyAPI_AddTxBatchStream interface {
	drpc.Stream
	SendAndClose(*AddTxBatchResponse) error
}

type drpcBlockAssemblyAPI_AddTxBatchStream struct {
	drpc.Stream
}

func (x *drpcBlockAssemblyAPI_AddTxBatchStream) SendAndClose(m *AddTxBatchResponse) error {
	if err := x.MsgSend(m, drpcEncoding_File_services_blockassembly_blockassembly_api_blockassembly_api_proto{}); err != nil {
		return err
	}
	return x.CloseSend()
}

type DRPCBlockAssemblyAPI_GetMiningCandidateStream interface {
	drpc.Stream
	SendAndClose(*model.MiningCandidate) error
}

type drpcBlockAssemblyAPI_GetMiningCandidateStream struct {
	drpc.Stream
}

func (x *drpcBlockAssemblyAPI_GetMiningCandidateStream) SendAndClose(m *model.MiningCandidate) error {
	if err := x.MsgSend(m, drpcEncoding_File_services_blockassembly_blockassembly_api_blockassembly_api_proto{}); err != nil {
		return err
	}
	return x.CloseSend()
}

type DRPCBlockAssemblyAPI_SubmitMiningSolutionStream interface {
	drpc.Stream
	SendAndClose(*SubmitMiningSolutionResponse) error
}

type drpcBlockAssemblyAPI_SubmitMiningSolutionStream struct {
	drpc.Stream
}

func (x *drpcBlockAssemblyAPI_SubmitMiningSolutionStream) SendAndClose(m *SubmitMiningSolutionResponse) error {
	if err := x.MsgSend(m, drpcEncoding_File_services_blockassembly_blockassembly_api_blockassembly_api_proto{}); err != nil {
		return err
	}
	return x.CloseSend()
}
