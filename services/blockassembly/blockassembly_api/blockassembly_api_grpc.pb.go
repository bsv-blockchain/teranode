// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.1
// source: services/blockassembly/blockassembly_api/blockassembly_api.proto

package blockassembly_api

import (
	context "context"
	model "github.com/bitcoin-sv/ubsv/model"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	BlockAssemblyAPI_HealthGRPC_FullMethodName               = "/blockassembly_api.BlockAssemblyAPI/HealthGRPC"
	BlockAssemblyAPI_AddTx_FullMethodName                    = "/blockassembly_api.BlockAssemblyAPI/AddTx"
	BlockAssemblyAPI_RemoveTx_FullMethodName                 = "/blockassembly_api.BlockAssemblyAPI/RemoveTx"
	BlockAssemblyAPI_AddTxBatch_FullMethodName               = "/blockassembly_api.BlockAssemblyAPI/AddTxBatch"
	BlockAssemblyAPI_GetMiningCandidate_FullMethodName       = "/blockassembly_api.BlockAssemblyAPI/GetMiningCandidate"
	BlockAssemblyAPI_SubmitMiningSolution_FullMethodName     = "/blockassembly_api.BlockAssemblyAPI/SubmitMiningSolution"
	BlockAssemblyAPI_DeDuplicateBlockAssembly_FullMethodName = "/blockassembly_api.BlockAssemblyAPI/DeDuplicateBlockAssembly"
	BlockAssemblyAPI_ResetBlockAssembly_FullMethodName       = "/blockassembly_api.BlockAssemblyAPI/ResetBlockAssembly"
	BlockAssemblyAPI_GetBlockAssemblyState_FullMethodName    = "/blockassembly_api.BlockAssemblyAPI/GetBlockAssemblyState"
)

// BlockAssemblyAPIClient is the client API for BlockAssemblyAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// The Block Assembly Service is responsible for assembling new blocks and adding them to the blockchain.
type BlockAssemblyAPIClient interface {
	// Health returns the health of the API.
	HealthGRPC(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (*HealthResponse, error)
	// Adds a transaction to the list of transactions to be included in the next available Subtree.
	AddTx(ctx context.Context, in *AddTxRequest, opts ...grpc.CallOption) (*AddTxResponse, error)
	// Removes a transaction from the list of transactions to be included in the next available Subtree.
	RemoveTx(ctx context.Context, in *RemoveTxRequest, opts ...grpc.CallOption) (*EmptyMessage, error)
	// Adds a batch of transactions to the list of transactions to be included in the next available Subtree.
	AddTxBatch(ctx context.Context, in *AddTxBatchRequest, opts ...grpc.CallOption) (*AddTxBatchResponse, error)
	// Returns a mining candidate block, including the coinbase transaction, the subtrees, the root merkle proof and the block fees.
	GetMiningCandidate(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (*model.MiningCandidate, error)
	// Submits a mining solution to the blockchain.
	SubmitMiningSolution(ctx context.Context, in *SubmitMiningSolutionRequest, opts ...grpc.CallOption) (*SubmitMiningSolutionResponse, error)
	// De-duplicate transaction in block assembly subtree processor.
	DeDuplicateBlockAssembly(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (*EmptyMessage, error)
	// Reset transaction in block assembly subtree processor.
	ResetBlockAssembly(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (*EmptyMessage, error)
	// Get the block assembly state.
	GetBlockAssemblyState(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (*StateMessage, error)
}

type blockAssemblyAPIClient struct {
	cc grpc.ClientConnInterface
}

func NewBlockAssemblyAPIClient(cc grpc.ClientConnInterface) BlockAssemblyAPIClient {
	return &blockAssemblyAPIClient{cc}
}

func (c *blockAssemblyAPIClient) HealthGRPC(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (*HealthResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HealthResponse)
	err := c.cc.Invoke(ctx, BlockAssemblyAPI_HealthGRPC_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blockAssemblyAPIClient) AddTx(ctx context.Context, in *AddTxRequest, opts ...grpc.CallOption) (*AddTxResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddTxResponse)
	err := c.cc.Invoke(ctx, BlockAssemblyAPI_AddTx_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blockAssemblyAPIClient) RemoveTx(ctx context.Context, in *RemoveTxRequest, opts ...grpc.CallOption) (*EmptyMessage, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EmptyMessage)
	err := c.cc.Invoke(ctx, BlockAssemblyAPI_RemoveTx_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blockAssemblyAPIClient) AddTxBatch(ctx context.Context, in *AddTxBatchRequest, opts ...grpc.CallOption) (*AddTxBatchResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddTxBatchResponse)
	err := c.cc.Invoke(ctx, BlockAssemblyAPI_AddTxBatch_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blockAssemblyAPIClient) GetMiningCandidate(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (*model.MiningCandidate, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(model.MiningCandidate)
	err := c.cc.Invoke(ctx, BlockAssemblyAPI_GetMiningCandidate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blockAssemblyAPIClient) SubmitMiningSolution(ctx context.Context, in *SubmitMiningSolutionRequest, opts ...grpc.CallOption) (*SubmitMiningSolutionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SubmitMiningSolutionResponse)
	err := c.cc.Invoke(ctx, BlockAssemblyAPI_SubmitMiningSolution_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blockAssemblyAPIClient) DeDuplicateBlockAssembly(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (*EmptyMessage, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EmptyMessage)
	err := c.cc.Invoke(ctx, BlockAssemblyAPI_DeDuplicateBlockAssembly_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blockAssemblyAPIClient) ResetBlockAssembly(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (*EmptyMessage, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EmptyMessage)
	err := c.cc.Invoke(ctx, BlockAssemblyAPI_ResetBlockAssembly_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blockAssemblyAPIClient) GetBlockAssemblyState(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (*StateMessage, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StateMessage)
	err := c.cc.Invoke(ctx, BlockAssemblyAPI_GetBlockAssemblyState_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BlockAssemblyAPIServer is the server API for BlockAssemblyAPI service.
// All implementations must embed UnimplementedBlockAssemblyAPIServer
// for forward compatibility.
//
// The Block Assembly Service is responsible for assembling new blocks and adding them to the blockchain.
type BlockAssemblyAPIServer interface {
	// Health returns the health of the API.
	HealthGRPC(context.Context, *EmptyMessage) (*HealthResponse, error)
	// Adds a transaction to the list of transactions to be included in the next available Subtree.
	AddTx(context.Context, *AddTxRequest) (*AddTxResponse, error)
	// Removes a transaction from the list of transactions to be included in the next available Subtree.
	RemoveTx(context.Context, *RemoveTxRequest) (*EmptyMessage, error)
	// Adds a batch of transactions to the list of transactions to be included in the next available Subtree.
	AddTxBatch(context.Context, *AddTxBatchRequest) (*AddTxBatchResponse, error)
	// Returns a mining candidate block, including the coinbase transaction, the subtrees, the root merkle proof and the block fees.
	GetMiningCandidate(context.Context, *EmptyMessage) (*model.MiningCandidate, error)
	// Submits a mining solution to the blockchain.
	SubmitMiningSolution(context.Context, *SubmitMiningSolutionRequest) (*SubmitMiningSolutionResponse, error)
	// De-duplicate transaction in block assembly subtree processor.
	DeDuplicateBlockAssembly(context.Context, *EmptyMessage) (*EmptyMessage, error)
	// Reset transaction in block assembly subtree processor.
	ResetBlockAssembly(context.Context, *EmptyMessage) (*EmptyMessage, error)
	// Get the block assembly state.
	GetBlockAssemblyState(context.Context, *EmptyMessage) (*StateMessage, error)
	mustEmbedUnimplementedBlockAssemblyAPIServer()
}

// UnimplementedBlockAssemblyAPIServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedBlockAssemblyAPIServer struct{}

func (UnimplementedBlockAssemblyAPIServer) HealthGRPC(context.Context, *EmptyMessage) (*HealthResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HealthGRPC not implemented")
}
func (UnimplementedBlockAssemblyAPIServer) AddTx(context.Context, *AddTxRequest) (*AddTxResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddTx not implemented")
}
func (UnimplementedBlockAssemblyAPIServer) RemoveTx(context.Context, *RemoveTxRequest) (*EmptyMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveTx not implemented")
}
func (UnimplementedBlockAssemblyAPIServer) AddTxBatch(context.Context, *AddTxBatchRequest) (*AddTxBatchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddTxBatch not implemented")
}
func (UnimplementedBlockAssemblyAPIServer) GetMiningCandidate(context.Context, *EmptyMessage) (*model.MiningCandidate, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMiningCandidate not implemented")
}
func (UnimplementedBlockAssemblyAPIServer) SubmitMiningSolution(context.Context, *SubmitMiningSolutionRequest) (*SubmitMiningSolutionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitMiningSolution not implemented")
}
func (UnimplementedBlockAssemblyAPIServer) DeDuplicateBlockAssembly(context.Context, *EmptyMessage) (*EmptyMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeDuplicateBlockAssembly not implemented")
}
func (UnimplementedBlockAssemblyAPIServer) ResetBlockAssembly(context.Context, *EmptyMessage) (*EmptyMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResetBlockAssembly not implemented")
}
func (UnimplementedBlockAssemblyAPIServer) GetBlockAssemblyState(context.Context, *EmptyMessage) (*StateMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBlockAssemblyState not implemented")
}
func (UnimplementedBlockAssemblyAPIServer) mustEmbedUnimplementedBlockAssemblyAPIServer() {}
func (UnimplementedBlockAssemblyAPIServer) testEmbeddedByValue()                          {}

// UnsafeBlockAssemblyAPIServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BlockAssemblyAPIServer will
// result in compilation errors.
type UnsafeBlockAssemblyAPIServer interface {
	mustEmbedUnimplementedBlockAssemblyAPIServer()
}

func RegisterBlockAssemblyAPIServer(s grpc.ServiceRegistrar, srv BlockAssemblyAPIServer) {
	// If the following call pancis, it indicates UnimplementedBlockAssemblyAPIServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&BlockAssemblyAPI_ServiceDesc, srv)
}

func _BlockAssemblyAPI_HealthGRPC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlockAssemblyAPIServer).HealthGRPC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BlockAssemblyAPI_HealthGRPC_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlockAssemblyAPIServer).HealthGRPC(ctx, req.(*EmptyMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlockAssemblyAPI_AddTx_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddTxRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlockAssemblyAPIServer).AddTx(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BlockAssemblyAPI_AddTx_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlockAssemblyAPIServer).AddTx(ctx, req.(*AddTxRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlockAssemblyAPI_RemoveTx_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveTxRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlockAssemblyAPIServer).RemoveTx(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BlockAssemblyAPI_RemoveTx_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlockAssemblyAPIServer).RemoveTx(ctx, req.(*RemoveTxRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlockAssemblyAPI_AddTxBatch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddTxBatchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlockAssemblyAPIServer).AddTxBatch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BlockAssemblyAPI_AddTxBatch_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlockAssemblyAPIServer).AddTxBatch(ctx, req.(*AddTxBatchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlockAssemblyAPI_GetMiningCandidate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlockAssemblyAPIServer).GetMiningCandidate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BlockAssemblyAPI_GetMiningCandidate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlockAssemblyAPIServer).GetMiningCandidate(ctx, req.(*EmptyMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlockAssemblyAPI_SubmitMiningSolution_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubmitMiningSolutionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlockAssemblyAPIServer).SubmitMiningSolution(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BlockAssemblyAPI_SubmitMiningSolution_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlockAssemblyAPIServer).SubmitMiningSolution(ctx, req.(*SubmitMiningSolutionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlockAssemblyAPI_DeDuplicateBlockAssembly_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlockAssemblyAPIServer).DeDuplicateBlockAssembly(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BlockAssemblyAPI_DeDuplicateBlockAssembly_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlockAssemblyAPIServer).DeDuplicateBlockAssembly(ctx, req.(*EmptyMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlockAssemblyAPI_ResetBlockAssembly_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlockAssemblyAPIServer).ResetBlockAssembly(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BlockAssemblyAPI_ResetBlockAssembly_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlockAssemblyAPIServer).ResetBlockAssembly(ctx, req.(*EmptyMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlockAssemblyAPI_GetBlockAssemblyState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlockAssemblyAPIServer).GetBlockAssemblyState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BlockAssemblyAPI_GetBlockAssemblyState_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlockAssemblyAPIServer).GetBlockAssemblyState(ctx, req.(*EmptyMessage))
	}
	return interceptor(ctx, in, info, handler)
}

// BlockAssemblyAPI_ServiceDesc is the grpc.ServiceDesc for BlockAssemblyAPI service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BlockAssemblyAPI_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "blockassembly_api.BlockAssemblyAPI",
	HandlerType: (*BlockAssemblyAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "HealthGRPC",
			Handler:    _BlockAssemblyAPI_HealthGRPC_Handler,
		},
		{
			MethodName: "AddTx",
			Handler:    _BlockAssemblyAPI_AddTx_Handler,
		},
		{
			MethodName: "RemoveTx",
			Handler:    _BlockAssemblyAPI_RemoveTx_Handler,
		},
		{
			MethodName: "AddTxBatch",
			Handler:    _BlockAssemblyAPI_AddTxBatch_Handler,
		},
		{
			MethodName: "GetMiningCandidate",
			Handler:    _BlockAssemblyAPI_GetMiningCandidate_Handler,
		},
		{
			MethodName: "SubmitMiningSolution",
			Handler:    _BlockAssemblyAPI_SubmitMiningSolution_Handler,
		},
		{
			MethodName: "DeDuplicateBlockAssembly",
			Handler:    _BlockAssemblyAPI_DeDuplicateBlockAssembly_Handler,
		},
		{
			MethodName: "ResetBlockAssembly",
			Handler:    _BlockAssemblyAPI_ResetBlockAssembly_Handler,
		},
		{
			MethodName: "GetBlockAssemblyState",
			Handler:    _BlockAssemblyAPI_GetBlockAssemblyState_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "services/blockassembly/blockassembly_api/blockassembly_api.proto",
}
