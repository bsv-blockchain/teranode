// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: services/blockassembly/blockassembly_api/blockassembly_api.proto

package blockassembly_api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// BlockAssemblyAPIClient is the client API for BlockAssemblyAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BlockAssemblyAPIClient interface {
	// Health returns the health of the API.
	Health(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*HealthResponse, error)
	AddTxID(ctx context.Context, in *AddTxIDRequest, opts ...grpc.CallOption) (*AddTxIDResponse, error)
}

type blockAssemblyAPIClient struct {
	cc grpc.ClientConnInterface
}

func NewBlockAssemblyAPIClient(cc grpc.ClientConnInterface) BlockAssemblyAPIClient {
	return &blockAssemblyAPIClient{cc}
}

func (c *blockAssemblyAPIClient) Health(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*HealthResponse, error) {
	out := new(HealthResponse)
	err := c.cc.Invoke(ctx, "/blockassembly_api.BlockAssemblyAPI/Health", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blockAssemblyAPIClient) AddTxID(ctx context.Context, in *AddTxIDRequest, opts ...grpc.CallOption) (*AddTxIDResponse, error) {
	out := new(AddTxIDResponse)
	err := c.cc.Invoke(ctx, "/blockassembly_api.BlockAssemblyAPI/AddTxID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BlockAssemblyAPIServer is the server API for BlockAssemblyAPI service.
// All implementations must embed UnimplementedBlockAssemblyAPIServer
// for forward compatibility
type BlockAssemblyAPIServer interface {
	// Health returns the health of the API.
	Health(context.Context, *emptypb.Empty) (*HealthResponse, error)
	AddTxID(context.Context, *AddTxIDRequest) (*AddTxIDResponse, error)
	mustEmbedUnimplementedBlockAssemblyAPIServer()
}

// UnimplementedBlockAssemblyAPIServer must be embedded to have forward compatible implementations.
type UnimplementedBlockAssemblyAPIServer struct {
}

func (UnimplementedBlockAssemblyAPIServer) Health(context.Context, *emptypb.Empty) (*HealthResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Health not implemented")
}
func (UnimplementedBlockAssemblyAPIServer) AddTxID(context.Context, *AddTxIDRequest) (*AddTxIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddTxID not implemented")
}
func (UnimplementedBlockAssemblyAPIServer) mustEmbedUnimplementedBlockAssemblyAPIServer() {}

// UnsafeBlockAssemblyAPIServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BlockAssemblyAPIServer will
// result in compilation errors.
type UnsafeBlockAssemblyAPIServer interface {
	mustEmbedUnimplementedBlockAssemblyAPIServer()
}

func RegisterBlockAssemblyAPIServer(s grpc.ServiceRegistrar, srv BlockAssemblyAPIServer) {
	s.RegisterService(&BlockAssemblyAPI_ServiceDesc, srv)
}

func _BlockAssemblyAPI_Health_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlockAssemblyAPIServer).Health(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/blockassembly_api.BlockAssemblyAPI/Health",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlockAssemblyAPIServer).Health(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlockAssemblyAPI_AddTxID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddTxIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlockAssemblyAPIServer).AddTxID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/blockassembly_api.BlockAssemblyAPI/AddTxID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlockAssemblyAPIServer).AddTxID(ctx, req.(*AddTxIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BlockAssemblyAPI_ServiceDesc is the grpc.ServiceDesc for BlockAssemblyAPI service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BlockAssemblyAPI_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "blockassembly_api.BlockAssemblyAPI",
	HandlerType: (*BlockAssemblyAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Health",
			Handler:    _BlockAssemblyAPI_Health_Handler,
		},
		{
			MethodName: "AddTxID",
			Handler:    _BlockAssemblyAPI_AddTxID_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "services/blockassembly/blockassembly_api/blockassembly_api.proto",
}
