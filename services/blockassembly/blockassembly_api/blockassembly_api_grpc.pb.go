// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.23.4
// source: services/blockassembly/blockassembly_api/blockassembly_api.proto

package blockassembly_api

import (
	context "context"
	model "github.com/bitcoin-sv/ubsv/model"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	BlockAssemblyAPI_Health_FullMethodName               = "/blockassembly_api.BlockAssemblyAPI/Health"
	BlockAssemblyAPI_NewChaintipAndHeight_FullMethodName = "/blockassembly_api.BlockAssemblyAPI/NewChaintipAndHeight"
	BlockAssemblyAPI_AddTx_FullMethodName                = "/blockassembly_api.BlockAssemblyAPI/AddTx"
	BlockAssemblyAPI_GetMiningCandidate_FullMethodName   = "/blockassembly_api.BlockAssemblyAPI/GetMiningCandidate"
	BlockAssemblyAPI_SubmitMiningSolution_FullMethodName = "/blockassembly_api.BlockAssemblyAPI/SubmitMiningSolution"
)

// BlockAssemblyAPIClient is the client API for BlockAssemblyAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BlockAssemblyAPIClient interface {
	// Health returns the health of the API.
	Health(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (*HealthResponse, error)
	NewChaintipAndHeight(ctx context.Context, in *NewChaintipAndHeightRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	AddTx(ctx context.Context, in *AddTxRequest, opts ...grpc.CallOption) (*AddTxResponse, error)
	GetMiningCandidate(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (*model.MiningCandidate, error)
	SubmitMiningSolution(ctx context.Context, in *SubmitMiningSolutionRequest, opts ...grpc.CallOption) (*SubmitMiningSolutionResponse, error)
}

type blockAssemblyAPIClient struct {
	cc grpc.ClientConnInterface
}

func NewBlockAssemblyAPIClient(cc grpc.ClientConnInterface) BlockAssemblyAPIClient {
	return &blockAssemblyAPIClient{cc}
}

func (c *blockAssemblyAPIClient) Health(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (*HealthResponse, error) {
	out := new(HealthResponse)
	err := c.cc.Invoke(ctx, BlockAssemblyAPI_Health_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blockAssemblyAPIClient) NewChaintipAndHeight(ctx context.Context, in *NewChaintipAndHeightRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, BlockAssemblyAPI_NewChaintipAndHeight_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blockAssemblyAPIClient) AddTx(ctx context.Context, in *AddTxRequest, opts ...grpc.CallOption) (*AddTxResponse, error) {
	out := new(AddTxResponse)
	err := c.cc.Invoke(ctx, BlockAssemblyAPI_AddTx_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blockAssemblyAPIClient) GetMiningCandidate(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (*model.MiningCandidate, error) {
	out := new(model.MiningCandidate)
	err := c.cc.Invoke(ctx, BlockAssemblyAPI_GetMiningCandidate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blockAssemblyAPIClient) SubmitMiningSolution(ctx context.Context, in *SubmitMiningSolutionRequest, opts ...grpc.CallOption) (*SubmitMiningSolutionResponse, error) {
	out := new(SubmitMiningSolutionResponse)
	err := c.cc.Invoke(ctx, BlockAssemblyAPI_SubmitMiningSolution_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BlockAssemblyAPIServer is the server API for BlockAssemblyAPI service.
// All implementations must embed UnimplementedBlockAssemblyAPIServer
// for forward compatibility
type BlockAssemblyAPIServer interface {
	// Health returns the health of the API.
	Health(context.Context, *EmptyMessage) (*HealthResponse, error)
	NewChaintipAndHeight(context.Context, *NewChaintipAndHeightRequest) (*emptypb.Empty, error)
	AddTx(context.Context, *AddTxRequest) (*AddTxResponse, error)
	GetMiningCandidate(context.Context, *EmptyMessage) (*model.MiningCandidate, error)
	SubmitMiningSolution(context.Context, *SubmitMiningSolutionRequest) (*SubmitMiningSolutionResponse, error)
	mustEmbedUnimplementedBlockAssemblyAPIServer()
}

// UnimplementedBlockAssemblyAPIServer must be embedded to have forward compatible implementations.
type UnimplementedBlockAssemblyAPIServer struct {
}

func (UnimplementedBlockAssemblyAPIServer) Health(context.Context, *EmptyMessage) (*HealthResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Health not implemented")
}
func (UnimplementedBlockAssemblyAPIServer) NewChaintipAndHeight(context.Context, *NewChaintipAndHeightRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NewChaintipAndHeight not implemented")
}
func (UnimplementedBlockAssemblyAPIServer) AddTx(context.Context, *AddTxRequest) (*AddTxResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddTx not implemented")
}
func (UnimplementedBlockAssemblyAPIServer) GetMiningCandidate(context.Context, *EmptyMessage) (*model.MiningCandidate, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMiningCandidate not implemented")
}
func (UnimplementedBlockAssemblyAPIServer) SubmitMiningSolution(context.Context, *SubmitMiningSolutionRequest) (*SubmitMiningSolutionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitMiningSolution not implemented")
}
func (UnimplementedBlockAssemblyAPIServer) mustEmbedUnimplementedBlockAssemblyAPIServer() {}

// UnsafeBlockAssemblyAPIServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BlockAssemblyAPIServer will
// result in compilation errors.
type UnsafeBlockAssemblyAPIServer interface {
	mustEmbedUnimplementedBlockAssemblyAPIServer()
}

func RegisterBlockAssemblyAPIServer(s grpc.ServiceRegistrar, srv BlockAssemblyAPIServer) {
	s.RegisterService(&BlockAssemblyAPI_ServiceDesc, srv)
}

func _BlockAssemblyAPI_Health_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlockAssemblyAPIServer).Health(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BlockAssemblyAPI_Health_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlockAssemblyAPIServer).Health(ctx, req.(*EmptyMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlockAssemblyAPI_NewChaintipAndHeight_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewChaintipAndHeightRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlockAssemblyAPIServer).NewChaintipAndHeight(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BlockAssemblyAPI_NewChaintipAndHeight_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlockAssemblyAPIServer).NewChaintipAndHeight(ctx, req.(*NewChaintipAndHeightRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlockAssemblyAPI_AddTx_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddTxRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlockAssemblyAPIServer).AddTx(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BlockAssemblyAPI_AddTx_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlockAssemblyAPIServer).AddTx(ctx, req.(*AddTxRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlockAssemblyAPI_GetMiningCandidate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlockAssemblyAPIServer).GetMiningCandidate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BlockAssemblyAPI_GetMiningCandidate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlockAssemblyAPIServer).GetMiningCandidate(ctx, req.(*EmptyMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlockAssemblyAPI_SubmitMiningSolution_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubmitMiningSolutionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlockAssemblyAPIServer).SubmitMiningSolution(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BlockAssemblyAPI_SubmitMiningSolution_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlockAssemblyAPIServer).SubmitMiningSolution(ctx, req.(*SubmitMiningSolutionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BlockAssemblyAPI_ServiceDesc is the grpc.ServiceDesc for BlockAssemblyAPI service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BlockAssemblyAPI_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "blockassembly_api.BlockAssemblyAPI",
	HandlerType: (*BlockAssemblyAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Health",
			Handler:    _BlockAssemblyAPI_Health_Handler,
		},
		{
			MethodName: "NewChaintipAndHeight",
			Handler:    _BlockAssemblyAPI_NewChaintipAndHeight_Handler,
		},
		{
			MethodName: "AddTx",
			Handler:    _BlockAssemblyAPI_AddTx_Handler,
		},
		{
			MethodName: "GetMiningCandidate",
			Handler:    _BlockAssemblyAPI_GetMiningCandidate_Handler,
		},
		{
			MethodName: "SubmitMiningSolution",
			Handler:    _BlockAssemblyAPI_SubmitMiningSolution_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "services/blockassembly/blockassembly_api/blockassembly_api.proto",
}
