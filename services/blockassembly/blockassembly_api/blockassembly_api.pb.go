// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.1
// 	protoc        v5.28.2
// source: services/blockassembly/blockassembly_api/blockassembly_api.proto

package blockassembly_api

import (
	model "github.com/bitcoin-sv/ubsv/model"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// An empty message used as a placeholder or a request with no data.
type EmptyMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *EmptyMessage) Reset() {
	*x = EmptyMessage{}
	mi := &file_services_blockassembly_blockassembly_api_blockassembly_api_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EmptyMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EmptyMessage) ProtoMessage() {}

func (x *EmptyMessage) ProtoReflect() protoreflect.Message {
	mi := &file_services_blockassembly_blockassembly_api_blockassembly_api_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EmptyMessage.ProtoReflect.Descriptor instead.
func (*EmptyMessage) Descriptor() ([]byte, []int) {
	return file_services_blockassembly_blockassembly_api_blockassembly_api_proto_rawDescGZIP(), []int{0}
}

// Contains the health status of the service. Includes an 'ok' flag indicating health status, details providing more context, and a timestamp.
type HealthResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ok        bool                   `protobuf:"varint,1,opt,name=ok,proto3" json:"ok,omitempty"`              // true if the service is healthy
	Details   string                 `protobuf:"bytes,2,opt,name=details,proto3" json:"details,omitempty"`     // optional, human-readable details
	Timestamp *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=timestamp,proto3" json:"timestamp,omitempty"` // unix timestamp
}

func (x *HealthResponse) Reset() {
	*x = HealthResponse{}
	mi := &file_services_blockassembly_blockassembly_api_blockassembly_api_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HealthResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HealthResponse) ProtoMessage() {}

func (x *HealthResponse) ProtoReflect() protoreflect.Message {
	mi := &file_services_blockassembly_blockassembly_api_blockassembly_api_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HealthResponse.ProtoReflect.Descriptor instead.
func (*HealthResponse) Descriptor() ([]byte, []int) {
	return file_services_blockassembly_blockassembly_api_blockassembly_api_proto_rawDescGZIP(), []int{1}
}

func (x *HealthResponse) GetOk() bool {
	if x != nil {
		return x.Ok
	}
	return false
}

func (x *HealthResponse) GetDetails() string {
	if x != nil {
		return x.Details
	}
	return ""
}

func (x *HealthResponse) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

// Request for adding a new chaintip and height information.
type NewChaintipAndHeightRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Chaintip []byte `protobuf:"bytes,1,opt,name=chaintip,proto3" json:"chaintip,omitempty"` // the chaintip hash
	Height   uint32 `protobuf:"varint,2,opt,name=height,proto3" json:"height,omitempty"`    // the height of the chaintip in the blockchain
}

func (x *NewChaintipAndHeightRequest) Reset() {
	*x = NewChaintipAndHeightRequest{}
	mi := &file_services_blockassembly_blockassembly_api_blockassembly_api_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NewChaintipAndHeightRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewChaintipAndHeightRequest) ProtoMessage() {}

func (x *NewChaintipAndHeightRequest) ProtoReflect() protoreflect.Message {
	mi := &file_services_blockassembly_blockassembly_api_blockassembly_api_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewChaintipAndHeightRequest.ProtoReflect.Descriptor instead.
func (*NewChaintipAndHeightRequest) Descriptor() ([]byte, []int) {
	return file_services_blockassembly_blockassembly_api_blockassembly_api_proto_rawDescGZIP(), []int{2}
}

func (x *NewChaintipAndHeightRequest) GetChaintip() []byte {
	if x != nil {
		return x.Chaintip
	}
	return nil
}

func (x *NewChaintipAndHeightRequest) GetHeight() uint32 {
	if x != nil {
		return x.Height
	}
	return 0
}

// Request for adding a new transaction to the mining candidate block.
type AddTxRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Txid     []byte   `protobuf:"bytes,1,opt,name=txid,proto3" json:"txid,omitempty"`          // the transaction id
	Fee      uint64   `protobuf:"varint,3,opt,name=fee,proto3" json:"fee,omitempty"`           // the transaction fee in satoshis
	Size     uint64   `protobuf:"varint,4,opt,name=size,proto3" json:"size,omitempty"`         // the size of the transaction in bytes
	Locktime uint32   `protobuf:"varint,2,opt,name=locktime,proto3" json:"locktime,omitempty"` // the earliest time a transaction can be mined into a block
	Utxos    [][]byte `protobuf:"bytes,5,rep,name=utxos,proto3" json:"utxos,omitempty"`        // the UTXOs consumed by this transaction
	Parents  [][]byte `protobuf:"bytes,6,rep,name=parents,proto3" json:"parents,omitempty"`    // the parent transactions of this transaction
}

func (x *AddTxRequest) Reset() {
	*x = AddTxRequest{}
	mi := &file_services_blockassembly_blockassembly_api_blockassembly_api_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddTxRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddTxRequest) ProtoMessage() {}

func (x *AddTxRequest) ProtoReflect() protoreflect.Message {
	mi := &file_services_blockassembly_blockassembly_api_blockassembly_api_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddTxRequest.ProtoReflect.Descriptor instead.
func (*AddTxRequest) Descriptor() ([]byte, []int) {
	return file_services_blockassembly_blockassembly_api_blockassembly_api_proto_rawDescGZIP(), []int{3}
}

func (x *AddTxRequest) GetTxid() []byte {
	if x != nil {
		return x.Txid
	}
	return nil
}

func (x *AddTxRequest) GetFee() uint64 {
	if x != nil {
		return x.Fee
	}
	return 0
}

func (x *AddTxRequest) GetSize() uint64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *AddTxRequest) GetLocktime() uint32 {
	if x != nil {
		return x.Locktime
	}
	return 0
}

func (x *AddTxRequest) GetUtxos() [][]byte {
	if x != nil {
		return x.Utxos
	}
	return nil
}

func (x *AddTxRequest) GetParents() [][]byte {
	if x != nil {
		return x.Parents
	}
	return nil
}

// Request for adding a batch of transactions to the mining candidate block.
type AddTxBatchRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TxRequests []*AddTxRequest `protobuf:"bytes,1,rep,name=txRequests,proto3" json:"txRequests,omitempty"` // a batch of transaction requests
}

func (x *AddTxBatchRequest) Reset() {
	*x = AddTxBatchRequest{}
	mi := &file_services_blockassembly_blockassembly_api_blockassembly_api_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddTxBatchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddTxBatchRequest) ProtoMessage() {}

func (x *AddTxBatchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_services_blockassembly_blockassembly_api_blockassembly_api_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddTxBatchRequest.ProtoReflect.Descriptor instead.
func (*AddTxBatchRequest) Descriptor() ([]byte, []int) {
	return file_services_blockassembly_blockassembly_api_blockassembly_api_proto_rawDescGZIP(), []int{4}
}

func (x *AddTxBatchRequest) GetTxRequests() []*AddTxRequest {
	if x != nil {
		return x.TxRequests
	}
	return nil
}

// Request for removing a transaction from the mining candidate block.
type RemoveTxRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Txid []byte `protobuf:"bytes,1,opt,name=txid,proto3" json:"txid,omitempty"` // the transaction id to remove
}

func (x *RemoveTxRequest) Reset() {
	*x = RemoveTxRequest{}
	mi := &file_services_blockassembly_blockassembly_api_blockassembly_api_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RemoveTxRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveTxRequest) ProtoMessage() {}

func (x *RemoveTxRequest) ProtoReflect() protoreflect.Message {
	mi := &file_services_blockassembly_blockassembly_api_blockassembly_api_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveTxRequest.ProtoReflect.Descriptor instead.
func (*RemoveTxRequest) Descriptor() ([]byte, []int) {
	return file_services_blockassembly_blockassembly_api_blockassembly_api_proto_rawDescGZIP(), []int{5}
}

func (x *RemoveTxRequest) GetTxid() []byte {
	if x != nil {
		return x.Txid
	}
	return nil
}

// Response indicating whether the addition of a transaction was successful.
type AddTxResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ok bool `protobuf:"varint,1,opt,name=ok,proto3" json:"ok,omitempty"` // true if the transaction was successfully added
}

func (x *AddTxResponse) Reset() {
	*x = AddTxResponse{}
	mi := &file_services_blockassembly_blockassembly_api_blockassembly_api_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddTxResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddTxResponse) ProtoMessage() {}

func (x *AddTxResponse) ProtoReflect() protoreflect.Message {
	mi := &file_services_blockassembly_blockassembly_api_blockassembly_api_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddTxResponse.ProtoReflect.Descriptor instead.
func (*AddTxResponse) Descriptor() ([]byte, []int) {
	return file_services_blockassembly_blockassembly_api_blockassembly_api_proto_rawDescGZIP(), []int{6}
}

func (x *AddTxResponse) GetOk() bool {
	if x != nil {
		return x.Ok
	}
	return false
}

// Response indicating whether the addition of a batch of transactions was successful.
type AddTxBatchResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ok         bool     `protobuf:"varint,1,opt,name=ok,proto3" json:"ok,omitempty"`                // true if the transactions were successfully added
	TxIdErrors [][]byte `protobuf:"bytes,2,rep,name=txIdErrors,proto3" json:"txIdErrors,omitempty"` // list of transaction IDs that encountered errors
}

func (x *AddTxBatchResponse) Reset() {
	*x = AddTxBatchResponse{}
	mi := &file_services_blockassembly_blockassembly_api_blockassembly_api_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddTxBatchResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddTxBatchResponse) ProtoMessage() {}

func (x *AddTxBatchResponse) ProtoReflect() protoreflect.Message {
	mi := &file_services_blockassembly_blockassembly_api_blockassembly_api_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddTxBatchResponse.ProtoReflect.Descriptor instead.
func (*AddTxBatchResponse) Descriptor() ([]byte, []int) {
	return file_services_blockassembly_blockassembly_api_blockassembly_api_proto_rawDescGZIP(), []int{7}
}

func (x *AddTxBatchResponse) GetOk() bool {
	if x != nil {
		return x.Ok
	}
	return false
}

func (x *AddTxBatchResponse) GetTxIdErrors() [][]byte {
	if x != nil {
		return x.TxIdErrors
	}
	return nil
}

// Request for submitting a mining solution to the blockchain.
type SubmitMiningSolutionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         []byte `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`                                   // the id of the mining candidate
	Nonce      uint32 `protobuf:"varint,2,opt,name=nonce,proto3" json:"nonce,omitempty"`                            // the nonce value used for mining
	CoinbaseTx []byte `protobuf:"bytes,3,opt,name=coinbase_tx,json=coinbaseTx,proto3" json:"coinbase_tx,omitempty"` // the coinbase transaction bytes
	Time       uint32 `protobuf:"varint,4,opt,name=time,proto3" json:"time,omitempty"`                              // the timestamp of the block
	Version    uint32 `protobuf:"varint,5,opt,name=version,proto3" json:"version,omitempty"`                        // the version of the block
}

func (x *SubmitMiningSolutionRequest) Reset() {
	*x = SubmitMiningSolutionRequest{}
	mi := &file_services_blockassembly_blockassembly_api_blockassembly_api_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SubmitMiningSolutionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubmitMiningSolutionRequest) ProtoMessage() {}

func (x *SubmitMiningSolutionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_services_blockassembly_blockassembly_api_blockassembly_api_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubmitMiningSolutionRequest.ProtoReflect.Descriptor instead.
func (*SubmitMiningSolutionRequest) Descriptor() ([]byte, []int) {
	return file_services_blockassembly_blockassembly_api_blockassembly_api_proto_rawDescGZIP(), []int{8}
}

func (x *SubmitMiningSolutionRequest) GetId() []byte {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *SubmitMiningSolutionRequest) GetNonce() uint32 {
	if x != nil {
		return x.Nonce
	}
	return 0
}

func (x *SubmitMiningSolutionRequest) GetCoinbaseTx() []byte {
	if x != nil {
		return x.CoinbaseTx
	}
	return nil
}

func (x *SubmitMiningSolutionRequest) GetTime() uint32 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *SubmitMiningSolutionRequest) GetVersion() uint32 {
	if x != nil {
		return x.Version
	}
	return 0
}

// Response indicating whether the submission of a mining solution was successful.
type SubmitMiningSolutionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ok bool `protobuf:"varint,1,opt,name=ok,proto3" json:"ok,omitempty"` // true if the solution was successfully submitted
}

func (x *SubmitMiningSolutionResponse) Reset() {
	*x = SubmitMiningSolutionResponse{}
	mi := &file_services_blockassembly_blockassembly_api_blockassembly_api_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SubmitMiningSolutionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubmitMiningSolutionResponse) ProtoMessage() {}

func (x *SubmitMiningSolutionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_services_blockassembly_blockassembly_api_blockassembly_api_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubmitMiningSolutionResponse.ProtoReflect.Descriptor instead.
func (*SubmitMiningSolutionResponse) Descriptor() ([]byte, []int) {
	return file_services_blockassembly_blockassembly_api_blockassembly_api_proto_rawDescGZIP(), []int{9}
}

func (x *SubmitMiningSolutionResponse) GetOk() bool {
	if x != nil {
		return x.Ok
	}
	return false
}

// Message containing the state of the block assembly service.
type StateMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BlockAssemblyState    string `protobuf:"bytes,1,opt,name=blockAssemblyState,proto3" json:"blockAssemblyState,omitempty"`       // the state of the block assembly service
	SubtreeProcessorState string `protobuf:"bytes,2,opt,name=subtreeProcessorState,proto3" json:"subtreeProcessorState,omitempty"` // the state of the block assembly subtree processor
	ResetWaitCount        uint32 `protobuf:"varint,3,opt,name=resetWaitCount,proto3" json:"resetWaitCount,omitempty"`              // the number of blocks the reset has to wait for
	ResetWaitTime         uint32 `protobuf:"varint,4,opt,name=resetWaitTime,proto3" json:"resetWaitTime,omitempty"`                // the time in seconds the reset has to wait for
	SubtreeCount          uint32 `protobuf:"varint,5,opt,name=subtreeCount,proto3" json:"subtreeCount,omitempty"`                  // the number of subtrees
	TxCount               uint64 `protobuf:"varint,6,opt,name=txCount,proto3" json:"txCount,omitempty"`                            // the number of transactions
	QueueCount            int64  `protobuf:"varint,7,opt,name=queueCount,proto3" json:"queueCount,omitempty"`                      // the size of the queue
	CurrentHeight         uint32 `protobuf:"varint,8,opt,name=currentHeight,proto3" json:"currentHeight,omitempty"`                // the height of the chaintip
	CurrentHash           string `protobuf:"bytes,9,opt,name=currentHash,proto3" json:"currentHash,omitempty"`                     // the hash of the chaintip
}

func (x *StateMessage) Reset() {
	*x = StateMessage{}
	mi := &file_services_blockassembly_blockassembly_api_blockassembly_api_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StateMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StateMessage) ProtoMessage() {}

func (x *StateMessage) ProtoReflect() protoreflect.Message {
	mi := &file_services_blockassembly_blockassembly_api_blockassembly_api_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StateMessage.ProtoReflect.Descriptor instead.
func (*StateMessage) Descriptor() ([]byte, []int) {
	return file_services_blockassembly_blockassembly_api_blockassembly_api_proto_rawDescGZIP(), []int{10}
}

func (x *StateMessage) GetBlockAssemblyState() string {
	if x != nil {
		return x.BlockAssemblyState
	}
	return ""
}

func (x *StateMessage) GetSubtreeProcessorState() string {
	if x != nil {
		return x.SubtreeProcessorState
	}
	return ""
}

func (x *StateMessage) GetResetWaitCount() uint32 {
	if x != nil {
		return x.ResetWaitCount
	}
	return 0
}

func (x *StateMessage) GetResetWaitTime() uint32 {
	if x != nil {
		return x.ResetWaitTime
	}
	return 0
}

func (x *StateMessage) GetSubtreeCount() uint32 {
	if x != nil {
		return x.SubtreeCount
	}
	return 0
}

func (x *StateMessage) GetTxCount() uint64 {
	if x != nil {
		return x.TxCount
	}
	return 0
}

func (x *StateMessage) GetQueueCount() int64 {
	if x != nil {
		return x.QueueCount
	}
	return 0
}

func (x *StateMessage) GetCurrentHeight() uint32 {
	if x != nil {
		return x.CurrentHeight
	}
	return 0
}

func (x *StateMessage) GetCurrentHash() string {
	if x != nil {
		return x.CurrentHash
	}
	return ""
}

// Response containing the current difficulty of the blockchain.
type GetCurrentDifficultyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Difficulty float64 `protobuf:"fixed64,1,opt,name=difficulty,proto3" json:"difficulty,omitempty"` // the current difficulty of the blockchain
}

func (x *GetCurrentDifficultyResponse) Reset() {
	*x = GetCurrentDifficultyResponse{}
	mi := &file_services_blockassembly_blockassembly_api_blockassembly_api_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetCurrentDifficultyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCurrentDifficultyResponse) ProtoMessage() {}

func (x *GetCurrentDifficultyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_services_blockassembly_blockassembly_api_blockassembly_api_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCurrentDifficultyResponse.ProtoReflect.Descriptor instead.
func (*GetCurrentDifficultyResponse) Descriptor() ([]byte, []int) {
	return file_services_blockassembly_blockassembly_api_blockassembly_api_proto_rawDescGZIP(), []int{11}
}

func (x *GetCurrentDifficultyResponse) GetDifficulty() float64 {
	if x != nil {
		return x.Difficulty
	}
	return 0
}

// Request for generating a block.
type GenerateBlocksRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Count int32 `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"` // the number of blocks to generate
}

func (x *GenerateBlocksRequest) Reset() {
	*x = GenerateBlocksRequest{}
	mi := &file_services_blockassembly_blockassembly_api_blockassembly_api_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GenerateBlocksRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenerateBlocksRequest) ProtoMessage() {}

func (x *GenerateBlocksRequest) ProtoReflect() protoreflect.Message {
	mi := &file_services_blockassembly_blockassembly_api_blockassembly_api_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenerateBlocksRequest.ProtoReflect.Descriptor instead.
func (*GenerateBlocksRequest) Descriptor() ([]byte, []int) {
	return file_services_blockassembly_blockassembly_api_blockassembly_api_proto_rawDescGZIP(), []int{12}
}

func (x *GenerateBlocksRequest) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

var File_services_blockassembly_blockassembly_api_blockassembly_api_proto protoreflect.FileDescriptor

var file_services_blockassembly_blockassembly_api_blockassembly_api_proto_rawDesc = []byte{
	0x0a, 0x40, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2f, 0x62, 0x6c, 0x6f, 0x63, 0x6b,
	0x61, 0x73, 0x73, 0x65, 0x6d, 0x62, 0x6c, 0x79, 0x2f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x61, 0x73,
	0x73, 0x65, 0x6d, 0x62, 0x6c, 0x79, 0x5f, 0x61, 0x70, 0x69, 0x2f, 0x62, 0x6c, 0x6f, 0x63, 0x6b,
	0x61, 0x73, 0x73, 0x65, 0x6d, 0x62, 0x6c, 0x79, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x11, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x61, 0x73, 0x73, 0x65, 0x6d, 0x62, 0x6c,
	0x79, 0x5f, 0x61, 0x70, 0x69, 0x1a, 0x11, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2f, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x0e, 0x0a, 0x0c, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x74, 0x0a, 0x0e, 0x48, 0x65, 0x61,
	0x6c, 0x74, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x6f,
	0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x02, 0x6f, 0x6b, 0x12, 0x18, 0x0a, 0x07, 0x64,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x64, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x38, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x22,
	0x51, 0x0a, 0x1b, 0x4e, 0x65, 0x77, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x74, 0x69, 0x70, 0x41, 0x6e,
	0x64, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a,
	0x0a, 0x08, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x74, 0x69, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x08, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x74, 0x69, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x65,
	0x69, 0x67, 0x68, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x68, 0x65, 0x69, 0x67,
	0x68, 0x74, 0x22, 0x94, 0x01, 0x0a, 0x0c, 0x41, 0x64, 0x64, 0x54, 0x78, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x78, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x04, 0x74, 0x78, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x66, 0x65, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x66, 0x65, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x1a, 0x0a,
	0x08, 0x6c, 0x6f, 0x63, 0x6b, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x08, 0x6c, 0x6f, 0x63, 0x6b, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x75, 0x74, 0x78,
	0x6f, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x05, 0x75, 0x74, 0x78, 0x6f, 0x73, 0x12,
	0x18, 0x0a, 0x07, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0c,
	0x52, 0x07, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x73, 0x22, 0x54, 0x0a, 0x11, 0x41, 0x64, 0x64,
	0x54, 0x78, 0x42, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3f,
	0x0a, 0x0a, 0x74, 0x78, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x61, 0x73, 0x73, 0x65, 0x6d, 0x62,
	0x6c, 0x79, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x41, 0x64, 0x64, 0x54, 0x78, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x52, 0x0a, 0x74, 0x78, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x22,
	0x25, 0x0a, 0x0f, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x54, 0x78, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x78, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x04, 0x74, 0x78, 0x69, 0x64, 0x22, 0x1f, 0x0a, 0x0d, 0x41, 0x64, 0x64, 0x54, 0x78, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x6f, 0x6b, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x02, 0x6f, 0x6b, 0x22, 0x44, 0x0a, 0x12, 0x41, 0x64, 0x64, 0x54, 0x78,
	0x42, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a,
	0x02, 0x6f, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x02, 0x6f, 0x6b, 0x12, 0x1e, 0x0a,
	0x0a, 0x74, 0x78, 0x49, 0x64, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0c, 0x52, 0x0a, 0x74, 0x78, 0x49, 0x64, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x22, 0x92, 0x01,
	0x0a, 0x1b, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x4d, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x53, 0x6f,
	0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a,
	0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6e, 0x6f,
	0x6e, 0x63, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73, 0x65, 0x5f,
	0x74, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x63, 0x6f, 0x69, 0x6e, 0x62, 0x61,
	0x73, 0x65, 0x54, 0x78, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x22, 0x2e, 0x0a, 0x1c, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x4d, 0x69, 0x6e, 0x69,
	0x6e, 0x67, 0x53, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x6f, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x02,
	0x6f, 0x6b, 0x22, 0xe8, 0x02, 0x0a, 0x0c, 0x53, 0x74, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x12, 0x2e, 0x0a, 0x12, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x41, 0x73, 0x73, 0x65,
	0x6d, 0x62, 0x6c, 0x79, 0x53, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x12, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x41, 0x73, 0x73, 0x65, 0x6d, 0x62, 0x6c, 0x79, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x12, 0x34, 0x0a, 0x15, 0x73, 0x75, 0x62, 0x74, 0x72, 0x65, 0x65, 0x50, 0x72,
	0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x15, 0x73, 0x75, 0x62, 0x74, 0x72, 0x65, 0x65, 0x50, 0x72, 0x6f, 0x63, 0x65,
	0x73, 0x73, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x72, 0x65, 0x73,
	0x65, 0x74, 0x57, 0x61, 0x69, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0e, 0x72, 0x65, 0x73, 0x65, 0x74, 0x57, 0x61, 0x69, 0x74, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x24, 0x0a, 0x0d, 0x72, 0x65, 0x73, 0x65, 0x74, 0x57, 0x61, 0x69, 0x74, 0x54, 0x69,
	0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x72, 0x65, 0x73, 0x65, 0x74, 0x57,
	0x61, 0x69, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x73, 0x75, 0x62, 0x74, 0x72,
	0x65, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x73,
	0x75, 0x62, 0x74, 0x72, 0x65, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x74,
	0x78, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x74, 0x78,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x71, 0x75, 0x65, 0x75, 0x65, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x71, 0x75, 0x65, 0x75, 0x65,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74,
	0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x74, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x48, 0x61, 0x73, 0x68, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x48, 0x61, 0x73, 0x68, 0x22, 0x3e, 0x0a,
	0x1c, 0x47, 0x65, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x44, 0x69, 0x66, 0x66, 0x69,
	0x63, 0x75, 0x6c, 0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1e, 0x0a,
	0x0a, 0x64, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x0a, 0x64, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x79, 0x22, 0x2d, 0x0a,
	0x15, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x32, 0x92, 0x08, 0x0a,
	0x10, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x41, 0x73, 0x73, 0x65, 0x6d, 0x62, 0x6c, 0x79, 0x41, 0x50,
	0x49, 0x12, 0x52, 0x0a, 0x0a, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x47, 0x52, 0x50, 0x43, 0x12,
	0x1f, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x61, 0x73, 0x73, 0x65, 0x6d, 0x62, 0x6c, 0x79, 0x5f,
	0x61, 0x70, 0x69, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x1a, 0x21, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x61, 0x73, 0x73, 0x65, 0x6d, 0x62, 0x6c, 0x79,
	0x5f, 0x61, 0x70, 0x69, 0x2e, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x4c, 0x0a, 0x05, 0x41, 0x64, 0x64, 0x54, 0x78, 0x12, 0x1f,
	0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x61, 0x73, 0x73, 0x65, 0x6d, 0x62, 0x6c, 0x79, 0x5f, 0x61,
	0x70, 0x69, 0x2e, 0x41, 0x64, 0x64, 0x54, 0x78, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x20, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x61, 0x73, 0x73, 0x65, 0x6d, 0x62, 0x6c, 0x79, 0x5f,
	0x61, 0x70, 0x69, 0x2e, 0x41, 0x64, 0x64, 0x54, 0x78, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x51, 0x0a, 0x08, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x54, 0x78, 0x12,
	0x22, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x61, 0x73, 0x73, 0x65, 0x6d, 0x62, 0x6c, 0x79, 0x5f,
	0x61, 0x70, 0x69, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x54, 0x78, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x61, 0x73, 0x73, 0x65, 0x6d,
	0x62, 0x6c, 0x79, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x22, 0x00, 0x12, 0x5b, 0x0a, 0x0a, 0x41, 0x64, 0x64, 0x54, 0x78, 0x42,
	0x61, 0x74, 0x63, 0x68, 0x12, 0x24, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x61, 0x73, 0x73, 0x65,
	0x6d, 0x62, 0x6c, 0x79, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x41, 0x64, 0x64, 0x54, 0x78, 0x42, 0x61,
	0x74, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x62, 0x6c, 0x6f,
	0x63, 0x6b, 0x61, 0x73, 0x73, 0x65, 0x6d, 0x62, 0x6c, 0x79, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x41,
	0x64, 0x64, 0x54, 0x78, 0x42, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x4f, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x4d, 0x69, 0x6e, 0x69, 0x6e, 0x67,
	0x43, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x12, 0x1f, 0x2e, 0x62, 0x6c, 0x6f, 0x63,
	0x6b, 0x61, 0x73, 0x73, 0x65, 0x6d, 0x62, 0x6c, 0x79, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x16, 0x2e, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x2e, 0x4d, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x43, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61,
	0x74, 0x65, 0x22, 0x00, 0x12, 0x6a, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x74, 0x44, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x79, 0x12, 0x1f, 0x2e, 0x62,
	0x6c, 0x6f, 0x63, 0x6b, 0x61, 0x73, 0x73, 0x65, 0x6d, 0x62, 0x6c, 0x79, 0x5f, 0x61, 0x70, 0x69,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x2f, 0x2e,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x61, 0x73, 0x73, 0x65, 0x6d, 0x62, 0x6c, 0x79, 0x5f, 0x61, 0x70,
	0x69, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x44, 0x69, 0x66, 0x66,
	0x69, 0x63, 0x75, 0x6c, 0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x79, 0x0a, 0x14, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x4d, 0x69, 0x6e, 0x69, 0x6e, 0x67,
	0x53, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2e, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b,
	0x61, 0x73, 0x73, 0x65, 0x6d, 0x62, 0x6c, 0x79, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x75, 0x62,
	0x6d, 0x69, 0x74, 0x4d, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x53, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b,
	0x61, 0x73, 0x73, 0x65, 0x6d, 0x62, 0x6c, 0x79, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x75, 0x62,
	0x6d, 0x69, 0x74, 0x4d, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x53, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5e, 0x0a, 0x18, 0x44,
	0x65, 0x44, 0x75, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x41,
	0x73, 0x73, 0x65, 0x6d, 0x62, 0x6c, 0x79, 0x12, 0x1f, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x61,
	0x73, 0x73, 0x65, 0x6d, 0x62, 0x6c, 0x79, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x1f, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b,
	0x61, 0x73, 0x73, 0x65, 0x6d, 0x62, 0x6c, 0x79, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x00, 0x12, 0x58, 0x0a, 0x12, 0x52,
	0x65, 0x73, 0x65, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x41, 0x73, 0x73, 0x65, 0x6d, 0x62, 0x6c,
	0x79, 0x12, 0x1f, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x61, 0x73, 0x73, 0x65, 0x6d, 0x62, 0x6c,
	0x79, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x1a, 0x1f, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x61, 0x73, 0x73, 0x65, 0x6d, 0x62,
	0x6c, 0x79, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x22, 0x00, 0x12, 0x5b, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x41, 0x73, 0x73, 0x65, 0x6d, 0x62, 0x6c, 0x79, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1f,
	0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x61, 0x73, 0x73, 0x65, 0x6d, 0x62, 0x6c, 0x79, 0x5f, 0x61,
	0x70, 0x69, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a,
	0x1f, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x61, 0x73, 0x73, 0x65, 0x6d, 0x62, 0x6c, 0x79, 0x5f,
	0x61, 0x70, 0x69, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x22, 0x00, 0x12, 0x5d, 0x0a, 0x0e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x73, 0x12, 0x28, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x61, 0x73, 0x73, 0x65,
	0x6d, 0x62, 0x6c, 0x79, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74,
	0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f,
	0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x61, 0x73, 0x73, 0x65, 0x6d, 0x62, 0x6c, 0x79, 0x5f, 0x61,
	0x70, 0x69, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22,
	0x00, 0x42, 0x16, 0x5a, 0x14, 0x2e, 0x2f, 0x3b, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x61, 0x73, 0x73,
	0x65, 0x6d, 0x62, 0x6c, 0x79, 0x5f, 0x61, 0x70, 0x69, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_services_blockassembly_blockassembly_api_blockassembly_api_proto_rawDescOnce sync.Once
	file_services_blockassembly_blockassembly_api_blockassembly_api_proto_rawDescData = file_services_blockassembly_blockassembly_api_blockassembly_api_proto_rawDesc
)

func file_services_blockassembly_blockassembly_api_blockassembly_api_proto_rawDescGZIP() []byte {
	file_services_blockassembly_blockassembly_api_blockassembly_api_proto_rawDescOnce.Do(func() {
		file_services_blockassembly_blockassembly_api_blockassembly_api_proto_rawDescData = protoimpl.X.CompressGZIP(file_services_blockassembly_blockassembly_api_blockassembly_api_proto_rawDescData)
	})
	return file_services_blockassembly_blockassembly_api_blockassembly_api_proto_rawDescData
}

var file_services_blockassembly_blockassembly_api_blockassembly_api_proto_msgTypes = make([]protoimpl.MessageInfo, 13)
var file_services_blockassembly_blockassembly_api_blockassembly_api_proto_goTypes = []any{
	(*EmptyMessage)(nil),                 // 0: blockassembly_api.EmptyMessage
	(*HealthResponse)(nil),               // 1: blockassembly_api.HealthResponse
	(*NewChaintipAndHeightRequest)(nil),  // 2: blockassembly_api.NewChaintipAndHeightRequest
	(*AddTxRequest)(nil),                 // 3: blockassembly_api.AddTxRequest
	(*AddTxBatchRequest)(nil),            // 4: blockassembly_api.AddTxBatchRequest
	(*RemoveTxRequest)(nil),              // 5: blockassembly_api.RemoveTxRequest
	(*AddTxResponse)(nil),                // 6: blockassembly_api.AddTxResponse
	(*AddTxBatchResponse)(nil),           // 7: blockassembly_api.AddTxBatchResponse
	(*SubmitMiningSolutionRequest)(nil),  // 8: blockassembly_api.SubmitMiningSolutionRequest
	(*SubmitMiningSolutionResponse)(nil), // 9: blockassembly_api.SubmitMiningSolutionResponse
	(*StateMessage)(nil),                 // 10: blockassembly_api.StateMessage
	(*GetCurrentDifficultyResponse)(nil), // 11: blockassembly_api.GetCurrentDifficultyResponse
	(*GenerateBlocksRequest)(nil),        // 12: blockassembly_api.GenerateBlocksRequest
	(*timestamppb.Timestamp)(nil),        // 13: google.protobuf.Timestamp
	(*model.MiningCandidate)(nil),        // 14: model.MiningCandidate
}
var file_services_blockassembly_blockassembly_api_blockassembly_api_proto_depIdxs = []int32{
	13, // 0: blockassembly_api.HealthResponse.timestamp:type_name -> google.protobuf.Timestamp
	3,  // 1: blockassembly_api.AddTxBatchRequest.txRequests:type_name -> blockassembly_api.AddTxRequest
	0,  // 2: blockassembly_api.BlockAssemblyAPI.HealthGRPC:input_type -> blockassembly_api.EmptyMessage
	3,  // 3: blockassembly_api.BlockAssemblyAPI.AddTx:input_type -> blockassembly_api.AddTxRequest
	5,  // 4: blockassembly_api.BlockAssemblyAPI.RemoveTx:input_type -> blockassembly_api.RemoveTxRequest
	4,  // 5: blockassembly_api.BlockAssemblyAPI.AddTxBatch:input_type -> blockassembly_api.AddTxBatchRequest
	0,  // 6: blockassembly_api.BlockAssemblyAPI.GetMiningCandidate:input_type -> blockassembly_api.EmptyMessage
	0,  // 7: blockassembly_api.BlockAssemblyAPI.GetCurrentDifficulty:input_type -> blockassembly_api.EmptyMessage
	8,  // 8: blockassembly_api.BlockAssemblyAPI.SubmitMiningSolution:input_type -> blockassembly_api.SubmitMiningSolutionRequest
	0,  // 9: blockassembly_api.BlockAssemblyAPI.DeDuplicateBlockAssembly:input_type -> blockassembly_api.EmptyMessage
	0,  // 10: blockassembly_api.BlockAssemblyAPI.ResetBlockAssembly:input_type -> blockassembly_api.EmptyMessage
	0,  // 11: blockassembly_api.BlockAssemblyAPI.GetBlockAssemblyState:input_type -> blockassembly_api.EmptyMessage
	12, // 12: blockassembly_api.BlockAssemblyAPI.GenerateBlocks:input_type -> blockassembly_api.GenerateBlocksRequest
	1,  // 13: blockassembly_api.BlockAssemblyAPI.HealthGRPC:output_type -> blockassembly_api.HealthResponse
	6,  // 14: blockassembly_api.BlockAssemblyAPI.AddTx:output_type -> blockassembly_api.AddTxResponse
	0,  // 15: blockassembly_api.BlockAssemblyAPI.RemoveTx:output_type -> blockassembly_api.EmptyMessage
	7,  // 16: blockassembly_api.BlockAssemblyAPI.AddTxBatch:output_type -> blockassembly_api.AddTxBatchResponse
	14, // 17: blockassembly_api.BlockAssemblyAPI.GetMiningCandidate:output_type -> model.MiningCandidate
	11, // 18: blockassembly_api.BlockAssemblyAPI.GetCurrentDifficulty:output_type -> blockassembly_api.GetCurrentDifficultyResponse
	9,  // 19: blockassembly_api.BlockAssemblyAPI.SubmitMiningSolution:output_type -> blockassembly_api.SubmitMiningSolutionResponse
	0,  // 20: blockassembly_api.BlockAssemblyAPI.DeDuplicateBlockAssembly:output_type -> blockassembly_api.EmptyMessage
	0,  // 21: blockassembly_api.BlockAssemblyAPI.ResetBlockAssembly:output_type -> blockassembly_api.EmptyMessage
	10, // 22: blockassembly_api.BlockAssemblyAPI.GetBlockAssemblyState:output_type -> blockassembly_api.StateMessage
	0,  // 23: blockassembly_api.BlockAssemblyAPI.GenerateBlocks:output_type -> blockassembly_api.EmptyMessage
	13, // [13:24] is the sub-list for method output_type
	2,  // [2:13] is the sub-list for method input_type
	2,  // [2:2] is the sub-list for extension type_name
	2,  // [2:2] is the sub-list for extension extendee
	0,  // [0:2] is the sub-list for field type_name
}

func init() { file_services_blockassembly_blockassembly_api_blockassembly_api_proto_init() }
func file_services_blockassembly_blockassembly_api_blockassembly_api_proto_init() {
	if File_services_blockassembly_blockassembly_api_blockassembly_api_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_services_blockassembly_blockassembly_api_blockassembly_api_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   13,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_services_blockassembly_blockassembly_api_blockassembly_api_proto_goTypes,
		DependencyIndexes: file_services_blockassembly_blockassembly_api_blockassembly_api_proto_depIdxs,
		MessageInfos:      file_services_blockassembly_blockassembly_api_blockassembly_api_proto_msgTypes,
	}.Build()
	File_services_blockassembly_blockassembly_api_blockassembly_api_proto = out.File
	file_services_blockassembly_blockassembly_api_blockassembly_api_proto_rawDesc = nil
	file_services_blockassembly_blockassembly_api_blockassembly_api_proto_goTypes = nil
	file_services_blockassembly_blockassembly_api_blockassembly_api_proto_depIdxs = nil
}
