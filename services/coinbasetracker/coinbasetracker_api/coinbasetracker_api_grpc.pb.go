// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.23.4
// source: services/coinbasetracker/coinbasetracker_api/coinbasetracker_api.proto

package coinbasetracker_api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	CoinbasetrackerAPI_Health_FullMethodName            = "/coinbasetracker_api.CoinbasetrackerAPI/Health"
	CoinbasetrackerAPI_GetUtxos_FullMethodName          = "/coinbasetracker_api.CoinbasetrackerAPI/GetUtxos"
	CoinbasetrackerAPI_SubmitTransaction_FullMethodName = "/coinbasetracker_api.CoinbasetrackerAPI/SubmitTransaction"
)

// CoinbasetrackerAPIClient is the client API for CoinbasetrackerAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CoinbasetrackerAPIClient interface {
	// Health returns the health of the API.
	Health(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*HealthResponse, error)
	GetUtxos(ctx context.Context, in *GetUtxoRequest, opts ...grpc.CallOption) (*GetUtxoResponse, error)
	SubmitTransaction(ctx context.Context, in *SubmitTransactionRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type coinbasetrackerAPIClient struct {
	cc grpc.ClientConnInterface
}

func NewCoinbasetrackerAPIClient(cc grpc.ClientConnInterface) CoinbasetrackerAPIClient {
	return &coinbasetrackerAPIClient{cc}
}

func (c *coinbasetrackerAPIClient) Health(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*HealthResponse, error) {
	out := new(HealthResponse)
	err := c.cc.Invoke(ctx, CoinbasetrackerAPI_Health_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coinbasetrackerAPIClient) GetUtxos(ctx context.Context, in *GetUtxoRequest, opts ...grpc.CallOption) (*GetUtxoResponse, error) {
	out := new(GetUtxoResponse)
	err := c.cc.Invoke(ctx, CoinbasetrackerAPI_GetUtxos_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coinbasetrackerAPIClient) SubmitTransaction(ctx context.Context, in *SubmitTransactionRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, CoinbasetrackerAPI_SubmitTransaction_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CoinbasetrackerAPIServer is the server API for CoinbasetrackerAPI service.
// All implementations must embed UnimplementedCoinbasetrackerAPIServer
// for forward compatibility
type CoinbasetrackerAPIServer interface {
	// Health returns the health of the API.
	Health(context.Context, *emptypb.Empty) (*HealthResponse, error)
	GetUtxos(context.Context, *GetUtxoRequest) (*GetUtxoResponse, error)
	SubmitTransaction(context.Context, *SubmitTransactionRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedCoinbasetrackerAPIServer()
}

// UnimplementedCoinbasetrackerAPIServer must be embedded to have forward compatible implementations.
type UnimplementedCoinbasetrackerAPIServer struct {
}

func (UnimplementedCoinbasetrackerAPIServer) Health(context.Context, *emptypb.Empty) (*HealthResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Health not implemented")
}
func (UnimplementedCoinbasetrackerAPIServer) GetUtxos(context.Context, *GetUtxoRequest) (*GetUtxoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUtxos not implemented")
}
func (UnimplementedCoinbasetrackerAPIServer) SubmitTransaction(context.Context, *SubmitTransactionRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitTransaction not implemented")
}
func (UnimplementedCoinbasetrackerAPIServer) mustEmbedUnimplementedCoinbasetrackerAPIServer() {}

// UnsafeCoinbasetrackerAPIServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CoinbasetrackerAPIServer will
// result in compilation errors.
type UnsafeCoinbasetrackerAPIServer interface {
	mustEmbedUnimplementedCoinbasetrackerAPIServer()
}

func RegisterCoinbasetrackerAPIServer(s grpc.ServiceRegistrar, srv CoinbasetrackerAPIServer) {
	s.RegisterService(&CoinbasetrackerAPI_ServiceDesc, srv)
}

func _CoinbasetrackerAPI_Health_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoinbasetrackerAPIServer).Health(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CoinbasetrackerAPI_Health_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoinbasetrackerAPIServer).Health(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoinbasetrackerAPI_GetUtxos_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUtxoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoinbasetrackerAPIServer).GetUtxos(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CoinbasetrackerAPI_GetUtxos_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoinbasetrackerAPIServer).GetUtxos(ctx, req.(*GetUtxoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoinbasetrackerAPI_SubmitTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubmitTransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoinbasetrackerAPIServer).SubmitTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CoinbasetrackerAPI_SubmitTransaction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoinbasetrackerAPIServer).SubmitTransaction(ctx, req.(*SubmitTransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CoinbasetrackerAPI_ServiceDesc is the grpc.ServiceDesc for CoinbasetrackerAPI service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CoinbasetrackerAPI_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "coinbasetracker_api.CoinbasetrackerAPI",
	HandlerType: (*CoinbasetrackerAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Health",
			Handler:    _CoinbasetrackerAPI_Health_Handler,
		},
		{
			MethodName: "GetUtxos",
			Handler:    _CoinbasetrackerAPI_GetUtxos_Handler,
		},
		{
			MethodName: "SubmitTransaction",
			Handler:    _CoinbasetrackerAPI_SubmitTransaction_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "services/coinbasetracker/coinbasetracker_api/coinbasetracker_api.proto",
}
