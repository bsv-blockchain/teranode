// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.24.4
// source: services/bootstrap/bootstrap_api/bootstrap_api.proto

package bootstrap_api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	BootstrapAPI_Health_FullMethodName   = "/bootstrap_api.BootstrapAPI/Health"
	BootstrapAPI_Connect_FullMethodName  = "/bootstrap_api.BootstrapAPI/Connect"
	BootstrapAPI_GetNodes_FullMethodName = "/bootstrap_api.BootstrapAPI/GetNodes"
)

// BootstrapAPIClient is the client API for BootstrapAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BootstrapAPIClient interface {
	Health(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*HealthResponse, error)
	Connect(ctx context.Context, in *Info, opts ...grpc.CallOption) (BootstrapAPI_ConnectClient, error)
	GetNodes(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*NodeList, error)
}

type bootstrapAPIClient struct {
	cc grpc.ClientConnInterface
}

func NewBootstrapAPIClient(cc grpc.ClientConnInterface) BootstrapAPIClient {
	return &bootstrapAPIClient{cc}
}

func (c *bootstrapAPIClient) Health(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*HealthResponse, error) {
	out := new(HealthResponse)
	err := c.cc.Invoke(ctx, BootstrapAPI_Health_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bootstrapAPIClient) Connect(ctx context.Context, in *Info, opts ...grpc.CallOption) (BootstrapAPI_ConnectClient, error) {
	stream, err := c.cc.NewStream(ctx, &BootstrapAPI_ServiceDesc.Streams[0], BootstrapAPI_Connect_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &bootstrapAPIConnectClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type BootstrapAPI_ConnectClient interface {
	Recv() (*Notification, error)
	grpc.ClientStream
}

type bootstrapAPIConnectClient struct {
	grpc.ClientStream
}

func (x *bootstrapAPIConnectClient) Recv() (*Notification, error) {
	m := new(Notification)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *bootstrapAPIClient) GetNodes(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*NodeList, error) {
	out := new(NodeList)
	err := c.cc.Invoke(ctx, BootstrapAPI_GetNodes_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BootstrapAPIServer is the server API for BootstrapAPI service.
// All implementations must embed UnimplementedBootstrapAPIServer
// for forward compatibility
type BootstrapAPIServer interface {
	Health(context.Context, *emptypb.Empty) (*HealthResponse, error)
	Connect(*Info, BootstrapAPI_ConnectServer) error
	GetNodes(context.Context, *emptypb.Empty) (*NodeList, error)
	mustEmbedUnimplementedBootstrapAPIServer()
}

// UnimplementedBootstrapAPIServer must be embedded to have forward compatible implementations.
type UnimplementedBootstrapAPIServer struct {
}

func (UnimplementedBootstrapAPIServer) Health(context.Context, *emptypb.Empty) (*HealthResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Health not implemented")
}
func (UnimplementedBootstrapAPIServer) Connect(*Info, BootstrapAPI_ConnectServer) error {
	return status.Errorf(codes.Unimplemented, "method Connect not implemented")
}
func (UnimplementedBootstrapAPIServer) GetNodes(context.Context, *emptypb.Empty) (*NodeList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNodes not implemented")
}
func (UnimplementedBootstrapAPIServer) mustEmbedUnimplementedBootstrapAPIServer() {}

// UnsafeBootstrapAPIServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BootstrapAPIServer will
// result in compilation errors.
type UnsafeBootstrapAPIServer interface {
	mustEmbedUnimplementedBootstrapAPIServer()
}

func RegisterBootstrapAPIServer(s grpc.ServiceRegistrar, srv BootstrapAPIServer) {
	s.RegisterService(&BootstrapAPI_ServiceDesc, srv)
}

func _BootstrapAPI_Health_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BootstrapAPIServer).Health(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BootstrapAPI_Health_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BootstrapAPIServer).Health(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _BootstrapAPI_Connect_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Info)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(BootstrapAPIServer).Connect(m, &bootstrapAPIConnectServer{stream})
}

type BootstrapAPI_ConnectServer interface {
	Send(*Notification) error
	grpc.ServerStream
}

type bootstrapAPIConnectServer struct {
	grpc.ServerStream
}

func (x *bootstrapAPIConnectServer) Send(m *Notification) error {
	return x.ServerStream.SendMsg(m)
}

func _BootstrapAPI_GetNodes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BootstrapAPIServer).GetNodes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BootstrapAPI_GetNodes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BootstrapAPIServer).GetNodes(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// BootstrapAPI_ServiceDesc is the grpc.ServiceDesc for BootstrapAPI service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BootstrapAPI_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "bootstrap_api.BootstrapAPI",
	HandlerType: (*BootstrapAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Health",
			Handler:    _BootstrapAPI_Health_Handler,
		},
		{
			MethodName: "GetNodes",
			Handler:    _BootstrapAPI_GetNodes_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Connect",
			Handler:       _BootstrapAPI_Connect_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "services/bootstrap/bootstrap_api/bootstrap_api.proto",
}
