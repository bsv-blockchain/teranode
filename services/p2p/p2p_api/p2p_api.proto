syntax = "proto3";

option go_package = "./;p2p_api";
import "google/protobuf/empty.proto";

package p2p_api;

message Peer {
  string id = 1;
  string addr = 2;
  string addrLocal = 3;
  string services = 4;
  int64 lastSend = 5;
  int64 lastRecv = 6;
  int64 sendSize = 7;
  int64 recvSize = 8;
  int64 sendMemory = 9;
  bool pauseSend = 10;
  bool unpauseSend = 11;
  uint64 bytesSent = 12;
  uint64 bytesReceived = 13;
  int64 avgRecvBandwidth = 14;
  string assocId = 15;
  string streamPolicy = 16;
  bool inbound = 17;
  int64 connTime = 18;
  int64 pingTime = 19;
  int64 timeOffset = 20;
  uint32 version = 21;
  string subVer = 22;
  int32 startingHeight = 23;
  int32 currentHeight = 24;
  int32 banscore = 25;
  bool whitelisted = 26;
  int64 feeFilter = 27;
  }


  message GetPeersResponse {
    repeated Peer peers = 1;
  }


  message BanPeerRequest {
    string addr = 1;
    int64 until = 2;
}

message BanPeerResponse {
    bool ok = 1;
}

message UnbanPeerRequest {
    string addr = 1;
}

message UnbanPeerResponse {
    bool ok = 1;
}

message IsBannedRequest {
    string ipOrSubnet = 1;
}

message IsBannedResponse {
    bool isBanned = 1;
}

message ListBannedResponse {
    repeated string banned = 1;
}

message ClearBannedResponse {
    bool ok = 1;
}
  
message AddBanScoreRequest {
    string peer_id = 1;
    string reason = 2;
  }

  message AddBanScoreResponse {
    bool ok = 1;
  }

  message ConnectPeerRequest {
    string peer_address = 1; // multiaddr format: /ip4/127.0.0.1/tcp/9005/p2p/12D3KooW...
  }

  message ConnectPeerResponse {
    bool success = 1;
    string error = 2;
  }

  message DisconnectPeerRequest {
    string peer_id = 1; // peer ID to disconnect from
  }

  message DisconnectPeerResponse {
    bool success = 1;
    string error = 2;
  }
  
  // Add new service for peer operations
  service PeerService {
    rpc GetPeers(google.protobuf.Empty) returns (GetPeersResponse) {}
    rpc BanPeer(BanPeerRequest) returns (BanPeerResponse) {}
    rpc UnbanPeer(UnbanPeerRequest) returns (UnbanPeerResponse) {}
    rpc IsBanned(IsBannedRequest) returns (IsBannedResponse) {}
    rpc ListBanned(google.protobuf.Empty) returns (ListBannedResponse) {}
    rpc ClearBanned(google.protobuf.Empty) returns (ClearBannedResponse) {}
    rpc AddBanScore(AddBanScoreRequest) returns (AddBanScoreResponse) {}
    rpc ConnectPeer(ConnectPeerRequest) returns (ConnectPeerResponse) {}
    rpc DisconnectPeer(DisconnectPeerRequest) returns (DisconnectPeerResponse) {}
  }
  