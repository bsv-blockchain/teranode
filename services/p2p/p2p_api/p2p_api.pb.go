// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        v5.29.3
// source: services/p2p/p2p_api/p2p_api.proto

package p2p_api

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Peer struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	Id               int32                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Addr             string                 `protobuf:"bytes,2,opt,name=addr,proto3" json:"addr,omitempty"`
	AddrLocal        string                 `protobuf:"bytes,3,opt,name=addrLocal,proto3" json:"addrLocal,omitempty"`
	Services         string                 `protobuf:"bytes,4,opt,name=services,proto3" json:"services,omitempty"`
	LastSend         int64                  `protobuf:"varint,5,opt,name=lastSend,proto3" json:"lastSend,omitempty"`
	LastRecv         int64                  `protobuf:"varint,6,opt,name=lastRecv,proto3" json:"lastRecv,omitempty"`
	SendSize         int64                  `protobuf:"varint,7,opt,name=sendSize,proto3" json:"sendSize,omitempty"`
	RecvSize         int64                  `protobuf:"varint,8,opt,name=recvSize,proto3" json:"recvSize,omitempty"`
	SendMemory       int64                  `protobuf:"varint,9,opt,name=sendMemory,proto3" json:"sendMemory,omitempty"`
	PauseSend        bool                   `protobuf:"varint,10,opt,name=pauseSend,proto3" json:"pauseSend,omitempty"`
	UnpauseSend      bool                   `protobuf:"varint,11,opt,name=unpauseSend,proto3" json:"unpauseSend,omitempty"`
	BytesSent        uint64                 `protobuf:"varint,12,opt,name=bytesSent,proto3" json:"bytesSent,omitempty"`
	BytesReceived    uint64                 `protobuf:"varint,13,opt,name=bytesReceived,proto3" json:"bytesReceived,omitempty"`
	AvgRecvBandwidth int64                  `protobuf:"varint,14,opt,name=avgRecvBandwidth,proto3" json:"avgRecvBandwidth,omitempty"`
	AssocId          string                 `protobuf:"bytes,15,opt,name=assocId,proto3" json:"assocId,omitempty"`
	StreamPolicy     string                 `protobuf:"bytes,16,opt,name=streamPolicy,proto3" json:"streamPolicy,omitempty"`
	Inbound          bool                   `protobuf:"varint,17,opt,name=inbound,proto3" json:"inbound,omitempty"`
	ConnTime         int64                  `protobuf:"varint,18,opt,name=connTime,proto3" json:"connTime,omitempty"`
	PingTime         int64                  `protobuf:"varint,19,opt,name=pingTime,proto3" json:"pingTime,omitempty"`
	TimeOffset       int64                  `protobuf:"varint,20,opt,name=timeOffset,proto3" json:"timeOffset,omitempty"`
	Version          uint32                 `protobuf:"varint,21,opt,name=version,proto3" json:"version,omitempty"`
	SubVer           string                 `protobuf:"bytes,22,opt,name=subVer,proto3" json:"subVer,omitempty"`
	StartingHeight   int32                  `protobuf:"varint,23,opt,name=startingHeight,proto3" json:"startingHeight,omitempty"`
	CurrentHeight    int32                  `protobuf:"varint,24,opt,name=currentHeight,proto3" json:"currentHeight,omitempty"`
	Banscore         int32                  `protobuf:"varint,25,opt,name=banscore,proto3" json:"banscore,omitempty"`
	Whitelisted      bool                   `protobuf:"varint,26,opt,name=whitelisted,proto3" json:"whitelisted,omitempty"`
	FeeFilter        int64                  `protobuf:"varint,27,opt,name=feeFilter,proto3" json:"feeFilter,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *Peer) Reset() {
	*x = Peer{}
	mi := &file_services_p2p_p2p_api_p2p_api_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Peer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Peer) ProtoMessage() {}

func (x *Peer) ProtoReflect() protoreflect.Message {
	mi := &file_services_p2p_p2p_api_p2p_api_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Peer.ProtoReflect.Descriptor instead.
func (*Peer) Descriptor() ([]byte, []int) {
	return file_services_p2p_p2p_api_p2p_api_proto_rawDescGZIP(), []int{0}
}

func (x *Peer) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Peer) GetAddr() string {
	if x != nil {
		return x.Addr
	}
	return ""
}

func (x *Peer) GetAddrLocal() string {
	if x != nil {
		return x.AddrLocal
	}
	return ""
}

func (x *Peer) GetServices() string {
	if x != nil {
		return x.Services
	}
	return ""
}

func (x *Peer) GetLastSend() int64 {
	if x != nil {
		return x.LastSend
	}
	return 0
}

func (x *Peer) GetLastRecv() int64 {
	if x != nil {
		return x.LastRecv
	}
	return 0
}

func (x *Peer) GetSendSize() int64 {
	if x != nil {
		return x.SendSize
	}
	return 0
}

func (x *Peer) GetRecvSize() int64 {
	if x != nil {
		return x.RecvSize
	}
	return 0
}

func (x *Peer) GetSendMemory() int64 {
	if x != nil {
		return x.SendMemory
	}
	return 0
}

func (x *Peer) GetPauseSend() bool {
	if x != nil {
		return x.PauseSend
	}
	return false
}

func (x *Peer) GetUnpauseSend() bool {
	if x != nil {
		return x.UnpauseSend
	}
	return false
}

func (x *Peer) GetBytesSent() uint64 {
	if x != nil {
		return x.BytesSent
	}
	return 0
}

func (x *Peer) GetBytesReceived() uint64 {
	if x != nil {
		return x.BytesReceived
	}
	return 0
}

func (x *Peer) GetAvgRecvBandwidth() int64 {
	if x != nil {
		return x.AvgRecvBandwidth
	}
	return 0
}

func (x *Peer) GetAssocId() string {
	if x != nil {
		return x.AssocId
	}
	return ""
}

func (x *Peer) GetStreamPolicy() string {
	if x != nil {
		return x.StreamPolicy
	}
	return ""
}

func (x *Peer) GetInbound() bool {
	if x != nil {
		return x.Inbound
	}
	return false
}

func (x *Peer) GetConnTime() int64 {
	if x != nil {
		return x.ConnTime
	}
	return 0
}

func (x *Peer) GetPingTime() int64 {
	if x != nil {
		return x.PingTime
	}
	return 0
}

func (x *Peer) GetTimeOffset() int64 {
	if x != nil {
		return x.TimeOffset
	}
	return 0
}

func (x *Peer) GetVersion() uint32 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *Peer) GetSubVer() string {
	if x != nil {
		return x.SubVer
	}
	return ""
}

func (x *Peer) GetStartingHeight() int32 {
	if x != nil {
		return x.StartingHeight
	}
	return 0
}

func (x *Peer) GetCurrentHeight() int32 {
	if x != nil {
		return x.CurrentHeight
	}
	return 0
}

func (x *Peer) GetBanscore() int32 {
	if x != nil {
		return x.Banscore
	}
	return 0
}

func (x *Peer) GetWhitelisted() bool {
	if x != nil {
		return x.Whitelisted
	}
	return false
}

func (x *Peer) GetFeeFilter() int64 {
	if x != nil {
		return x.FeeFilter
	}
	return 0
}

type GetPeersResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Peers         []*Peer                `protobuf:"bytes,1,rep,name=peers,proto3" json:"peers,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetPeersResponse) Reset() {
	*x = GetPeersResponse{}
	mi := &file_services_p2p_p2p_api_p2p_api_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetPeersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPeersResponse) ProtoMessage() {}

func (x *GetPeersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_services_p2p_p2p_api_p2p_api_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPeersResponse.ProtoReflect.Descriptor instead.
func (*GetPeersResponse) Descriptor() ([]byte, []int) {
	return file_services_p2p_p2p_api_p2p_api_proto_rawDescGZIP(), []int{1}
}

func (x *GetPeersResponse) GetPeers() []*Peer {
	if x != nil {
		return x.Peers
	}
	return nil
}

var File_services_p2p_p2p_api_p2p_api_proto protoreflect.FileDescriptor

var file_services_p2p_p2p_api_p2p_api_proto_rawDesc = string([]byte{
	0x0a, 0x22, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2f, 0x70, 0x32, 0x70, 0x2f, 0x70,
	0x32, 0x70, 0x5f, 0x61, 0x70, 0x69, 0x2f, 0x70, 0x32, 0x70, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x07, 0x70, 0x32, 0x70, 0x5f, 0x61, 0x70, 0x69, 0x1a, 0x1b, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65,
	0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xb0, 0x06, 0x0a, 0x04, 0x50,
	0x65, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x61, 0x64, 0x64, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x61, 0x64, 0x64, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x64, 0x64, 0x72, 0x4c,
	0x6f, 0x63, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x64, 0x64, 0x72,
	0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x73, 0x74, 0x53, 0x65, 0x6e, 0x64, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x08, 0x6c, 0x61, 0x73, 0x74, 0x53, 0x65, 0x6e, 0x64, 0x12, 0x1a, 0x0a,
	0x08, 0x6c, 0x61, 0x73, 0x74, 0x52, 0x65, 0x63, 0x76, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x08, 0x6c, 0x61, 0x73, 0x74, 0x52, 0x65, 0x63, 0x76, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x6e,
	0x64, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x73, 0x65, 0x6e,
	0x64, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x63, 0x76, 0x53, 0x69, 0x7a,
	0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x72, 0x65, 0x63, 0x76, 0x53, 0x69, 0x7a,
	0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x65, 0x6e, 0x64, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x73, 0x65, 0x6e, 0x64, 0x4d, 0x65, 0x6d, 0x6f, 0x72,
	0x79, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x61, 0x75, 0x73, 0x65, 0x53, 0x65, 0x6e, 0x64, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x70, 0x61, 0x75, 0x73, 0x65, 0x53, 0x65, 0x6e, 0x64, 0x12,
	0x20, 0x0a, 0x0b, 0x75, 0x6e, 0x70, 0x61, 0x75, 0x73, 0x65, 0x53, 0x65, 0x6e, 0x64, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x75, 0x6e, 0x70, 0x61, 0x75, 0x73, 0x65, 0x53, 0x65, 0x6e,
	0x64, 0x12, 0x1c, 0x0a, 0x09, 0x62, 0x79, 0x74, 0x65, 0x73, 0x53, 0x65, 0x6e, 0x74, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x62, 0x79, 0x74, 0x65, 0x73, 0x53, 0x65, 0x6e, 0x74, 0x12,
	0x24, 0x0a, 0x0d, 0x62, 0x79, 0x74, 0x65, 0x73, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x62, 0x79, 0x74, 0x65, 0x73, 0x52, 0x65, 0x63,
	0x65, 0x69, 0x76, 0x65, 0x64, 0x12, 0x2a, 0x0a, 0x10, 0x61, 0x76, 0x67, 0x52, 0x65, 0x63, 0x76,
	0x42, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x10, 0x61, 0x76, 0x67, 0x52, 0x65, 0x63, 0x76, 0x42, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74,
	0x68, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x73, 0x73, 0x6f, 0x63, 0x49, 0x64, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x61, 0x73, 0x73, 0x6f, 0x63, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x73,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x10, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12,
	0x18, 0x0a, 0x07, 0x69, 0x6e, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x07, 0x69, 0x6e, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6f, 0x6e,
	0x6e, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x63, 0x6f, 0x6e,
	0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x69, 0x6e, 0x67, 0x54, 0x69, 0x6d,
	0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x69, 0x6e, 0x67, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18,
	0x14, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x4f, 0x66, 0x66, 0x73, 0x65,
	0x74, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x15, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x73,
	0x75, 0x62, 0x56, 0x65, 0x72, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x75, 0x62,
	0x56, 0x65, 0x72, 0x12, 0x26, 0x0a, 0x0e, 0x73, 0x74, 0x61, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x48,
	0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x17, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x69, 0x6e, 0x67, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x18, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0d, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x48, 0x65, 0x69, 0x67, 0x68,
	0x74, 0x12, 0x1a, 0x0a, 0x08, 0x62, 0x61, 0x6e, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x19, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x08, 0x62, 0x61, 0x6e, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x20, 0x0a,
	0x0b, 0x77, 0x68, 0x69, 0x74, 0x65, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x64, 0x18, 0x1a, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0b, 0x77, 0x68, 0x69, 0x74, 0x65, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x64, 0x12,
	0x1c, 0x0a, 0x09, 0x66, 0x65, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x1b, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x09, 0x66, 0x65, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x22, 0x37, 0x0a,
	0x10, 0x47, 0x65, 0x74, 0x50, 0x65, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x23, 0x0a, 0x05, 0x70, 0x65, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x0d, 0x2e, 0x70, 0x32, 0x70, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x65, 0x65, 0x72, 0x52,
	0x05, 0x70, 0x65, 0x65, 0x72, 0x73, 0x32, 0x4e, 0x0a, 0x0b, 0x50, 0x65, 0x65, 0x72, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x3f, 0x0a, 0x08, 0x47, 0x65, 0x74, 0x50, 0x65, 0x65, 0x72,
	0x73, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x19, 0x2e, 0x70, 0x32, 0x70, 0x5f,
	0x61, 0x70, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x65, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x0c, 0x5a, 0x0a, 0x2e, 0x2f, 0x3b, 0x70, 0x32, 0x70,
	0x5f, 0x61, 0x70, 0x69, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_services_p2p_p2p_api_p2p_api_proto_rawDescOnce sync.Once
	file_services_p2p_p2p_api_p2p_api_proto_rawDescData []byte
)

func file_services_p2p_p2p_api_p2p_api_proto_rawDescGZIP() []byte {
	file_services_p2p_p2p_api_p2p_api_proto_rawDescOnce.Do(func() {
		file_services_p2p_p2p_api_p2p_api_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_services_p2p_p2p_api_p2p_api_proto_rawDesc), len(file_services_p2p_p2p_api_p2p_api_proto_rawDesc)))
	})
	return file_services_p2p_p2p_api_p2p_api_proto_rawDescData
}

var file_services_p2p_p2p_api_p2p_api_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_services_p2p_p2p_api_p2p_api_proto_goTypes = []any{
	(*Peer)(nil),             // 0: p2p_api.Peer
	(*GetPeersResponse)(nil), // 1: p2p_api.GetPeersResponse
	(*emptypb.Empty)(nil),    // 2: google.protobuf.Empty
}
var file_services_p2p_p2p_api_p2p_api_proto_depIdxs = []int32{
	0, // 0: p2p_api.GetPeersResponse.peers:type_name -> p2p_api.Peer
	2, // 1: p2p_api.PeerService.GetPeers:input_type -> google.protobuf.Empty
	1, // 2: p2p_api.PeerService.GetPeers:output_type -> p2p_api.GetPeersResponse
	2, // [2:3] is the sub-list for method output_type
	1, // [1:2] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_services_p2p_p2p_api_p2p_api_proto_init() }
func file_services_p2p_p2p_api_p2p_api_proto_init() {
	if File_services_p2p_p2p_api_p2p_api_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_services_p2p_p2p_api_p2p_api_proto_rawDesc), len(file_services_p2p_p2p_api_p2p_api_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_services_p2p_p2p_api_p2p_api_proto_goTypes,
		DependencyIndexes: file_services_p2p_p2p_api_p2p_api_proto_depIdxs,
		MessageInfos:      file_services_p2p_p2p_api_p2p_api_proto_msgTypes,
	}.Build()
	File_services_p2p_p2p_api_p2p_api_proto = out.File
	file_services_p2p_p2p_api_p2p_api_proto_goTypes = nil
	file_services_p2p_p2p_api_p2p_api_proto_depIdxs = nil
}
