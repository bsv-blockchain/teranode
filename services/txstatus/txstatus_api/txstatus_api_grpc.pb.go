// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: services/txstatus/txstatus_api/txstatus_api.proto

package txstatus_api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	TxStatusAPI_Health_FullMethodName   = "/txstatus_api.TxStatusAPI/Health"
	TxStatusAPI_Create_FullMethodName   = "/txstatus_api.TxStatusAPI/Create"
	TxStatusAPI_SetMined_FullMethodName = "/txstatus_api.TxStatusAPI/SetMined"
	TxStatusAPI_Get_FullMethodName      = "/txstatus_api.TxStatusAPI/Get"
	TxStatusAPI_Delete_FullMethodName   = "/txstatus_api.TxStatusAPI/Delete"
)

// TxStatusAPIClient is the client API for TxStatusAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TxStatusAPIClient interface {
	// Health returns the health of the API.
	Health(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*HealthResponse, error)
	Create(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*CreateResponse, error)
	SetMined(ctx context.Context, in *SetMinedRequest, opts ...grpc.CallOption) (*SetMinedResponse, error)
	Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error)
	Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*DeleteResponse, error)
}

type txStatusAPIClient struct {
	cc grpc.ClientConnInterface
}

func NewTxStatusAPIClient(cc grpc.ClientConnInterface) TxStatusAPIClient {
	return &txStatusAPIClient{cc}
}

func (c *txStatusAPIClient) Health(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*HealthResponse, error) {
	out := new(HealthResponse)
	err := c.cc.Invoke(ctx, TxStatusAPI_Health_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *txStatusAPIClient) Create(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*CreateResponse, error) {
	out := new(CreateResponse)
	err := c.cc.Invoke(ctx, TxStatusAPI_Create_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *txStatusAPIClient) SetMined(ctx context.Context, in *SetMinedRequest, opts ...grpc.CallOption) (*SetMinedResponse, error) {
	out := new(SetMinedResponse)
	err := c.cc.Invoke(ctx, TxStatusAPI_SetMined_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *txStatusAPIClient) Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error) {
	out := new(GetResponse)
	err := c.cc.Invoke(ctx, TxStatusAPI_Get_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *txStatusAPIClient) Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*DeleteResponse, error) {
	out := new(DeleteResponse)
	err := c.cc.Invoke(ctx, TxStatusAPI_Delete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TxStatusAPIServer is the server API for TxStatusAPI service.
// All implementations must embed UnimplementedTxStatusAPIServer
// for forward compatibility
type TxStatusAPIServer interface {
	// Health returns the health of the API.
	Health(context.Context, *emptypb.Empty) (*HealthResponse, error)
	Create(context.Context, *CreateRequest) (*CreateResponse, error)
	SetMined(context.Context, *SetMinedRequest) (*SetMinedResponse, error)
	Get(context.Context, *GetRequest) (*GetResponse, error)
	Delete(context.Context, *DeleteRequest) (*DeleteResponse, error)
	mustEmbedUnimplementedTxStatusAPIServer()
}

// UnimplementedTxStatusAPIServer must be embedded to have forward compatible implementations.
type UnimplementedTxStatusAPIServer struct {
}

func (UnimplementedTxStatusAPIServer) Health(context.Context, *emptypb.Empty) (*HealthResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Health not implemented")
}
func (UnimplementedTxStatusAPIServer) Create(context.Context, *CreateRequest) (*CreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedTxStatusAPIServer) SetMined(context.Context, *SetMinedRequest) (*SetMinedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetMined not implemented")
}
func (UnimplementedTxStatusAPIServer) Get(context.Context, *GetRequest) (*GetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedTxStatusAPIServer) Delete(context.Context, *DeleteRequest) (*DeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedTxStatusAPIServer) mustEmbedUnimplementedTxStatusAPIServer() {}

// UnsafeTxStatusAPIServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TxStatusAPIServer will
// result in compilation errors.
type UnsafeTxStatusAPIServer interface {
	mustEmbedUnimplementedTxStatusAPIServer()
}

func RegisterTxStatusAPIServer(s grpc.ServiceRegistrar, srv TxStatusAPIServer) {
	s.RegisterService(&TxStatusAPI_ServiceDesc, srv)
}

func _TxStatusAPI_Health_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TxStatusAPIServer).Health(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TxStatusAPI_Health_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TxStatusAPIServer).Health(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _TxStatusAPI_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TxStatusAPIServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TxStatusAPI_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TxStatusAPIServer).Create(ctx, req.(*CreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TxStatusAPI_SetMined_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetMinedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TxStatusAPIServer).SetMined(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TxStatusAPI_SetMined_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TxStatusAPIServer).SetMined(ctx, req.(*SetMinedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TxStatusAPI_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TxStatusAPIServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TxStatusAPI_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TxStatusAPIServer).Get(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TxStatusAPI_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TxStatusAPIServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TxStatusAPI_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TxStatusAPIServer).Delete(ctx, req.(*DeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TxStatusAPI_ServiceDesc is the grpc.ServiceDesc for TxStatusAPI service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TxStatusAPI_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "txstatus_api.TxStatusAPI",
	HandlerType: (*TxStatusAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Health",
			Handler:    _TxStatusAPI_Health_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _TxStatusAPI_Create_Handler,
		},
		{
			MethodName: "SetMined",
			Handler:    _TxStatusAPI_SetMined_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _TxStatusAPI_Get_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _TxStatusAPI_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "services/txstatus/txstatus_api/txstatus_api.proto",
}
