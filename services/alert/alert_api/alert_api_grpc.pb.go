// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.27.3
// source: services/alert/alert_api/alert_api.proto

package alert_api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	AlertAPI_HealthGRPC_FullMethodName = "/alert_api.AlertAPI/HealthGRPC"
)

// AlertAPIClient is the client API for AlertAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AlertAPIClient interface {
	// Health returns the health of the API.
	HealthGRPC(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*HealthResponse, error)
}

type alertAPIClient struct {
	cc grpc.ClientConnInterface
}

func NewAlertAPIClient(cc grpc.ClientConnInterface) AlertAPIClient {
	return &alertAPIClient{cc}
}

func (c *alertAPIClient) HealthGRPC(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*HealthResponse, error) {
	out := new(HealthResponse)
	err := c.cc.Invoke(ctx, AlertAPI_HealthGRPC_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AlertAPIServer is the server API for AlertAPI service.
// All implementations must embed UnimplementedAlertAPIServer
// for forward compatibility
type AlertAPIServer interface {
	// Health returns the health of the API.
	HealthGRPC(context.Context, *emptypb.Empty) (*HealthResponse, error)
	mustEmbedUnimplementedAlertAPIServer()
}

// UnimplementedAlertAPIServer must be embedded to have forward compatible implementations.
type UnimplementedAlertAPIServer struct {
}

func (UnimplementedAlertAPIServer) HealthGRPC(context.Context, *emptypb.Empty) (*HealthResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HealthGRPC not implemented")
}
func (UnimplementedAlertAPIServer) mustEmbedUnimplementedAlertAPIServer() {}

// UnsafeAlertAPIServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AlertAPIServer will
// result in compilation errors.
type UnsafeAlertAPIServer interface {
	mustEmbedUnimplementedAlertAPIServer()
}

func RegisterAlertAPIServer(s grpc.ServiceRegistrar, srv AlertAPIServer) {
	s.RegisterService(&AlertAPI_ServiceDesc, srv)
}

func _AlertAPI_HealthGRPC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AlertAPIServer).HealthGRPC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AlertAPI_HealthGRPC_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AlertAPIServer).HealthGRPC(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// AlertAPI_ServiceDesc is the grpc.ServiceDesc for AlertAPI service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AlertAPI_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "alert_api.AlertAPI",
	HandlerType: (*AlertAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "HealthGRPC",
			Handler:    _AlertAPI_HealthGRPC_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "services/alert/alert_api/alert_api.proto",
}
