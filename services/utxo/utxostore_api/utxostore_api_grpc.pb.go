// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.9
// source: services/utxo/utxostore_api/utxostore_api.proto

package utxostore_api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	UtxoStoreAPI_Health_FullMethodName = "/utxostore_api.UtxoStoreAPI/Health"
	UtxoStoreAPI_Store_FullMethodName  = "/utxostore_api.UtxoStoreAPI/Store"
	UtxoStoreAPI_Spend_FullMethodName  = "/utxostore_api.UtxoStoreAPI/Spend"
	UtxoStoreAPI_Reset_FullMethodName  = "/utxostore_api.UtxoStoreAPI/Reset"
	UtxoStoreAPI_Get_FullMethodName    = "/utxostore_api.UtxoStoreAPI/Get"
)

// UtxoStoreAPIClient is the client API for UtxoStoreAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UtxoStoreAPIClient interface {
	// Health returns the health of the API.
	Health(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*HealthResponse, error)
	Store(ctx context.Context, in *StoreRequest, opts ...grpc.CallOption) (*StoreResponse, error)
	Spend(ctx context.Context, in *SpendRequest, opts ...grpc.CallOption) (*SpendResponse, error)
	Reset(ctx context.Context, in *ResetRequest, opts ...grpc.CallOption) (*ResetResponse, error)
	Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error)
}

type utxoStoreAPIClient struct {
	cc grpc.ClientConnInterface
}

func NewUtxoStoreAPIClient(cc grpc.ClientConnInterface) UtxoStoreAPIClient {
	return &utxoStoreAPIClient{cc}
}

func (c *utxoStoreAPIClient) Health(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*HealthResponse, error) {
	out := new(HealthResponse)
	err := c.cc.Invoke(ctx, UtxoStoreAPI_Health_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *utxoStoreAPIClient) Store(ctx context.Context, in *StoreRequest, opts ...grpc.CallOption) (*StoreResponse, error) {
	out := new(StoreResponse)
	err := c.cc.Invoke(ctx, UtxoStoreAPI_Store_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *utxoStoreAPIClient) Spend(ctx context.Context, in *SpendRequest, opts ...grpc.CallOption) (*SpendResponse, error) {
	out := new(SpendResponse)
	err := c.cc.Invoke(ctx, UtxoStoreAPI_Spend_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *utxoStoreAPIClient) Reset(ctx context.Context, in *ResetRequest, opts ...grpc.CallOption) (*ResetResponse, error) {
	out := new(ResetResponse)
	err := c.cc.Invoke(ctx, UtxoStoreAPI_Reset_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *utxoStoreAPIClient) Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error) {
	out := new(GetResponse)
	err := c.cc.Invoke(ctx, UtxoStoreAPI_Get_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UtxoStoreAPIServer is the server API for UtxoStoreAPI service.
// All implementations must embed UnimplementedUtxoStoreAPIServer
// for forward compatibility
type UtxoStoreAPIServer interface {
	// Health returns the health of the API.
	Health(context.Context, *emptypb.Empty) (*HealthResponse, error)
	Store(context.Context, *StoreRequest) (*StoreResponse, error)
	Spend(context.Context, *SpendRequest) (*SpendResponse, error)
	Reset(context.Context, *ResetRequest) (*ResetResponse, error)
	Get(context.Context, *GetRequest) (*GetResponse, error)
	mustEmbedUnimplementedUtxoStoreAPIServer()
}

// UnimplementedUtxoStoreAPIServer must be embedded to have forward compatible implementations.
type UnimplementedUtxoStoreAPIServer struct {
}

func (UnimplementedUtxoStoreAPIServer) Health(context.Context, *emptypb.Empty) (*HealthResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Health not implemented")
}
func (UnimplementedUtxoStoreAPIServer) Store(context.Context, *StoreRequest) (*StoreResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Store not implemented")
}
func (UnimplementedUtxoStoreAPIServer) Spend(context.Context, *SpendRequest) (*SpendResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Spend not implemented")
}
func (UnimplementedUtxoStoreAPIServer) Reset(context.Context, *ResetRequest) (*ResetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Reset not implemented")
}
func (UnimplementedUtxoStoreAPIServer) Get(context.Context, *GetRequest) (*GetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedUtxoStoreAPIServer) mustEmbedUnimplementedUtxoStoreAPIServer() {}

// UnsafeUtxoStoreAPIServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UtxoStoreAPIServer will
// result in compilation errors.
type UnsafeUtxoStoreAPIServer interface {
	mustEmbedUnimplementedUtxoStoreAPIServer()
}

func RegisterUtxoStoreAPIServer(s grpc.ServiceRegistrar, srv UtxoStoreAPIServer) {
	s.RegisterService(&UtxoStoreAPI_ServiceDesc, srv)
}

func _UtxoStoreAPI_Health_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UtxoStoreAPIServer).Health(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UtxoStoreAPI_Health_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UtxoStoreAPIServer).Health(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _UtxoStoreAPI_Store_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StoreRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UtxoStoreAPIServer).Store(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UtxoStoreAPI_Store_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UtxoStoreAPIServer).Store(ctx, req.(*StoreRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UtxoStoreAPI_Spend_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SpendRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UtxoStoreAPIServer).Spend(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UtxoStoreAPI_Spend_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UtxoStoreAPIServer).Spend(ctx, req.(*SpendRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UtxoStoreAPI_Reset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UtxoStoreAPIServer).Reset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UtxoStoreAPI_Reset_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UtxoStoreAPIServer).Reset(ctx, req.(*ResetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UtxoStoreAPI_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UtxoStoreAPIServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UtxoStoreAPI_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UtxoStoreAPIServer).Get(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// UtxoStoreAPI_ServiceDesc is the grpc.ServiceDesc for UtxoStoreAPI service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UtxoStoreAPI_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "utxostore_api.UtxoStoreAPI",
	HandlerType: (*UtxoStoreAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Health",
			Handler:    _UtxoStoreAPI_Health_Handler,
		},
		{
			MethodName: "Store",
			Handler:    _UtxoStoreAPI_Store_Handler,
		},
		{
			MethodName: "Spend",
			Handler:    _UtxoStoreAPI_Spend_Handler,
		},
		{
			MethodName: "Reset",
			Handler:    _UtxoStoreAPI_Reset_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _UtxoStoreAPI_Get_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "services/utxo/utxostore_api/utxostore_api.proto",
}
