// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.23.4
// source: services/coinbase/coinbase_api/coinbase_api.proto

package coinbase_api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	CoinbaseAPI_Health_FullMethodName        = "/coinbase_api.coinbaseAPI/Health"
	CoinbaseAPI_GetUtxo_FullMethodName       = "/coinbase_api.coinbaseAPI/GetUtxo"
	CoinbaseAPI_MarkUtxoSpent_FullMethodName = "/coinbase_api.coinbaseAPI/MarkUtxoSpent"
)

// CoinbaseAPIClient is the client API for CoinbaseAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CoinbaseAPIClient interface {
	// Health returns the health of the API.
	Health(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*HealthResponse, error)
	GetUtxo(ctx context.Context, in *GetUtxoRequest, opts ...grpc.CallOption) (*Utxo, error)
	MarkUtxoSpent(ctx context.Context, in *MarkUtxoSpentRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type coinbaseAPIClient struct {
	cc grpc.ClientConnInterface
}

func NewCoinbaseAPIClient(cc grpc.ClientConnInterface) CoinbaseAPIClient {
	return &coinbaseAPIClient{cc}
}

func (c *coinbaseAPIClient) Health(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*HealthResponse, error) {
	out := new(HealthResponse)
	err := c.cc.Invoke(ctx, CoinbaseAPI_Health_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coinbaseAPIClient) GetUtxo(ctx context.Context, in *GetUtxoRequest, opts ...grpc.CallOption) (*Utxo, error) {
	out := new(Utxo)
	err := c.cc.Invoke(ctx, CoinbaseAPI_GetUtxo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coinbaseAPIClient) MarkUtxoSpent(ctx context.Context, in *MarkUtxoSpentRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, CoinbaseAPI_MarkUtxoSpent_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CoinbaseAPIServer is the server API for CoinbaseAPI service.
// All implementations must embed UnimplementedCoinbaseAPIServer
// for forward compatibility
type CoinbaseAPIServer interface {
	// Health returns the health of the API.
	Health(context.Context, *emptypb.Empty) (*HealthResponse, error)
	GetUtxo(context.Context, *GetUtxoRequest) (*Utxo, error)
	MarkUtxoSpent(context.Context, *MarkUtxoSpentRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedCoinbaseAPIServer()
}

// UnimplementedCoinbaseAPIServer must be embedded to have forward compatible implementations.
type UnimplementedCoinbaseAPIServer struct {
}

func (UnimplementedCoinbaseAPIServer) Health(context.Context, *emptypb.Empty) (*HealthResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Health not implemented")
}
func (UnimplementedCoinbaseAPIServer) GetUtxo(context.Context, *GetUtxoRequest) (*Utxo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUtxo not implemented")
}
func (UnimplementedCoinbaseAPIServer) MarkUtxoSpent(context.Context, *MarkUtxoSpentRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MarkUtxoSpent not implemented")
}
func (UnimplementedCoinbaseAPIServer) mustEmbedUnimplementedCoinbaseAPIServer() {}

// UnsafeCoinbaseAPIServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CoinbaseAPIServer will
// result in compilation errors.
type UnsafeCoinbaseAPIServer interface {
	mustEmbedUnimplementedCoinbaseAPIServer()
}

func RegisterCoinbaseAPIServer(s grpc.ServiceRegistrar, srv CoinbaseAPIServer) {
	s.RegisterService(&CoinbaseAPI_ServiceDesc, srv)
}

func _CoinbaseAPI_Health_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoinbaseAPIServer).Health(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CoinbaseAPI_Health_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoinbaseAPIServer).Health(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoinbaseAPI_GetUtxo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUtxoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoinbaseAPIServer).GetUtxo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CoinbaseAPI_GetUtxo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoinbaseAPIServer).GetUtxo(ctx, req.(*GetUtxoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoinbaseAPI_MarkUtxoSpent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MarkUtxoSpentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoinbaseAPIServer).MarkUtxoSpent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CoinbaseAPI_MarkUtxoSpent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoinbaseAPIServer).MarkUtxoSpent(ctx, req.(*MarkUtxoSpentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CoinbaseAPI_ServiceDesc is the grpc.ServiceDesc for CoinbaseAPI service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CoinbaseAPI_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "coinbase_api.coinbaseAPI",
	HandlerType: (*CoinbaseAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Health",
			Handler:    _CoinbaseAPI_Health_Handler,
		},
		{
			MethodName: "GetUtxo",
			Handler:    _CoinbaseAPI_GetUtxo_Handler,
		},
		{
			MethodName: "MarkUtxoSpent",
			Handler:    _CoinbaseAPI_MarkUtxoSpent_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "services/coinbase/coinbase_api/coinbase_api.proto",
}
