// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.9
// source: services/blockvalidation/blockvalidation_api/blockvalidation_api.proto

package blockassembly_api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	BlockValidationAPI_Health_FullMethodName       = "/blockvalidation_api.BlockValidationAPI/Health"
	BlockValidationAPI_BlockFound_FullMethodName   = "/blockvalidation_api.BlockValidationAPI/BlockFound"
	BlockValidationAPI_SubtreeFound_FullMethodName = "/blockvalidation_api.BlockValidationAPI/SubtreeFound"
)

// BlockValidationAPIClient is the client API for BlockValidationAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BlockValidationAPIClient interface {
	// Health returns the health of the API.
	Health(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*HealthResponse, error)
	BlockFound(ctx context.Context, in *BlockFoundRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	SubtreeFound(ctx context.Context, in *SubtreeFoundRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type blockValidationAPIClient struct {
	cc grpc.ClientConnInterface
}

func NewBlockValidationAPIClient(cc grpc.ClientConnInterface) BlockValidationAPIClient {
	return &blockValidationAPIClient{cc}
}

func (c *blockValidationAPIClient) Health(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*HealthResponse, error) {
	out := new(HealthResponse)
	err := c.cc.Invoke(ctx, BlockValidationAPI_Health_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blockValidationAPIClient) BlockFound(ctx context.Context, in *BlockFoundRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, BlockValidationAPI_BlockFound_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blockValidationAPIClient) SubtreeFound(ctx context.Context, in *SubtreeFoundRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, BlockValidationAPI_SubtreeFound_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BlockValidationAPIServer is the server API for BlockValidationAPI service.
// All implementations must embed UnimplementedBlockValidationAPIServer
// for forward compatibility
type BlockValidationAPIServer interface {
	// Health returns the health of the API.
	Health(context.Context, *emptypb.Empty) (*HealthResponse, error)
	BlockFound(context.Context, *BlockFoundRequest) (*emptypb.Empty, error)
	SubtreeFound(context.Context, *SubtreeFoundRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedBlockValidationAPIServer()
}

// UnimplementedBlockValidationAPIServer must be embedded to have forward compatible implementations.
type UnimplementedBlockValidationAPIServer struct {
}

func (UnimplementedBlockValidationAPIServer) Health(context.Context, *emptypb.Empty) (*HealthResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Health not implemented")
}
func (UnimplementedBlockValidationAPIServer) BlockFound(context.Context, *BlockFoundRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BlockFound not implemented")
}
func (UnimplementedBlockValidationAPIServer) SubtreeFound(context.Context, *SubtreeFoundRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubtreeFound not implemented")
}
func (UnimplementedBlockValidationAPIServer) mustEmbedUnimplementedBlockValidationAPIServer() {}

// UnsafeBlockValidationAPIServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BlockValidationAPIServer will
// result in compilation errors.
type UnsafeBlockValidationAPIServer interface {
	mustEmbedUnimplementedBlockValidationAPIServer()
}

func RegisterBlockValidationAPIServer(s grpc.ServiceRegistrar, srv BlockValidationAPIServer) {
	s.RegisterService(&BlockValidationAPI_ServiceDesc, srv)
}

func _BlockValidationAPI_Health_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlockValidationAPIServer).Health(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BlockValidationAPI_Health_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlockValidationAPIServer).Health(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlockValidationAPI_BlockFound_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BlockFoundRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlockValidationAPIServer).BlockFound(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BlockValidationAPI_BlockFound_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlockValidationAPIServer).BlockFound(ctx, req.(*BlockFoundRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlockValidationAPI_SubtreeFound_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubtreeFoundRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlockValidationAPIServer).SubtreeFound(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BlockValidationAPI_SubtreeFound_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlockValidationAPIServer).SubtreeFound(ctx, req.(*SubtreeFoundRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BlockValidationAPI_ServiceDesc is the grpc.ServiceDesc for BlockValidationAPI service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BlockValidationAPI_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "blockvalidation_api.BlockValidationAPI",
	HandlerType: (*BlockValidationAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Health",
			Handler:    _BlockValidationAPI_Health_Handler,
		},
		{
			MethodName: "BlockFound",
			Handler:    _BlockValidationAPI_BlockFound_Handler,
		},
		{
			MethodName: "SubtreeFound",
			Handler:    _BlockValidationAPI_SubtreeFound_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "services/blockvalidation/blockvalidation_api/blockvalidation_api.proto",
}
