// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.27.1
// source: services/blockvalidation/blockvalidation_api/blockvalidation_api.proto

package blockvalidation_api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	BlockValidationAPI_HealthGRPC_FullMethodName    = "/blockvalidation_api.BlockValidationAPI/HealthGRPC"
	BlockValidationAPI_BlockFound_FullMethodName    = "/blockvalidation_api.BlockValidationAPI/BlockFound"
	BlockValidationAPI_SubtreeFound_FullMethodName  = "/blockvalidation_api.BlockValidationAPI/SubtreeFound"
	BlockValidationAPI_ProcessBlock_FullMethodName  = "/blockvalidation_api.BlockValidationAPI/ProcessBlock"
	BlockValidationAPI_Get_FullMethodName           = "/blockvalidation_api.BlockValidationAPI/Get"
	BlockValidationAPI_Exists_FullMethodName        = "/blockvalidation_api.BlockValidationAPI/Exists"
	BlockValidationAPI_SetTxMeta_FullMethodName     = "/blockvalidation_api.BlockValidationAPI/SetTxMeta"
	BlockValidationAPI_DelTxMeta_FullMethodName     = "/blockvalidation_api.BlockValidationAPI/DelTxMeta"
	BlockValidationAPI_SetMinedMulti_FullMethodName = "/blockvalidation_api.BlockValidationAPI/SetMinedMulti"
)

// BlockValidationAPIClient is the client API for BlockValidationAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BlockValidationAPIClient interface {
	// Health returns the health of the API.
	HealthGRPC(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (*HealthResponse, error)
	BlockFound(ctx context.Context, in *BlockFoundRequest, opts ...grpc.CallOption) (*EmptyMessage, error)
	SubtreeFound(ctx context.Context, in *SubtreeFoundRequest, opts ...grpc.CallOption) (*EmptyMessage, error)
	ProcessBlock(ctx context.Context, in *ProcessBlockRequest, opts ...grpc.CallOption) (*EmptyMessage, error)
	Get(ctx context.Context, in *GetSubtreeRequest, opts ...grpc.CallOption) (*GetSubtreeResponse, error)
	Exists(ctx context.Context, in *ExistsSubtreeRequest, opts ...grpc.CallOption) (*ExistsSubtreeResponse, error)
	SetTxMeta(ctx context.Context, in *SetTxMetaRequest, opts ...grpc.CallOption) (*SetTxMetaResponse, error)
	DelTxMeta(ctx context.Context, in *DelTxMetaRequest, opts ...grpc.CallOption) (*DelTxMetaResponse, error)
	SetMinedMulti(ctx context.Context, in *SetMinedMultiRequest, opts ...grpc.CallOption) (*SetMinedMultiResponse, error)
}

type blockValidationAPIClient struct {
	cc grpc.ClientConnInterface
}

func NewBlockValidationAPIClient(cc grpc.ClientConnInterface) BlockValidationAPIClient {
	return &blockValidationAPIClient{cc}
}

func (c *blockValidationAPIClient) HealthGRPC(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (*HealthResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HealthResponse)
	err := c.cc.Invoke(ctx, BlockValidationAPI_HealthGRPC_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blockValidationAPIClient) BlockFound(ctx context.Context, in *BlockFoundRequest, opts ...grpc.CallOption) (*EmptyMessage, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EmptyMessage)
	err := c.cc.Invoke(ctx, BlockValidationAPI_BlockFound_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blockValidationAPIClient) SubtreeFound(ctx context.Context, in *SubtreeFoundRequest, opts ...grpc.CallOption) (*EmptyMessage, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EmptyMessage)
	err := c.cc.Invoke(ctx, BlockValidationAPI_SubtreeFound_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blockValidationAPIClient) ProcessBlock(ctx context.Context, in *ProcessBlockRequest, opts ...grpc.CallOption) (*EmptyMessage, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EmptyMessage)
	err := c.cc.Invoke(ctx, BlockValidationAPI_ProcessBlock_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blockValidationAPIClient) Get(ctx context.Context, in *GetSubtreeRequest, opts ...grpc.CallOption) (*GetSubtreeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetSubtreeResponse)
	err := c.cc.Invoke(ctx, BlockValidationAPI_Get_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blockValidationAPIClient) Exists(ctx context.Context, in *ExistsSubtreeRequest, opts ...grpc.CallOption) (*ExistsSubtreeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ExistsSubtreeResponse)
	err := c.cc.Invoke(ctx, BlockValidationAPI_Exists_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blockValidationAPIClient) SetTxMeta(ctx context.Context, in *SetTxMetaRequest, opts ...grpc.CallOption) (*SetTxMetaResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetTxMetaResponse)
	err := c.cc.Invoke(ctx, BlockValidationAPI_SetTxMeta_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blockValidationAPIClient) DelTxMeta(ctx context.Context, in *DelTxMetaRequest, opts ...grpc.CallOption) (*DelTxMetaResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DelTxMetaResponse)
	err := c.cc.Invoke(ctx, BlockValidationAPI_DelTxMeta_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blockValidationAPIClient) SetMinedMulti(ctx context.Context, in *SetMinedMultiRequest, opts ...grpc.CallOption) (*SetMinedMultiResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetMinedMultiResponse)
	err := c.cc.Invoke(ctx, BlockValidationAPI_SetMinedMulti_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BlockValidationAPIServer is the server API for BlockValidationAPI service.
// All implementations must embed UnimplementedBlockValidationAPIServer
// for forward compatibility.
type BlockValidationAPIServer interface {
	// Health returns the health of the API.
	HealthGRPC(context.Context, *EmptyMessage) (*HealthResponse, error)
	BlockFound(context.Context, *BlockFoundRequest) (*EmptyMessage, error)
	SubtreeFound(context.Context, *SubtreeFoundRequest) (*EmptyMessage, error)
	ProcessBlock(context.Context, *ProcessBlockRequest) (*EmptyMessage, error)
	Get(context.Context, *GetSubtreeRequest) (*GetSubtreeResponse, error)
	Exists(context.Context, *ExistsSubtreeRequest) (*ExistsSubtreeResponse, error)
	SetTxMeta(context.Context, *SetTxMetaRequest) (*SetTxMetaResponse, error)
	DelTxMeta(context.Context, *DelTxMetaRequest) (*DelTxMetaResponse, error)
	SetMinedMulti(context.Context, *SetMinedMultiRequest) (*SetMinedMultiResponse, error)
	mustEmbedUnimplementedBlockValidationAPIServer()
}

// UnimplementedBlockValidationAPIServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedBlockValidationAPIServer struct{}

func (UnimplementedBlockValidationAPIServer) HealthGRPC(context.Context, *EmptyMessage) (*HealthResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HealthGRPC not implemented")
}
func (UnimplementedBlockValidationAPIServer) BlockFound(context.Context, *BlockFoundRequest) (*EmptyMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BlockFound not implemented")
}
func (UnimplementedBlockValidationAPIServer) SubtreeFound(context.Context, *SubtreeFoundRequest) (*EmptyMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubtreeFound not implemented")
}
func (UnimplementedBlockValidationAPIServer) ProcessBlock(context.Context, *ProcessBlockRequest) (*EmptyMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProcessBlock not implemented")
}
func (UnimplementedBlockValidationAPIServer) Get(context.Context, *GetSubtreeRequest) (*GetSubtreeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedBlockValidationAPIServer) Exists(context.Context, *ExistsSubtreeRequest) (*ExistsSubtreeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Exists not implemented")
}
func (UnimplementedBlockValidationAPIServer) SetTxMeta(context.Context, *SetTxMetaRequest) (*SetTxMetaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetTxMeta not implemented")
}
func (UnimplementedBlockValidationAPIServer) DelTxMeta(context.Context, *DelTxMetaRequest) (*DelTxMetaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelTxMeta not implemented")
}
func (UnimplementedBlockValidationAPIServer) SetMinedMulti(context.Context, *SetMinedMultiRequest) (*SetMinedMultiResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetMinedMulti not implemented")
}
func (UnimplementedBlockValidationAPIServer) mustEmbedUnimplementedBlockValidationAPIServer() {}
func (UnimplementedBlockValidationAPIServer) testEmbeddedByValue()                            {}

// UnsafeBlockValidationAPIServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BlockValidationAPIServer will
// result in compilation errors.
type UnsafeBlockValidationAPIServer interface {
	mustEmbedUnimplementedBlockValidationAPIServer()
}

func RegisterBlockValidationAPIServer(s grpc.ServiceRegistrar, srv BlockValidationAPIServer) {
	// If the following call pancis, it indicates UnimplementedBlockValidationAPIServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&BlockValidationAPI_ServiceDesc, srv)
}

func _BlockValidationAPI_HealthGRPC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlockValidationAPIServer).HealthGRPC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BlockValidationAPI_HealthGRPC_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlockValidationAPIServer).HealthGRPC(ctx, req.(*EmptyMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlockValidationAPI_BlockFound_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BlockFoundRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlockValidationAPIServer).BlockFound(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BlockValidationAPI_BlockFound_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlockValidationAPIServer).BlockFound(ctx, req.(*BlockFoundRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlockValidationAPI_SubtreeFound_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubtreeFoundRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlockValidationAPIServer).SubtreeFound(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BlockValidationAPI_SubtreeFound_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlockValidationAPIServer).SubtreeFound(ctx, req.(*SubtreeFoundRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlockValidationAPI_ProcessBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProcessBlockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlockValidationAPIServer).ProcessBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BlockValidationAPI_ProcessBlock_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlockValidationAPIServer).ProcessBlock(ctx, req.(*ProcessBlockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlockValidationAPI_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSubtreeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlockValidationAPIServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BlockValidationAPI_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlockValidationAPIServer).Get(ctx, req.(*GetSubtreeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlockValidationAPI_Exists_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExistsSubtreeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlockValidationAPIServer).Exists(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BlockValidationAPI_Exists_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlockValidationAPIServer).Exists(ctx, req.(*ExistsSubtreeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlockValidationAPI_SetTxMeta_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetTxMetaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlockValidationAPIServer).SetTxMeta(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BlockValidationAPI_SetTxMeta_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlockValidationAPIServer).SetTxMeta(ctx, req.(*SetTxMetaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlockValidationAPI_DelTxMeta_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelTxMetaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlockValidationAPIServer).DelTxMeta(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BlockValidationAPI_DelTxMeta_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlockValidationAPIServer).DelTxMeta(ctx, req.(*DelTxMetaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlockValidationAPI_SetMinedMulti_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetMinedMultiRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlockValidationAPIServer).SetMinedMulti(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BlockValidationAPI_SetMinedMulti_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlockValidationAPIServer).SetMinedMulti(ctx, req.(*SetMinedMultiRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BlockValidationAPI_ServiceDesc is the grpc.ServiceDesc for BlockValidationAPI service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BlockValidationAPI_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "blockvalidation_api.BlockValidationAPI",
	HandlerType: (*BlockValidationAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "HealthGRPC",
			Handler:    _BlockValidationAPI_HealthGRPC_Handler,
		},
		{
			MethodName: "BlockFound",
			Handler:    _BlockValidationAPI_BlockFound_Handler,
		},
		{
			MethodName: "SubtreeFound",
			Handler:    _BlockValidationAPI_SubtreeFound_Handler,
		},
		{
			MethodName: "ProcessBlock",
			Handler:    _BlockValidationAPI_ProcessBlock_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _BlockValidationAPI_Get_Handler,
		},
		{
			MethodName: "Exists",
			Handler:    _BlockValidationAPI_Exists_Handler,
		},
		{
			MethodName: "SetTxMeta",
			Handler:    _BlockValidationAPI_SetTxMeta_Handler,
		},
		{
			MethodName: "DelTxMeta",
			Handler:    _BlockValidationAPI_DelTxMeta_Handler,
		},
		{
			MethodName: "SetMinedMulti",
			Handler:    _BlockValidationAPI_SetMinedMulti_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "services/blockvalidation/blockvalidation_api/blockvalidation_api.proto",
}
