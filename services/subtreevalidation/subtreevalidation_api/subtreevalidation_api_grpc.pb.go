// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.1
// source: services/subtreevalidation/subtreevalidation_api/subtreevalidation_api.proto

package subtreevalidation_api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	SubtreeValidationAPI_HealthGRPC_FullMethodName   = "/subtreevalidation_api.SubtreeValidationAPI/HealthGRPC"
	SubtreeValidationAPI_CheckSubtree_FullMethodName = "/subtreevalidation_api.SubtreeValidationAPI/CheckSubtree"
)

// SubtreeValidationAPIClient is the client API for SubtreeValidationAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SubtreeValidationAPIClient interface {
	// Health returns the health of the API.
	HealthGRPC(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (*HealthResponse, error)
	CheckSubtree(ctx context.Context, in *CheckSubtreeRequest, opts ...grpc.CallOption) (*CheckSubtreeResponse, error)
}

type subtreeValidationAPIClient struct {
	cc grpc.ClientConnInterface
}

func NewSubtreeValidationAPIClient(cc grpc.ClientConnInterface) SubtreeValidationAPIClient {
	return &subtreeValidationAPIClient{cc}
}

func (c *subtreeValidationAPIClient) HealthGRPC(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (*HealthResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HealthResponse)
	err := c.cc.Invoke(ctx, SubtreeValidationAPI_HealthGRPC_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *subtreeValidationAPIClient) CheckSubtree(ctx context.Context, in *CheckSubtreeRequest, opts ...grpc.CallOption) (*CheckSubtreeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CheckSubtreeResponse)
	err := c.cc.Invoke(ctx, SubtreeValidationAPI_CheckSubtree_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SubtreeValidationAPIServer is the server API for SubtreeValidationAPI service.
// All implementations must embed UnimplementedSubtreeValidationAPIServer
// for forward compatibility.
type SubtreeValidationAPIServer interface {
	// Health returns the health of the API.
	HealthGRPC(context.Context, *EmptyMessage) (*HealthResponse, error)
	CheckSubtree(context.Context, *CheckSubtreeRequest) (*CheckSubtreeResponse, error)
	mustEmbedUnimplementedSubtreeValidationAPIServer()
}

// UnimplementedSubtreeValidationAPIServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedSubtreeValidationAPIServer struct{}

func (UnimplementedSubtreeValidationAPIServer) HealthGRPC(context.Context, *EmptyMessage) (*HealthResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HealthGRPC not implemented")
}
func (UnimplementedSubtreeValidationAPIServer) CheckSubtree(context.Context, *CheckSubtreeRequest) (*CheckSubtreeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckSubtree not implemented")
}
func (UnimplementedSubtreeValidationAPIServer) mustEmbedUnimplementedSubtreeValidationAPIServer() {}
func (UnimplementedSubtreeValidationAPIServer) testEmbeddedByValue()                              {}

// UnsafeSubtreeValidationAPIServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SubtreeValidationAPIServer will
// result in compilation errors.
type UnsafeSubtreeValidationAPIServer interface {
	mustEmbedUnimplementedSubtreeValidationAPIServer()
}

func RegisterSubtreeValidationAPIServer(s grpc.ServiceRegistrar, srv SubtreeValidationAPIServer) {
	// If the following call pancis, it indicates UnimplementedSubtreeValidationAPIServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&SubtreeValidationAPI_ServiceDesc, srv)
}

func _SubtreeValidationAPI_HealthGRPC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubtreeValidationAPIServer).HealthGRPC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SubtreeValidationAPI_HealthGRPC_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubtreeValidationAPIServer).HealthGRPC(ctx, req.(*EmptyMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _SubtreeValidationAPI_CheckSubtree_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckSubtreeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubtreeValidationAPIServer).CheckSubtree(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SubtreeValidationAPI_CheckSubtree_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubtreeValidationAPIServer).CheckSubtree(ctx, req.(*CheckSubtreeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SubtreeValidationAPI_ServiceDesc is the grpc.ServiceDesc for SubtreeValidationAPI service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SubtreeValidationAPI_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "subtreevalidation_api.SubtreeValidationAPI",
	HandlerType: (*SubtreeValidationAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "HealthGRPC",
			Handler:    _SubtreeValidationAPI_HealthGRPC_Handler,
		},
		{
			MethodName: "CheckSubtree",
			Handler:    _SubtreeValidationAPI_CheckSubtree_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "services/subtreevalidation/subtreevalidation_api/subtreevalidation_api.proto",
}
