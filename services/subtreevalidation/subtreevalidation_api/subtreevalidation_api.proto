syntax = "proto3";

option go_package = "./;subtreevalidation_api";

package subtreevalidation_api;

import "google/protobuf/timestamp.proto";

// SubtreeValidationAPI provides gRPC services for validating blockchain subtrees.
// The service exposes endpoints for health monitoring and subtree validation operations.
service SubtreeValidationAPI {
  // HealthGRPC checks the service's health status.
  // It takes an empty request message and returns a response indicating the service's health.
  rpc HealthGRPC (EmptyMessage) returns (HealthResponse) {}

  // CheckSubtreeFromBlock validates a subtree within a specified block in the blockchain.
  // It takes a request containing the subtree's merkle root hash and block details,
  // returning a response indicating the subtree's validity status.
  rpc CheckSubtreeFromBlock (CheckSubtreeFromBlockRequest) returns (CheckSubtreeFromBlockResponse) {};

  rpc CheckBlockSubtrees (CheckBlockSubtreesRequest) returns (CheckBlockSubtreesResponse) {};
}

// EmptyMessage represents an empty message structure used for health check requests.
message EmptyMessage {}

// HealthResponse encapsulates the service health status information.
message HealthResponse {
  // ok indicates if the service is operating normally
  bool ok = 1;
  // details provides additional context about the service health status
  string details = 2;
  // timestamp records when the health check was performed
  google.protobuf.Timestamp timestamp = 3;
}


// CheckSubtreeFromBlockRequest defines the input parameters for subtree validation.
message CheckSubtreeFromBlockRequest {
  // hash represents the merkle root hash of the subtree requiring validation
  bytes hash = 1;
  // base_url specifies the endpoint for retrieving missing transaction data
  string base_url = 2;
  // block_height indicates the blockchain height where the subtree is located
  uint32 block_height = 3;
  // block_hash uniquely identifies the block containing the subtree
  bytes block_hash = 4;
  // previous_block_hash identifies the block preceding the current block
  bytes previous_block_hash = 5;
}

// CheckSubtreeFromBlockResponse contains the validation result for a subtree check.
message CheckSubtreeFromBlockResponse {
  // blessed indicates if the subtree passes all validation criteria
  bool blessed = 1;
}

// CheckBlockSubtreesRequest defines the input parameters for checking subtrees in a block.
message CheckBlockSubtreesRequest {
  // block_hash identifies the block containing the subtrees to be checked
  bytes block = 1;
  // base_url specifies the endpoint for retrieving missing transaction data
  string base_url = 2;
}

// CheckBlockSubtreesResponse contains the validation results for subtrees in a block.
message CheckBlockSubtreesResponse {
  // blessed indicates if all subtrees in the block pass validation
  bool blessed = 1;
}
