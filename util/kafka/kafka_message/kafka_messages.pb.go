// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.2
// 	protoc        v5.29.1
// source: util/kafka/kafka_message/kafka_messages.proto

package kafkamessage

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type KafkaTxMetaActionType int32

const (
	KafkaTxMetaActionType_ADD    KafkaTxMetaActionType = 0
	KafkaTxMetaActionType_DELETE KafkaTxMetaActionType = 1
)

// Enum value maps for KafkaTxMetaActionType.
var (
	KafkaTxMetaActionType_name = map[int32]string{
		0: "ADD",
		1: "DELETE",
	}
	KafkaTxMetaActionType_value = map[string]int32{
		"ADD":    0,
		"DELETE": 1,
	}
)

func (x KafkaTxMetaActionType) Enum() *KafkaTxMetaActionType {
	p := new(KafkaTxMetaActionType)
	*p = x
	return p
}

func (x KafkaTxMetaActionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (KafkaTxMetaActionType) Descriptor() protoreflect.EnumDescriptor {
	return file_util_kafka_kafka_message_kafka_messages_proto_enumTypes[0].Descriptor()
}

func (KafkaTxMetaActionType) Type() protoreflect.EnumType {
	return &file_util_kafka_kafka_message_kafka_messages_proto_enumTypes[0]
}

func (x KafkaTxMetaActionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use KafkaTxMetaActionType.Descriptor instead.
func (KafkaTxMetaActionType) EnumDescriptor() ([]byte, []int) {
	return file_util_kafka_kafka_message_kafka_messages_proto_rawDescGZIP(), []int{0}
}

type InvType int32

const (
	InvType_Error         InvType = 0
	InvType_Tx            InvType = 1
	InvType_Block         InvType = 2
	InvType_FilteredBlock InvType = 3
)

// Enum value maps for InvType.
var (
	InvType_name = map[int32]string{
		0: "Error",
		1: "Tx",
		2: "Block",
		3: "FilteredBlock",
	}
	InvType_value = map[string]int32{
		"Error":         0,
		"Tx":            1,
		"Block":         2,
		"FilteredBlock": 3,
	}
)

func (x InvType) Enum() *InvType {
	p := new(InvType)
	*p = x
	return p
}

func (x InvType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (InvType) Descriptor() protoreflect.EnumDescriptor {
	return file_util_kafka_kafka_message_kafka_messages_proto_enumTypes[1].Descriptor()
}

func (InvType) Type() protoreflect.EnumType {
	return &file_util_kafka_kafka_message_kafka_messages_proto_enumTypes[1]
}

func (x InvType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use InvType.Descriptor instead.
func (InvType) EnumDescriptor() ([]byte, []int) {
	return file_util_kafka_kafka_message_kafka_messages_proto_rawDescGZIP(), []int{1}
}

type KafkaBlockTopicMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Hash []byte `protobuf:"bytes,1,opt,name=hash,proto3" json:"hash,omitempty"`
	URL  string `protobuf:"bytes,2,opt,name=URL,proto3" json:"URL,omitempty"`
}

func (x *KafkaBlockTopicMessage) Reset() {
	*x = KafkaBlockTopicMessage{}
	mi := &file_util_kafka_kafka_message_kafka_messages_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *KafkaBlockTopicMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KafkaBlockTopicMessage) ProtoMessage() {}

func (x *KafkaBlockTopicMessage) ProtoReflect() protoreflect.Message {
	mi := &file_util_kafka_kafka_message_kafka_messages_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KafkaBlockTopicMessage.ProtoReflect.Descriptor instead.
func (*KafkaBlockTopicMessage) Descriptor() ([]byte, []int) {
	return file_util_kafka_kafka_message_kafka_messages_proto_rawDescGZIP(), []int{0}
}

func (x *KafkaBlockTopicMessage) GetHash() []byte {
	if x != nil {
		return x.Hash
	}
	return nil
}

func (x *KafkaBlockTopicMessage) GetURL() string {
	if x != nil {
		return x.URL
	}
	return ""
}

type KafkaSubtreeTopicMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Hash []byte `protobuf:"bytes,1,opt,name=hash,proto3" json:"hash,omitempty"`
	URL  string `protobuf:"bytes,2,opt,name=URL,proto3" json:"URL,omitempty"`
}

func (x *KafkaSubtreeTopicMessage) Reset() {
	*x = KafkaSubtreeTopicMessage{}
	mi := &file_util_kafka_kafka_message_kafka_messages_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *KafkaSubtreeTopicMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KafkaSubtreeTopicMessage) ProtoMessage() {}

func (x *KafkaSubtreeTopicMessage) ProtoReflect() protoreflect.Message {
	mi := &file_util_kafka_kafka_message_kafka_messages_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KafkaSubtreeTopicMessage.ProtoReflect.Descriptor instead.
func (*KafkaSubtreeTopicMessage) Descriptor() ([]byte, []int) {
	return file_util_kafka_kafka_message_kafka_messages_proto_rawDescGZIP(), []int{1}
}

func (x *KafkaSubtreeTopicMessage) GetHash() []byte {
	if x != nil {
		return x.Hash
	}
	return nil
}

func (x *KafkaSubtreeTopicMessage) GetURL() string {
	if x != nil {
		return x.URL
	}
	return ""
}

type KafkaTxValidationTopicMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tx      []byte                    `protobuf:"bytes,1,opt,name=tx,proto3" json:"tx,omitempty"`
	Height  uint32                    `protobuf:"varint,2,opt,name=height,proto3" json:"height,omitempty"`
	Options *KafkaTxValidationOptions `protobuf:"bytes,3,opt,name=options,proto3" json:"options,omitempty"`
}

func (x *KafkaTxValidationTopicMessage) Reset() {
	*x = KafkaTxValidationTopicMessage{}
	mi := &file_util_kafka_kafka_message_kafka_messages_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *KafkaTxValidationTopicMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KafkaTxValidationTopicMessage) ProtoMessage() {}

func (x *KafkaTxValidationTopicMessage) ProtoReflect() protoreflect.Message {
	mi := &file_util_kafka_kafka_message_kafka_messages_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KafkaTxValidationTopicMessage.ProtoReflect.Descriptor instead.
func (*KafkaTxValidationTopicMessage) Descriptor() ([]byte, []int) {
	return file_util_kafka_kafka_message_kafka_messages_proto_rawDescGZIP(), []int{2}
}

func (x *KafkaTxValidationTopicMessage) GetTx() []byte {
	if x != nil {
		return x.Tx
	}
	return nil
}

func (x *KafkaTxValidationTopicMessage) GetHeight() uint32 {
	if x != nil {
		return x.Height
	}
	return 0
}

func (x *KafkaTxValidationTopicMessage) GetOptions() *KafkaTxValidationOptions {
	if x != nil {
		return x.Options
	}
	return nil
}

type KafkaTxValidationOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SkipUtxoCreation     bool `protobuf:"varint,1,opt,name=skipUtxoCreation,proto3" json:"skipUtxoCreation,omitempty"`
	AddTXToBlockAssembly bool `protobuf:"varint,2,opt,name=addTXToBlockAssembly,proto3" json:"addTXToBlockAssembly,omitempty"`
	SkipPolicyChecks     bool `protobuf:"varint,3,opt,name=skipPolicyChecks,proto3" json:"skipPolicyChecks,omitempty"`
	CreateConflicting    bool `protobuf:"varint,4,opt,name=createConflicting,proto3" json:"createConflicting,omitempty"`
}

func (x *KafkaTxValidationOptions) Reset() {
	*x = KafkaTxValidationOptions{}
	mi := &file_util_kafka_kafka_message_kafka_messages_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *KafkaTxValidationOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KafkaTxValidationOptions) ProtoMessage() {}

func (x *KafkaTxValidationOptions) ProtoReflect() protoreflect.Message {
	mi := &file_util_kafka_kafka_message_kafka_messages_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KafkaTxValidationOptions.ProtoReflect.Descriptor instead.
func (*KafkaTxValidationOptions) Descriptor() ([]byte, []int) {
	return file_util_kafka_kafka_message_kafka_messages_proto_rawDescGZIP(), []int{3}
}

func (x *KafkaTxValidationOptions) GetSkipUtxoCreation() bool {
	if x != nil {
		return x.SkipUtxoCreation
	}
	return false
}

func (x *KafkaTxValidationOptions) GetAddTXToBlockAssembly() bool {
	if x != nil {
		return x.AddTXToBlockAssembly
	}
	return false
}

func (x *KafkaTxValidationOptions) GetSkipPolicyChecks() bool {
	if x != nil {
		return x.SkipPolicyChecks
	}
	return false
}

func (x *KafkaTxValidationOptions) GetCreateConflicting() bool {
	if x != nil {
		return x.CreateConflicting
	}
	return false
}

type KafkaRejectedTxTopicMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TxHash []byte `protobuf:"bytes,1,opt,name=txHash,proto3" json:"txHash,omitempty"`
	Reason string `protobuf:"bytes,2,opt,name=reason,proto3" json:"reason,omitempty"`
}

func (x *KafkaRejectedTxTopicMessage) Reset() {
	*x = KafkaRejectedTxTopicMessage{}
	mi := &file_util_kafka_kafka_message_kafka_messages_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *KafkaRejectedTxTopicMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KafkaRejectedTxTopicMessage) ProtoMessage() {}

func (x *KafkaRejectedTxTopicMessage) ProtoReflect() protoreflect.Message {
	mi := &file_util_kafka_kafka_message_kafka_messages_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KafkaRejectedTxTopicMessage.ProtoReflect.Descriptor instead.
func (*KafkaRejectedTxTopicMessage) Descriptor() ([]byte, []int) {
	return file_util_kafka_kafka_message_kafka_messages_proto_rawDescGZIP(), []int{4}
}

func (x *KafkaRejectedTxTopicMessage) GetTxHash() []byte {
	if x != nil {
		return x.TxHash
	}
	return nil
}

func (x *KafkaRejectedTxTopicMessage) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

type KafkaTxMetaTopicMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TxHash  []byte                `protobuf:"bytes,1,opt,name=txHash,proto3" json:"txHash,omitempty"`
	Action  KafkaTxMetaActionType `protobuf:"varint,2,opt,name=action,proto3,enum=kafkamessage.KafkaTxMetaActionType" json:"action,omitempty"`
	Content []byte                `protobuf:"bytes,3,opt,name=content,proto3" json:"content,omitempty"`
}

func (x *KafkaTxMetaTopicMessage) Reset() {
	*x = KafkaTxMetaTopicMessage{}
	mi := &file_util_kafka_kafka_message_kafka_messages_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *KafkaTxMetaTopicMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KafkaTxMetaTopicMessage) ProtoMessage() {}

func (x *KafkaTxMetaTopicMessage) ProtoReflect() protoreflect.Message {
	mi := &file_util_kafka_kafka_message_kafka_messages_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KafkaTxMetaTopicMessage.ProtoReflect.Descriptor instead.
func (*KafkaTxMetaTopicMessage) Descriptor() ([]byte, []int) {
	return file_util_kafka_kafka_message_kafka_messages_proto_rawDescGZIP(), []int{5}
}

func (x *KafkaTxMetaTopicMessage) GetTxHash() []byte {
	if x != nil {
		return x.TxHash
	}
	return nil
}

func (x *KafkaTxMetaTopicMessage) GetAction() KafkaTxMetaActionType {
	if x != nil {
		return x.Action
	}
	return KafkaTxMetaActionType_ADD
}

func (x *KafkaTxMetaTopicMessage) GetContent() []byte {
	if x != nil {
		return x.Content
	}
	return nil
}

type KafkaInvTopicMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PeerAddress string `protobuf:"bytes,1,opt,name=peerAddress,proto3" json:"peerAddress,omitempty"`
	Inv         []*Inv `protobuf:"bytes,2,rep,name=inv,proto3" json:"inv,omitempty"`
}

func (x *KafkaInvTopicMessage) Reset() {
	*x = KafkaInvTopicMessage{}
	mi := &file_util_kafka_kafka_message_kafka_messages_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *KafkaInvTopicMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KafkaInvTopicMessage) ProtoMessage() {}

func (x *KafkaInvTopicMessage) ProtoReflect() protoreflect.Message {
	mi := &file_util_kafka_kafka_message_kafka_messages_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KafkaInvTopicMessage.ProtoReflect.Descriptor instead.
func (*KafkaInvTopicMessage) Descriptor() ([]byte, []int) {
	return file_util_kafka_kafka_message_kafka_messages_proto_rawDescGZIP(), []int{6}
}

func (x *KafkaInvTopicMessage) GetPeerAddress() string {
	if x != nil {
		return x.PeerAddress
	}
	return ""
}

func (x *KafkaInvTopicMessage) GetInv() []*Inv {
	if x != nil {
		return x.Inv
	}
	return nil
}

type Inv struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type InvType `protobuf:"varint,1,opt,name=type,proto3,enum=kafkamessage.InvType" json:"type,omitempty"`
	Hash []byte  `protobuf:"bytes,2,opt,name=hash,proto3" json:"hash,omitempty"`
}

func (x *Inv) Reset() {
	*x = Inv{}
	mi := &file_util_kafka_kafka_message_kafka_messages_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Inv) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Inv) ProtoMessage() {}

func (x *Inv) ProtoReflect() protoreflect.Message {
	mi := &file_util_kafka_kafka_message_kafka_messages_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Inv.ProtoReflect.Descriptor instead.
func (*Inv) Descriptor() ([]byte, []int) {
	return file_util_kafka_kafka_message_kafka_messages_proto_rawDescGZIP(), []int{7}
}

func (x *Inv) GetType() InvType {
	if x != nil {
		return x.Type
	}
	return InvType_Error
}

func (x *Inv) GetHash() []byte {
	if x != nil {
		return x.Hash
	}
	return nil
}

type KafkaBlocksFinalTopicMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header           []byte   `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`                                              // Block header bytes
	TransactionCount uint64   `protobuf:"varint,2,opt,name=transaction_count,json=transactionCount,proto3" json:"transaction_count,omitempty"` // Number of transactions in block
	SizeInBytes      uint64   `protobuf:"varint,3,opt,name=size_in_bytes,json=sizeInBytes,proto3" json:"size_in_bytes,omitempty"`              // Size of block in bytes
	SubtreeHashes    [][]byte `protobuf:"bytes,4,rep,name=subtree_hashes,json=subtreeHashes,proto3" json:"subtree_hashes,omitempty"`           // Merkle tree subtree hashes
	CoinbaseTx       []byte   `protobuf:"bytes,5,opt,name=coinbase_tx,json=coinbaseTx,proto3" json:"coinbase_tx,omitempty"`                    // Coinbase transaction bytes
	Height           uint32   `protobuf:"varint,6,opt,name=height,proto3" json:"height,omitempty"`                                             // Block height
}

func (x *KafkaBlocksFinalTopicMessage) Reset() {
	*x = KafkaBlocksFinalTopicMessage{}
	mi := &file_util_kafka_kafka_message_kafka_messages_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *KafkaBlocksFinalTopicMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KafkaBlocksFinalTopicMessage) ProtoMessage() {}

func (x *KafkaBlocksFinalTopicMessage) ProtoReflect() protoreflect.Message {
	mi := &file_util_kafka_kafka_message_kafka_messages_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KafkaBlocksFinalTopicMessage.ProtoReflect.Descriptor instead.
func (*KafkaBlocksFinalTopicMessage) Descriptor() ([]byte, []int) {
	return file_util_kafka_kafka_message_kafka_messages_proto_rawDescGZIP(), []int{8}
}

func (x *KafkaBlocksFinalTopicMessage) GetHeader() []byte {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *KafkaBlocksFinalTopicMessage) GetTransactionCount() uint64 {
	if x != nil {
		return x.TransactionCount
	}
	return 0
}

func (x *KafkaBlocksFinalTopicMessage) GetSizeInBytes() uint64 {
	if x != nil {
		return x.SizeInBytes
	}
	return 0
}

func (x *KafkaBlocksFinalTopicMessage) GetSubtreeHashes() [][]byte {
	if x != nil {
		return x.SubtreeHashes
	}
	return nil
}

func (x *KafkaBlocksFinalTopicMessage) GetCoinbaseTx() []byte {
	if x != nil {
		return x.CoinbaseTx
	}
	return nil
}

func (x *KafkaBlocksFinalTopicMessage) GetHeight() uint32 {
	if x != nil {
		return x.Height
	}
	return 0
}

var File_util_kafka_kafka_message_kafka_messages_proto protoreflect.FileDescriptor

var file_util_kafka_kafka_message_kafka_messages_proto_rawDesc = []byte{
	0x0a, 0x2d, 0x75, 0x74, 0x69, 0x6c, 0x2f, 0x6b, 0x61, 0x66, 0x6b, 0x61, 0x2f, 0x6b, 0x61, 0x66,
	0x6b, 0x61, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2f, 0x6b, 0x61, 0x66, 0x6b, 0x61,
	0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x0c, 0x6b, 0x61, 0x66, 0x6b, 0x61, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x3e, 0x0a,
	0x16, 0x4b, 0x61, 0x66, 0x6b, 0x61, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x54, 0x6f, 0x70, 0x69, 0x63,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x61, 0x73, 0x68, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x68, 0x61, 0x73, 0x68, 0x12, 0x10, 0x0a, 0x03, 0x55,
	0x52, 0x4c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x55, 0x52, 0x4c, 0x22, 0x40, 0x0a,
	0x18, 0x4b, 0x61, 0x66, 0x6b, 0x61, 0x53, 0x75, 0x62, 0x74, 0x72, 0x65, 0x65, 0x54, 0x6f, 0x70,
	0x69, 0x63, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x61, 0x73,
	0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x68, 0x61, 0x73, 0x68, 0x12, 0x10, 0x0a,
	0x03, 0x55, 0x52, 0x4c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x55, 0x52, 0x4c, 0x22,
	0x89, 0x01, 0x0a, 0x1d, 0x4b, 0x61, 0x66, 0x6b, 0x61, 0x54, 0x78, 0x56, 0x61, 0x6c, 0x69, 0x64,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x0e, 0x0a, 0x02, 0x74, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x02, 0x74,
	0x78, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x40, 0x0a, 0x07, 0x6f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x6b, 0x61, 0x66,
	0x6b, 0x61, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x4b, 0x61, 0x66, 0x6b, 0x61, 0x54,
	0x78, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x52, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0xd4, 0x01, 0x0a, 0x18,
	0x4b, 0x61, 0x66, 0x6b, 0x61, 0x54, 0x78, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x2a, 0x0a, 0x10, 0x73, 0x6b, 0x69, 0x70,
	0x55, 0x74, 0x78, 0x6f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x10, 0x73, 0x6b, 0x69, 0x70, 0x55, 0x74, 0x78, 0x6f, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x32, 0x0a, 0x14, 0x61, 0x64, 0x64, 0x54, 0x58, 0x54, 0x6f, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x41, 0x73, 0x73, 0x65, 0x6d, 0x62, 0x6c, 0x79, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x14, 0x61, 0x64, 0x64, 0x54, 0x58, 0x54, 0x6f, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x41, 0x73, 0x73, 0x65, 0x6d, 0x62, 0x6c, 0x79, 0x12, 0x2a, 0x0a, 0x10, 0x73, 0x6b, 0x69, 0x70,
	0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x10, 0x73, 0x6b, 0x69, 0x70, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x43, 0x68,
	0x65, 0x63, 0x6b, 0x73, 0x12, 0x2c, 0x0a, 0x11, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f,
	0x6e, 0x66, 0x6c, 0x69, 0x63, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x11, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x6c, 0x69, 0x63, 0x74, 0x69,
	0x6e, 0x67, 0x22, 0x4d, 0x0a, 0x1b, 0x4b, 0x61, 0x66, 0x6b, 0x61, 0x52, 0x65, 0x6a, 0x65, 0x63,
	0x74, 0x65, 0x64, 0x54, 0x78, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x78, 0x48, 0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x06, 0x74, 0x78, 0x48, 0x61, 0x73, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x61,
	0x73, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x22, 0x88, 0x01, 0x0a, 0x17, 0x4b, 0x61, 0x66, 0x6b, 0x61, 0x54, 0x78, 0x4d, 0x65, 0x74,
	0x61, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x74, 0x78, 0x48, 0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x74,
	0x78, 0x48, 0x61, 0x73, 0x68, 0x12, 0x3b, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x6b, 0x61, 0x66, 0x6b, 0x61, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x2e, 0x4b, 0x61, 0x66, 0x6b, 0x61, 0x54, 0x78, 0x4d, 0x65, 0x74, 0x61,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x22, 0x5d, 0x0a, 0x14,
	0x4b, 0x61, 0x66, 0x6b, 0x61, 0x49, 0x6e, 0x76, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x65, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x65, 0x65, 0x72, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x23, 0x0a, 0x03, 0x69, 0x6e, 0x76, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6b, 0x61, 0x66, 0x6b, 0x61, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x2e, 0x49, 0x6e, 0x76, 0x52, 0x03, 0x69, 0x6e, 0x76, 0x22, 0x44, 0x0a, 0x03, 0x49,
	0x6e, 0x76, 0x12, 0x29, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x15, 0x2e, 0x6b, 0x61, 0x66, 0x6b, 0x61, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e,
	0x49, 0x6e, 0x76, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x68, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x68, 0x61, 0x73,
	0x68, 0x22, 0xe7, 0x01, 0x0a, 0x1c, 0x4b, 0x61, 0x66, 0x6b, 0x61, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x73, 0x46, 0x69, 0x6e, 0x61, 0x6c, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x2b, 0x0a, 0x11, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x10, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x22, 0x0a, 0x0d, 0x73, 0x69, 0x7a, 0x65, 0x5f,
	0x69, 0x6e, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b,
	0x73, 0x69, 0x7a, 0x65, 0x49, 0x6e, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x73,
	0x75, 0x62, 0x74, 0x72, 0x65, 0x65, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x65, 0x73, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x0c, 0x52, 0x0d, 0x73, 0x75, 0x62, 0x74, 0x72, 0x65, 0x65, 0x48, 0x61, 0x73, 0x68,
	0x65, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x74,
	0x78, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x63, 0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73,
	0x65, 0x54, 0x78, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x2a, 0x2c, 0x0a, 0x15, 0x4b,
	0x61, 0x66, 0x6b, 0x61, 0x54, 0x78, 0x4d, 0x65, 0x74, 0x61, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x07, 0x0a, 0x03, 0x41, 0x44, 0x44, 0x10, 0x00, 0x12, 0x0a, 0x0a,
	0x06, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x10, 0x01, 0x2a, 0x3a, 0x0a, 0x07, 0x49, 0x6e, 0x76,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x09, 0x0a, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x10, 0x00, 0x12,
	0x06, 0x0a, 0x02, 0x54, 0x78, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x10, 0x02, 0x12, 0x11, 0x0a, 0x0d, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x65, 0x64, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x10, 0x03, 0x42, 0x11, 0x5a, 0x0f, 0x2e, 0x2f, 0x3b, 0x6b, 0x61, 0x66, 0x6b,
	0x61, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_util_kafka_kafka_message_kafka_messages_proto_rawDescOnce sync.Once
	file_util_kafka_kafka_message_kafka_messages_proto_rawDescData = file_util_kafka_kafka_message_kafka_messages_proto_rawDesc
)

func file_util_kafka_kafka_message_kafka_messages_proto_rawDescGZIP() []byte {
	file_util_kafka_kafka_message_kafka_messages_proto_rawDescOnce.Do(func() {
		file_util_kafka_kafka_message_kafka_messages_proto_rawDescData = protoimpl.X.CompressGZIP(file_util_kafka_kafka_message_kafka_messages_proto_rawDescData)
	})
	return file_util_kafka_kafka_message_kafka_messages_proto_rawDescData
}

var file_util_kafka_kafka_message_kafka_messages_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_util_kafka_kafka_message_kafka_messages_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_util_kafka_kafka_message_kafka_messages_proto_goTypes = []any{
	(KafkaTxMetaActionType)(0),            // 0: kafkamessage.KafkaTxMetaActionType
	(InvType)(0),                          // 1: kafkamessage.InvType
	(*KafkaBlockTopicMessage)(nil),        // 2: kafkamessage.KafkaBlockTopicMessage
	(*KafkaSubtreeTopicMessage)(nil),      // 3: kafkamessage.KafkaSubtreeTopicMessage
	(*KafkaTxValidationTopicMessage)(nil), // 4: kafkamessage.KafkaTxValidationTopicMessage
	(*KafkaTxValidationOptions)(nil),      // 5: kafkamessage.KafkaTxValidationOptions
	(*KafkaRejectedTxTopicMessage)(nil),   // 6: kafkamessage.KafkaRejectedTxTopicMessage
	(*KafkaTxMetaTopicMessage)(nil),       // 7: kafkamessage.KafkaTxMetaTopicMessage
	(*KafkaInvTopicMessage)(nil),          // 8: kafkamessage.KafkaInvTopicMessage
	(*Inv)(nil),                           // 9: kafkamessage.Inv
	(*KafkaBlocksFinalTopicMessage)(nil),  // 10: kafkamessage.KafkaBlocksFinalTopicMessage
}
var file_util_kafka_kafka_message_kafka_messages_proto_depIdxs = []int32{
	5, // 0: kafkamessage.KafkaTxValidationTopicMessage.options:type_name -> kafkamessage.KafkaTxValidationOptions
	0, // 1: kafkamessage.KafkaTxMetaTopicMessage.action:type_name -> kafkamessage.KafkaTxMetaActionType
	9, // 2: kafkamessage.KafkaInvTopicMessage.inv:type_name -> kafkamessage.Inv
	1, // 3: kafkamessage.Inv.type:type_name -> kafkamessage.InvType
	4, // [4:4] is the sub-list for method output_type
	4, // [4:4] is the sub-list for method input_type
	4, // [4:4] is the sub-list for extension type_name
	4, // [4:4] is the sub-list for extension extendee
	0, // [0:4] is the sub-list for field type_name
}

func init() { file_util_kafka_kafka_message_kafka_messages_proto_init() }
func file_util_kafka_kafka_message_kafka_messages_proto_init() {
	if File_util_kafka_kafka_message_kafka_messages_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_util_kafka_kafka_message_kafka_messages_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_util_kafka_kafka_message_kafka_messages_proto_goTypes,
		DependencyIndexes: file_util_kafka_kafka_message_kafka_messages_proto_depIdxs,
		EnumInfos:         file_util_kafka_kafka_message_kafka_messages_proto_enumTypes,
		MessageInfos:      file_util_kafka_kafka_message_kafka_messages_proto_msgTypes,
	}.Build()
	File_util_kafka_kafka_message_kafka_messages_proto = out.File
	file_util_kafka_kafka_message_kafka_messages_proto_rawDesc = nil
	file_util_kafka_kafka_message_kafka_messages_proto_goTypes = nil
	file_util_kafka_kafka_message_kafka_messages_proto_depIdxs = nil
}
